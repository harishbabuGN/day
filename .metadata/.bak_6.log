!SESSION 2023-09-21 10:32:03.159 -----------------------------------------------
eclipse.buildId=4.14.1.202204250734
java.version=17.0.2
java.vendor=Eclipse Adoptium
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_IN
Framework arguments:  -product org.springframework.boot.ide.branding.sts4
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.springframework.boot.ide.branding.sts4

This is a continuation of log file D:\DaydropDEV\.metadata\.bak_5.log
Created Time: 2023-09-21 15:03:37.381

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-09-21 15:03:37.383
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3003)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1003)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:799)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:743)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-09-21 15:03:37.385
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3003)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1003)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:799)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:743)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2023-09-21 15:03:38.266
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.xyram.daydrop.serviceimpl;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.transaction.Transactional;

import org.apache.commons.collections4.map.HashedMap;
import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.server.ResponseStatusException;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.xyram.daydrop.admin.model.CurrentUser;
import com.xyram.daydrop.basemodel.Base64Wrapper;
import com.xyram.daydrop.basemodel.MerchantTransactionIdGenerator;
import com.xyram.daydrop.basemodel.PhonepeSerializer;
import com.xyram.daydrop.dao.ApartmentDao;
import com.xyram.daydrop.dao.CustomerDetailsDao;
import com.xyram.daydrop.dao.CustomerOrderDao;
import com.xyram.daydrop.dao.CustomerOrderReplicaDoa;
import com.xyram.daydrop.dao.SheduleDao;
import com.xyram.daydrop.enumtypes.UserStatus;
import com.xyram.daydrop.model.Apartments;
import com.xyram.daydrop.model.CustomerOrder;
import com.xyram.daydrop.model.CustomerOrderReplica;
import com.xyram.daydrop.model.Customers;
import com.xyram.daydrop.model.Schedule;
import com.xyram.daydrop.modelMapper.PaymentInstrument;
import com.xyram.daydrop.modelMapper.PhonePePayModel;
import com.xyram.daydrop.request.CustomerOrderReplicaRequest;
import com.xyram.daydrop.response.RazorPayRequest;
import com.xyram.daydrop.service.CustomerOrderPriceService;
import com.xyram.daydrop.service.CustomerOrderReplicaService;
import com.xyram.daydrop.util.HashEncoder;
import com.xyram.daydrop.util.RazorPay;
import com.xyram.daydrop.service.ConsumerService;

@Transactional
@Service
public class CustomerOrderReplicaServiceImpl implements CustomerOrderReplicaService {

	@Autowired
	CustomerOrderReplicaDoa customerOrderReplicaDoa;

	@Autowired
	ApartmentDao apartmentDao;

	@Autowired
	SheduleDao scheduleDao;

	@Autowired
	CustomerDetailsDao customerDetailsDao;

	@Autowired
	ConsumerService consumerService;

	@Autowired
	CurrentUser currentUser;

	@Autowired
	PhonepeServiceImpl phonepeServiceImpl;

	@Value("${merchant_id}")
	private String merchantId;

	@Value("${salt_key}")
	private String saltKey;

	@Value("${salt_index}")
	private String saltIndex;

	@Override
	public Map createCustomerOrderReplicaService(CustomerOrderReplicaRequest customerOrderReplicaRequest,
			String contactNumber, Integer aparmentId)

	{

		Map response = new HashedMap<>();

		response.put("message", "success");
		CustomerOrderReplica customerOrderReplica = null;

		if (customerOrderReplicaRequest.getCartId() == null) {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "cartId is mandatory ");
		}
		long razorPayCount = 0;
		if (customerOrderReplicaRequest.getOrderId() != null) {

			razorPayCount = customerOrderReplicaDoa.getRazorPayExistByCartId(customerOrderReplicaRequest.getOrderId());
		}

		if (customerOrderReplicaRequest.getCustomerDetails() == null) {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Order Details  is mandatory ");
		}

		customerOrderReplica = customerOrderReplicaDoa.getCustomerOrderByCartId(customerOrderReplicaRequest.getCartId(),
				contactNumber);

		if (customerOrderReplica != null) {
			customerOrderReplica.setCartId(customerOrderReplica.getCartId());

			if (customerOrderReplica.isOrdered()) {
				throw new ResponseStatusException(HttpStatus.CONFLICT, "Your Order is Placed With cart Details");
			}

//			if (razorPayCount >= 1 && !(customerOrderReplica.getRazorPayOrderId() != null
//					&& customerOrderReplica.getRazorPayOrderId().equals(customerOrderReplicaRequest.getOrderId()))) {
//				throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Razor Pay Id Are already Exist ");
//			}

			customerOrderReplica.setStatusType(customerOrderReplicaRequest.getStatusType());
			customerOrderReplica.setContactNumber(contactNumber);
			customerOrderReplica.setApartmentId(aparmentId);

			customerOrderReplica.setAttempts(customerOrderReplica.getAttempts() + 1);
			customerOrderReplica.setUpdatedTime(new Date());

			customerOrderReplica.setRazorPayOrderId(customerOrderReplicaRequest.getOrderId());

			try {

				JSONObject obj = new JSONObject(customerOrderReplicaRequest.getCustomerDetails());

				customerOrderReplica.setCustomerOrderDetails(obj != null ? obj.toString() : null);

				customerOrderReplicaDoa.updateCustomer(customerOrderReplica);
				return response;

			} catch (Exception e) {
				customerOrderReplica.setCustomerOrderDetails(customerOrderReplicaRequest.getCustomerDetails() != null
						? customerOrderReplicaRequest.getCustomerDetails().toString()
						: null);
				customerOrderReplicaDoa.updateCustomer(customerOrderReplica);
				return response;
			}

		} else {

			customerOrderReplica = new CustomerOrderReplica();
			customerOrderReplica.setContactNumber(contactNumber);
			customerOrderReplica.setApartmentId(aparmentId);
			customerOrderReplica.setCartId(customerOrderReplicaRequest.getCartId());
			customerOrderReplica.setStatusType(customerOrderReplicaRequest.getStatusType());

			if (razorPayCount > 0) {
				throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Razor Pay Id Are already Exist ");
			}

			customerOrderReplica.setRazorPayOrderId(customerOrderReplicaRequest.getOrderId());

			Schedule schedule = scheduleDao.getlatestScheduleCustomers();

			if (schedule != null) {

				try {
					customerOrderReplica.setSchedule(schedule.getsId() != null ? schedule.getsId().toString() : null);
				} catch (Exception e) {
					e.printStackTrace();
				}
			} else {
				throw new ResponseStatusException(HttpStatus.BAD_REQUEST,
						"Sorry We Are Not Accepting Any Order Right now");

			}

			try {

				JSONObject obj = new JSONObject(customerOrderReplicaRequest.getCustomerDetails());

				customerOrderReplica.setCustomerOrderDetails(obj != null ? obj.toString() : null);

				customerOrderReplicaDoa.updateCustomer(customerOrderReplica);
				return response;

			} catch (Exception e) {
				customerOrderReplica.setCustomerOrderDetails(customerOrderReplicaRequest.getCustomerDetails() != null
						? customerOrderReplicaRequest.getCustomerDetails().toString()
						: null);
				customerOrderReplicaDoa.updateCustomer(customerOrderReplica);
				return response;
			}

		}

	}

	@Override
	public List<CustomerOrderReplica> getAllCustomerOrderReplicas(Map<String, Object> request) {

		String statusType = null;
		String searchQuery = null;

		String schedule = null;

		Map filter = request.containsKey("filters") ? (Map) request.get("filters") : null;
		if (filter != null) {
			statusType = filter.containsKey("statusType") ? ((String) filter.get("statusType")).toLowerCase() : null;
			searchQuery = filter.containsKey("searchQuery") ? ((String) filter.get("searchQuery")).toLowerCase() : null;
			schedule = filter.containsKey("schedule") ? (String.valueOf(filter.get("schedule"))) : null;

		}

		List<CustomerOrderReplica> CustomerOrderReplica = customerOrderReplicaDoa
				.getAllcustomerOrderReplica(searchQuery, statusType, schedule);

		ObjectMapper objectMapper = new ObjectMapper();
		CustomerOrderReplica.forEach(customerOrderReplica -> {
			try {

				// convert JSON string to Map
				Map<String, Object> customerOrderReplicaMap = objectMapper
						.readValue(customerOrderReplica.getCustomerOrderDetails(), Map.class);

				Object customerOrder = customerOrderReplicaMap.get("customerOrder");
				Map<String, Object> items = (Map<String, Object>) customerOrderReplicaMap.get("items");

				Object quanityList = items.get("quantity");

				Map customers = customerDetailsDao.getByContactNumberAndApartment(
						customerOrderReplica.getContactNumber(), customerOrderReplica.getApartmentId());

				// Apartments apartments =
				// apartmentDao.getApartmentById(customerOrderReplica.getApartmentId());
				customerOrderReplica.setApartmentName(
						customers.get("apartmentName") != null ? (String) customers.get("apartmentName") : null);

				customerOrderReplica.setStreetName(
						customers.get("streetName") != null ? (String) customers.get("streetName") : null);

				customerOrderReplica.setCustomerDetails(customers);

				customerOrderReplica.setCustomerOrder(customerOrder);
				customerOrderReplica.setQuatityList(quanityList);

			} catch (Exception e) {
				e.printStackTrace();
			}

		});

		return CustomerOrderReplica;

	}

	@Override
	public List<CustomerOrderReplica> getAllCustomerOrderReplicasBySchedule(Map<String, Object> request) {

		String statusType = null;
		String searchQuery = null;

		String scheduleId = null;

		Schedule schedule = scheduleDao.getlatestScheduleCustomers();

		if (schedule != null) {

			try {
				scheduleId = schedule.getsId() != null ? schedule.getsId().toString() : null;
			} catch (Exception e) {
				e.printStackTrace();
			}
		}

		statusType = request.containsKey("statusType") ? ((String) request.get("statusType")).toLowerCase() : "Success";

		List<CustomerOrderReplica> CustomerOrderReplica = customerOrderReplicaDoa
				.getAllcustomerOrderReplicaBySchdeule(statusType, scheduleId);

		ObjectMapper objectMapper = new ObjectMapper();
		CustomerOrderReplica.forEach(customerOrderReplica -> {
			try {

				// convert JSON string to Map
				Map<String, Object> customerOrderReplicaMap = objectMapper
						.readValue(customerOrderReplica.getCustomerOrderDetails(), Map.class);

				Object customerOrder = customerOrderReplicaMap.get("customerOrder");
				Map<String, Object> items = (Map<String, Object>) customerOrderReplicaMap.get("items");

				Object quanityList = items.get("quantity");
				Map customers = customerDetailsDao.getByContactNumberAndApartment(
						customerOrderReplica.getContactNumber(), customerOrderReplica.getApartmentId());

				System.out.println("customers" + customers.get("customerName"));

				// Apartments apartments =
				// apartmentDao.getApartmentById(customerOrderReplica.getApartmentId());
				customerOrderReplica.setApartmentName(
						customers.get("apartmentName") != null ? (String) customers.get("apartmentName") : null);

				customerOrderReplica.setCustomerDetails(customers);

				customerOrderReplica.setCustomerOrder(customerOrder);
				customerOrderReplica.setQuatityList(quanityList);

			} catch (Exception e) {
				e.printStackTrace();
			}

		});

		return CustomerOrderReplica;

	}

	@Override
	public CustomerOrderReplica getCustomerOrderReplicaByCartId(String cartId) {

		CustomerOrderReplica CustomerOrderReplica = customerOrderReplicaDoa.getCustomerOrderByCartId(cartId,
				currentUser.getContactNumber());

		ObjectMapper objectMapper = new ObjectMapper();
		try {

			// convert JSON string to Map
			Map<String, Object> customerOrderReplicaMap = objectMapper
					.readValue(CustomerOrderReplica.getCustomerOrderDetails(), Map.class);

			Object customerOrder = customerOrderReplicaMap.get("customerOrder");
			Map<String, Object> items = (Map<String, Object>) customerOrderReplicaMap.get("items");

			Object quanityList = items.get("quantity");
			Map customers = customerDetailsDao.getByContactNumberAndApartment(CustomerOrderReplica.getContactNumber(),
					CustomerOrderReplica.getApartmentId());

			System.out.println("customers" + customers.get("customerName"));

			// Apartments apartments =
			// apartmentDao.getApartmentById(customerOrderReplica.getApartmentId());
			CustomerOrderReplica.setApartmentName(
					customers.get("apartmentName") != null ? (String) customers.get("apartmentName") : null);

			CustomerOrderReplica.setCustomerDetails(customers);

			CustomerOrderReplica.setCustomerOrder(customerOrder);
			CustomerOrderReplica.setQuatityList(quanityList);

		} catch (Exception e) {
			e.printStackTrace();
		}

		return CustomerOrderReplica;

	}

	@Override
	public Map createCustomerOrderReplica(CustomerOrderReplicaRequest customerOrderReplicaRequest, String contactNumber,
			Integer aparmentId) {

		if (customerOrderReplicaRequest.getRazorPayRequest() != null) {

//			Map razorPay = consumerService.createRazorPayOrder(customerOrderReplicaRequest.getRazorPayRequest());
//			customerOrderReplicaRequest.setOrderId(razorPay.get("order") != null ? (String)((RazorPay) razorPay.get("order")).getId() : null);	
//	
//			createCustomerOrderReplicaService(customerOrderReplicaRequest, contactNumber, aparmentId);
//
//			razorPay.put("cartId", customerOrderReplicaRequest.getCartId());

			Map customerOrderReplicaMap = new HashMap<>();

			Map orderId = new HashMap<>();
			String transactionId = getMerchantTransactionId();
			orderId.put("id", transactionId);

			customerOrderReplicaMap.put("order", orderId);

			customerOrderReplicaRequest.setOrderId(transactionId);
			createCustomerOrderReplicaService(customerOrderReplicaRequest, contactNumber, aparmentId);

			customerOrderReplicaMap.put("cartId", customerOrderReplicaRequest.getCartId());

			try {
				customerOrderReplicaMap.put("phonePeResponse",
						phonepeServiceImpl.initiatePhonepePayment(transactionId,
								Integer.valueOf(customerOrderReplicaRequest.getRazorPayRequest().getAmount()),
								contactNumber, customerOrderReplicaRequest.getRedirectUrl(), customerOrderReplicaRequest.getCallBackUrl()));

			} catch (Exception e) {
				e.printStackTrace();
				customerOrderReplicaMap.put("phonePeResponse", new HashedMap<>());
			}

			return customerOrderReplicaMap;

		} else {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST,
					"paymentDetails transcation Details are mandatory");
		}

	}

	private static String getMerchantTransactionId() {

		return "OD_" + MerchantTransactionIdGenerator.getRandomString();
	}


	@Override
	public List<CustomerOrderReplica> getCustomerOrderByMoblieNo(String contactNumber,Integer aid) {
		
		Schedule latestschedule = customerOrderReplicaDoa.getlatestschedule();
		
		if (latestschedule != null && latestschedule.getCreationTimestamp()!=null) {
			
	        if (latestschedule.getStatus().equals(UserStatus.ACTIVE)) {
	        	
	        	Customers customer = customerDetailsDao.getByContactNoAndApartment(contactNumber, aid);
	        	if (customer != null) { // Ensure the customer exists
	        		List<CustomerOrder> customerOrderList = customerOrderReplicaDoa.getListCustomerOrderByCustomerId(customer.getCtid());
	        		
	                double totalOrderAmount = 0.0;
	       
                if (customerOrderList != null && !customerOrderList.isEmpty() && customerOrderList.add(customerOrder). {
                    for (CustomerOrder customerOrder : customerOrderList) {
                        Double orderAmount = customerOrder.getAmount();
                        if (orderAmount != null) {
                            totalOrderAmount += orderAmount;
                            if(totalOrderAmount>200) {
                            	totalOrderAmount+customerOrder
                            }
                        }
                    }
                    System.out.println("Total Order Amount: " + totalOrderAmount);
                    List<CustomerOrderReplica> customerOrderReplicas = new ArrayList<>();
                    return customerOrderReplicas;
                } else {
                    return Collections.emptyList(); // or return null or an appropriate value
                }
            } else {
              
                return null; // or an appropriate value
            }
        } else {
            // Handle the case when the latest schedule is not active
            return null; // or an appropriate value
        }
    } else {
        // Handle the case when there is no latest schedule or its creation timestamp is null
        return null; // or an appropriate value
    }
	}
}



----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3003)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-09-21 15:03:38.268
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3003)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-09-21 15:03:38.270
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3003)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2023-09-21 15:03:39.636
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.xyram.daydrop.serviceimpl;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.transaction.Transactional;

import org.apache.commons.collections4.map.HashedMap;
import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.server.ResponseStatusException;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.xyram.daydrop.admin.model.CurrentUser;
import com.xyram.daydrop.basemodel.Base64Wrapper;
import com.xyram.daydrop.basemodel.MerchantTransactionIdGenerator;
import com.xyram.daydrop.basemodel.PhonepeSerializer;
import com.xyram.daydrop.dao.ApartmentDao;
import com.xyram.daydrop.dao.CustomerDetailsDao;
import com.xyram.daydrop.dao.CustomerOrderDao;
import com.xyram.daydrop.dao.CustomerOrderReplicaDoa;
import com.xyram.daydrop.dao.SheduleDao;
import com.xyram.daydrop.enumtypes.UserStatus;
import com.xyram.daydrop.model.Apartments;
import com.xyram.daydrop.model.CustomerOrder;
import com.xyram.daydrop.model.CustomerOrderReplica;
import com.xyram.daydrop.model.Customers;
import com.xyram.daydrop.model.Schedule;
import com.xyram.daydrop.modelMapper.PaymentInstrument;
import com.xyram.daydrop.modelMapper.PhonePePayModel;
import com.xyram.daydrop.request.CustomerOrderReplicaRequest;
import com.xyram.daydrop.response.RazorPayRequest;
import com.xyram.daydrop.service.CustomerOrderPriceService;
import com.xyram.daydrop.service.CustomerOrderReplicaService;
import com.xyram.daydrop.util.HashEncoder;
import com.xyram.daydrop.util.RazorPay;
import com.xyram.daydrop.service.ConsumerService;

@Transactional
@Service
public class CustomerOrderReplicaServiceImpl implements CustomerOrderReplicaService {

	@Autowired
	CustomerOrderReplicaDoa customerOrderReplicaDoa;

	@Autowired
	ApartmentDao apartmentDao;

	@Autowired
	SheduleDao scheduleDao;

	@Autowired
	CustomerDetailsDao customerDetailsDao;

	@Autowired
	ConsumerService consumerService;

	@Autowired
	CurrentUser currentUser;

	@Autowired
	PhonepeServiceImpl phonepeServiceImpl;

	@Value("${merchant_id}")
	private String merchantId;

	@Value("${salt_key}")
	private String saltKey;

	@Value("${salt_index}")
	private String saltIndex;

	@Override
	public Map createCustomerOrderReplicaService(CustomerOrderReplicaRequest customerOrderReplicaRequest,
			String contactNumber, Integer aparmentId)

	{

		Map response = new HashedMap<>();

		response.put("message", "success");
		CustomerOrderReplica customerOrderReplica = null;

		if (customerOrderReplicaRequest.getCartId() == null) {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "cartId is mandatory ");
		}
		long razorPayCount = 0;
		if (customerOrderReplicaRequest.getOrderId() != null) {

			razorPayCount = customerOrderReplicaDoa.getRazorPayExistByCartId(customerOrderReplicaRequest.getOrderId());
		}

		if (customerOrderReplicaRequest.getCustomerDetails() == null) {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Order Details  is mandatory ");
		}

		customerOrderReplica = customerOrderReplicaDoa.getCustomerOrderByCartId(customerOrderReplicaRequest.getCartId(),
				contactNumber);

		if (customerOrderReplica != null) {
			customerOrderReplica.setCartId(customerOrderReplica.getCartId());

			if (customerOrderReplica.isOrdered()) {
				throw new ResponseStatusException(HttpStatus.CONFLICT, "Your Order is Placed With cart Details");
			}

//			if (razorPayCount >= 1 && !(customerOrderReplica.getRazorPayOrderId() != null
//					&& customerOrderReplica.getRazorPayOrderId().equals(customerOrderReplicaRequest.getOrderId()))) {
//				throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Razor Pay Id Are already Exist ");
//			}

			customerOrderReplica.setStatusType(customerOrderReplicaRequest.getStatusType());
			customerOrderReplica.setContactNumber(contactNumber);
			customerOrderReplica.setApartmentId(aparmentId);

			customerOrderReplica.setAttempts(customerOrderReplica.getAttempts() + 1);
			customerOrderReplica.setUpdatedTime(new Date());

			customerOrderReplica.setRazorPayOrderId(customerOrderReplicaRequest.getOrderId());

			try {

				JSONObject obj = new JSONObject(customerOrderReplicaRequest.getCustomerDetails());

				customerOrderReplica.setCustomerOrderDetails(obj != null ? obj.toString() : null);

				customerOrderReplicaDoa.updateCustomer(customerOrderReplica);
				return response;

			} catch (Exception e) {
				customerOrderReplica.setCustomerOrderDetails(customerOrderReplicaRequest.getCustomerDetails() != null
						? customerOrderReplicaRequest.getCustomerDetails().toString()
						: null);
				customerOrderReplicaDoa.updateCustomer(customerOrderReplica);
				return response;
			}

		} else {

			customerOrderReplica = new CustomerOrderReplica();
			customerOrderReplica.setContactNumber(contactNumber);
			customerOrderReplica.setApartmentId(aparmentId);
			customerOrderReplica.setCartId(customerOrderReplicaRequest.getCartId());
			customerOrderReplica.setStatusType(customerOrderReplicaRequest.getStatusType());

			if (razorPayCount > 0) {
				throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Razor Pay Id Are already Exist ");
			}

			customerOrderReplica.setRazorPayOrderId(customerOrderReplicaRequest.getOrderId());

			Schedule schedule = scheduleDao.getlatestScheduleCustomers();

			if (schedule != null) {

				try {
					customerOrderReplica.setSchedule(schedule.getsId() != null ? schedule.getsId().toString() : null);
				} catch (Exception e) {
					e.printStackTrace();
				}
			} else {
				throw new ResponseStatusException(HttpStatus.BAD_REQUEST,
						"Sorry We Are Not Accepting Any Order Right now");

			}

			try {

				JSONObject obj = new JSONObject(customerOrderReplicaRequest.getCustomerDetails());

				customerOrderReplica.setCustomerOrderDetails(obj != null ? obj.toString() : null);

				customerOrderReplicaDoa.updateCustomer(customerOrderReplica);
				return response;

			} catch (Exception e) {
				customerOrderReplica.setCustomerOrderDetails(customerOrderReplicaRequest.getCustomerDetails() != null
						? customerOrderReplicaRequest.getCustomerDetails().toString()
						: null);
				customerOrderReplicaDoa.updateCustomer(customerOrderReplica);
				return response;
			}

		}

	}

	@Override
	public List<CustomerOrderReplica> getAllCustomerOrderReplicas(Map<String, Object> request) {

		String statusType = null;
		String searchQuery = null;

		String schedule = null;

		Map filter = request.containsKey("filters") ? (Map) request.get("filters") : null;
		if (filter != null) {
			statusType = filter.containsKey("statusType") ? ((String) filter.get("statusType")).toLowerCase() : null;
			searchQuery = filter.containsKey("searchQuery") ? ((String) filter.get("searchQuery")).toLowerCase() : null;
			schedule = filter.containsKey("schedule") ? (String.valueOf(filter.get("schedule"))) : null;

		}

		List<CustomerOrderReplica> CustomerOrderReplica = customerOrderReplicaDoa
				.getAllcustomerOrderReplica(searchQuery, statusType, schedule);

		ObjectMapper objectMapper = new ObjectMapper();
		CustomerOrderReplica.forEach(customerOrderReplica -> {
			try {

				// convert JSON string to Map
				Map<String, Object> customerOrderReplicaMap = objectMapper
						.readValue(customerOrderReplica.getCustomerOrderDetails(), Map.class);

				Object customerOrder = customerOrderReplicaMap.get("customerOrder");
				Map<String, Object> items = (Map<String, Object>) customerOrderReplicaMap.get("items");

				Object quanityList = items.get("quantity");

				Map customers = customerDetailsDao.getByContactNumberAndApartment(
						customerOrderReplica.getContactNumber(), customerOrderReplica.getApartmentId());

				// Apartments apartments =
				// apartmentDao.getApartmentById(customerOrderReplica.getApartmentId());
				customerOrderReplica.setApartmentName(
						customers.get("apartmentName") != null ? (String) customers.get("apartmentName") : null);

				customerOrderReplica.setStreetName(
						customers.get("streetName") != null ? (String) customers.get("streetName") : null);

				customerOrderReplica.setCustomerDetails(customers);

				customerOrderReplica.setCustomerOrder(customerOrder);
				customerOrderReplica.setQuatityList(quanityList);

			} catch (Exception e) {
				e.printStackTrace();
			}

		});

		return CustomerOrderReplica;

	}

	@Override
	public List<CustomerOrderReplica> getAllCustomerOrderReplicasBySchedule(Map<String, Object> request) {

		String statusType = null;
		String searchQuery = null;

		String scheduleId = null;

		Schedule schedule = scheduleDao.getlatestScheduleCustomers();

		if (schedule != null) {

			try {
				scheduleId = schedule.getsId() != null ? schedule.getsId().toString() : null;
			} catch (Exception e) {
				e.printStackTrace();
			}
		}

		statusType = request.containsKey("statusType") ? ((String) request.get("statusType")).toLowerCase() : "Success";

		List<CustomerOrderReplica> CustomerOrderReplica = customerOrderReplicaDoa
				.getAllcustomerOrderReplicaBySchdeule(statusType, scheduleId);

		ObjectMapper objectMapper = new ObjectMapper();
		CustomerOrderReplica.forEach(customerOrderReplica -> {
			try {

				// convert JSON string to Map
				Map<String, Object> customerOrderReplicaMap = objectMapper
						.readValue(customerOrderReplica.getCustomerOrderDetails(), Map.class);

				Object customerOrder = customerOrderReplicaMap.get("customerOrder");
				Map<String, Object> items = (Map<String, Object>) customerOrderReplicaMap.get("items");

				Object quanityList = items.get("quantity");
				Map customers = customerDetailsDao.getByContactNumberAndApartment(
						customerOrderReplica.getContactNumber(), customerOrderReplica.getApartmentId());

				System.out.println("customers" + customers.get("customerName"));

				// Apartments apartments =
				// apartmentDao.getApartmentById(customerOrderReplica.getApartmentId());
				customerOrderReplica.setApartmentName(
						customers.get("apartmentName") != null ? (String) customers.get("apartmentName") : null);

				customerOrderReplica.setCustomerDetails(customers);

				customerOrderReplica.setCustomerOrder(customerOrder);
				customerOrderReplica.setQuatityList(quanityList);

			} catch (Exception e) {
				e.printStackTrace();
			}

		});

		return CustomerOrderReplica;

	}

	@Override
	public CustomerOrderReplica getCustomerOrderReplicaByCartId(String cartId) {

		CustomerOrderReplica CustomerOrderReplica = customerOrderReplicaDoa.getCustomerOrderByCartId(cartId,
				currentUser.getContactNumber());

		ObjectMapper objectMapper = new ObjectMapper();
		try {

			// convert JSON string to Map
			Map<String, Object> customerOrderReplicaMap = objectMapper
					.readValue(CustomerOrderReplica.getCustomerOrderDetails(), Map.class);

			Object customerOrder = customerOrderReplicaMap.get("customerOrder");
			Map<String, Object> items = (Map<String, Object>) customerOrderReplicaMap.get("items");

			Object quanityList = items.get("quantity");
			Map customers = customerDetailsDao.getByContactNumberAndApartment(CustomerOrderReplica.getContactNumber(),
					CustomerOrderReplica.getApartmentId());

			System.out.println("customers" + customers.get("customerName"));

			// Apartments apartments =
			// apartmentDao.getApartmentById(customerOrderReplica.getApartmentId());
			CustomerOrderReplica.setApartmentName(
					customers.get("apartmentName") != null ? (String) customers.get("apartmentName") : null);

			CustomerOrderReplica.setCustomerDetails(customers);

			CustomerOrderReplica.setCustomerOrder(customerOrder);
			CustomerOrderReplica.setQuatityList(quanityList);

		} catch (Exception e) {
			e.printStackTrace();
		}

		return CustomerOrderReplica;

	}

	@Override
	public Map createCustomerOrderReplica(CustomerOrderReplicaRequest customerOrderReplicaRequest, String contactNumber,
			Integer aparmentId) {

		if (customerOrderReplicaRequest.getRazorPayRequest() != null) {

//			Map razorPay = consumerService.createRazorPayOrder(customerOrderReplicaRequest.getRazorPayRequest());
//			customerOrderReplicaRequest.setOrderId(razorPay.get("order") != null ? (String)((RazorPay) razorPay.get("order")).getId() : null);	
//	
//			createCustomerOrderReplicaService(customerOrderReplicaRequest, contactNumber, aparmentId);
//
//			razorPay.put("cartId", customerOrderReplicaRequest.getCartId());

			Map customerOrderReplicaMap = new HashMap<>();

			Map orderId = new HashMap<>();
			String transactionId = getMerchantTransactionId();
			orderId.put("id", transactionId);

			customerOrderReplicaMap.put("order", orderId);

			customerOrderReplicaRequest.setOrderId(transactionId);
			createCustomerOrderReplicaService(customerOrderReplicaRequest, contactNumber, aparmentId);

			customerOrderReplicaMap.put("cartId", customerOrderReplicaRequest.getCartId());

			try {
				customerOrderReplicaMap.put("phonePeResponse",
						phonepeServiceImpl.initiatePhonepePayment(transactionId,
								Integer.valueOf(customerOrderReplicaRequest.getRazorPayRequest().getAmount()),
								contactNumber, customerOrderReplicaRequest.getRedirectUrl(), customerOrderReplicaRequest.getCallBackUrl()));

			} catch (Exception e) {
				e.printStackTrace();
				customerOrderReplicaMap.put("phonePeResponse", new HashedMap<>());
			}

			return customerOrderReplicaMap;

		} else {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST,
					"paymentDetails transcation Details are mandatory");
		}

	}

	private static String getMerchantTransactionId() {

		return "OD_" + MerchantTransactionIdGenerator.getRandomString();
	}


	@Override
	public List<CustomerOrderReplica> getCustomerOrderByMoblieNo(String contactNumber,Integer aid) {
		
		Schedule latestschedule = customerOrderReplicaDoa.getlatestschedule();
		
		if (latestschedule != null && latestschedule.getCreationTimestamp()!=null) {
			
	        if (latestschedule.getStatus().equals(UserStatus.ACTIVE)) {
	        	
	        	Customers customer = customerDetailsDao.getByContactNoAndApartment(contactNumber, aid);
	        	if (customer != null) { // Ensure the customer exists
	        		List<CustomerOrder> customerOrderList = customerOrderReplicaDoa.getListCustomerOrderByCustomerId(customer.getCtid());
	        		
	                double totalOrderAmount = 0.0;
	       
                if (customerOrderList != null && !customerOrderList.isEmpty() && customerOrderList.add(customerOrder). {
                    for (CustomerOrder customerOrder : customerOrderList) {
                        Double orderAmount = customerOrder.getAmount();
                        if (orderAmount != null) {
                            totalOrderAmount += orderAmount;
                            if(totalOrderAmount>200) {
                            	totalOrderAmount+customerOrder
                            }
                        }
                    }
                    System.out.println("Total Order Amount: " + totalOrderAmount);
                    List<CustomerOrderReplica> customerOrderReplicas = new ArrayList<>();
                    return customerOrderReplicas;
                } else {
                    return Collections.emptyList(); // or return null or an appropriate value
                }
            } else {
              
                return null; // or an appropriate value
            }
        } else {
            // Handle the case when the latest schedule is not active
            return null; // or an appropriate value
        }
    } else {
        // Handle the case when there is no latest schedule or its creation timestamp is null
        return null; // or an appropriate value
    }
	}
}



----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3003)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-09-21 15:03:39.638
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3003)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-09-21 15:03:39.639
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3003)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2023-09-21 15:03:39.785
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.xyram.daydrop.serviceimpl;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.transaction.Transactional;

import org.apache.commons.collections4.map.HashedMap;
import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.server.ResponseStatusException;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.xyram.daydrop.admin.model.CurrentUser;
import com.xyram.daydrop.basemodel.Base64Wrapper;
import com.xyram.daydrop.basemodel.MerchantTransactionIdGenerator;
import com.xyram.daydrop.basemodel.PhonepeSerializer;
import com.xyram.daydrop.dao.ApartmentDao;
import com.xyram.daydrop.dao.CustomerDetailsDao;
import com.xyram.daydrop.dao.CustomerOrderDao;
import com.xyram.daydrop.dao.CustomerOrderReplicaDoa;
import com.xyram.daydrop.dao.SheduleDao;
import com.xyram.daydrop.enumtypes.UserStatus;
import com.xyram.daydrop.model.Apartments;
import com.xyram.daydrop.model.CustomerOrder;
import com.xyram.daydrop.model.CustomerOrderReplica;
import com.xyram.daydrop.model.Customers;
import com.xyram.daydrop.model.Schedule;
import com.xyram.daydrop.modelMapper.PaymentInstrument;
import com.xyram.daydrop.modelMapper.PhonePePayModel;
import com.xyram.daydrop.request.CustomerOrderReplicaRequest;
import com.xyram.daydrop.response.RazorPayRequest;
import com.xyram.daydrop.service.CustomerOrderPriceService;
import com.xyram.daydrop.service.CustomerOrderReplicaService;
import com.xyram.daydrop.util.HashEncoder;
import com.xyram.daydrop.util.RazorPay;
import com.xyram.daydrop.service.ConsumerService;

@Transactional
@Service
public class CustomerOrderReplicaServiceImpl implements CustomerOrderReplicaService {

	@Autowired
	CustomerOrderReplicaDoa customerOrderReplicaDoa;

	@Autowired
	ApartmentDao apartmentDao;

	@Autowired
	SheduleDao scheduleDao;

	@Autowired
	CustomerDetailsDao customerDetailsDao;

	@Autowired
	ConsumerService consumerService;

	@Autowired
	CurrentUser currentUser;

	@Autowired
	PhonepeServiceImpl phonepeServiceImpl;

	@Value("${merchant_id}")
	private String merchantId;

	@Value("${salt_key}")
	private String saltKey;

	@Value("${salt_index}")
	private String saltIndex;

	@Override
	public Map createCustomerOrderReplicaService(CustomerOrderReplicaRequest customerOrderReplicaRequest,
			String contactNumber, Integer aparmentId)

	{

		Map response = new HashedMap<>();

		response.put("message", "success");
		CustomerOrderReplica customerOrderReplica = null;

		if (customerOrderReplicaRequest.getCartId() == null) {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "cartId is mandatory ");
		}
		long razorPayCount = 0;
		if (customerOrderReplicaRequest.getOrderId() != null) {

			razorPayCount = customerOrderReplicaDoa.getRazorPayExistByCartId(customerOrderReplicaRequest.getOrderId());
		}

		if (customerOrderReplicaRequest.getCustomerDetails() == null) {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Order Details  is mandatory ");
		}

		customerOrderReplica = customerOrderReplicaDoa.getCustomerOrderByCartId(customerOrderReplicaRequest.getCartId(),
				contactNumber);

		if (customerOrderReplica != null) {
			customerOrderReplica.setCartId(customerOrderReplica.getCartId());

			if (customerOrderReplica.isOrdered()) {
				throw new ResponseStatusException(HttpStatus.CONFLICT, "Your Order is Placed With cart Details");
			}

//			if (razorPayCount >= 1 && !(customerOrderReplica.getRazorPayOrderId() != null
//					&& customerOrderReplica.getRazorPayOrderId().equals(customerOrderReplicaRequest.getOrderId()))) {
//				throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Razor Pay Id Are already Exist ");
//			}

			customerOrderReplica.setStatusType(customerOrderReplicaRequest.getStatusType());
			customerOrderReplica.setContactNumber(contactNumber);
			customerOrderReplica.setApartmentId(aparmentId);

			customerOrderReplica.setAttempts(customerOrderReplica.getAttempts() + 1);
			customerOrderReplica.setUpdatedTime(new Date());

			customerOrderReplica.setRazorPayOrderId(customerOrderReplicaRequest.getOrderId());

			try {

				JSONObject obj = new JSONObject(customerOrderReplicaRequest.getCustomerDetails());

				customerOrderReplica.setCustomerOrderDetails(obj != null ? obj.toString() : null);

				customerOrderReplicaDoa.updateCustomer(customerOrderReplica);
				return response;

			} catch (Exception e) {
				customerOrderReplica.setCustomerOrderDetails(customerOrderReplicaRequest.getCustomerDetails() != null
						? customerOrderReplicaRequest.getCustomerDetails().toString()
						: null);
				customerOrderReplicaDoa.updateCustomer(customerOrderReplica);
				return response;
			}

		} else {

			customerOrderReplica = new CustomerOrderReplica();
			customerOrderReplica.setContactNumber(contactNumber);
			customerOrderReplica.setApartmentId(aparmentId);
			customerOrderReplica.setCartId(customerOrderReplicaRequest.getCartId());
			customerOrderReplica.setStatusType(customerOrderReplicaRequest.getStatusType());

			if (razorPayCount > 0) {
				throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Razor Pay Id Are already Exist ");
			}

			customerOrderReplica.setRazorPayOrderId(customerOrderReplicaRequest.getOrderId());

			Schedule schedule = scheduleDao.getlatestScheduleCustomers();

			if (schedule != null) {

				try {
					customerOrderReplica.setSchedule(schedule.getsId() != null ? schedule.getsId().toString() : null);
				} catch (Exception e) {
					e.printStackTrace();
				}
			} else {
				throw new ResponseStatusException(HttpStatus.BAD_REQUEST,
						"Sorry We Are Not Accepting Any Order Right now");

			}

			try {

				JSONObject obj = new JSONObject(customerOrderReplicaRequest.getCustomerDetails());

				customerOrderReplica.setCustomerOrderDetails(obj != null ? obj.toString() : null);

				customerOrderReplicaDoa.updateCustomer(customerOrderReplica);
				return response;

			} catch (Exception e) {
				customerOrderReplica.setCustomerOrderDetails(customerOrderReplicaRequest.getCustomerDetails() != null
						? customerOrderReplicaRequest.getCustomerDetails().toString()
						: null);
				customerOrderReplicaDoa.updateCustomer(customerOrderReplica);
				return response;
			}

		}

	}

	@Override
	public List<CustomerOrderReplica> getAllCustomerOrderReplicas(Map<String, Object> request) {

		String statusType = null;
		String searchQuery = null;

		String schedule = null;

		Map filter = request.containsKey("filters") ? (Map) request.get("filters") : null;
		if (filter != null) {
			statusType = filter.containsKey("statusType") ? ((String) filter.get("statusType")).toLowerCase() : null;
			searchQuery = filter.containsKey("searchQuery") ? ((String) filter.get("searchQuery")).toLowerCase() : null;
			schedule = filter.containsKey("schedule") ? (String.valueOf(filter.get("schedule"))) : null;

		}

		List<CustomerOrderReplica> CustomerOrderReplica = customerOrderReplicaDoa
				.getAllcustomerOrderReplica(searchQuery, statusType, schedule);

		ObjectMapper objectMapper = new ObjectMapper();
		CustomerOrderReplica.forEach(customerOrderReplica -> {
			try {

				// convert JSON string to Map
				Map<String, Object> customerOrderReplicaMap = objectMapper
						.readValue(customerOrderReplica.getCustomerOrderDetails(), Map.class);

				Object customerOrder = customerOrderReplicaMap.get("customerOrder");
				Map<String, Object> items = (Map<String, Object>) customerOrderReplicaMap.get("items");

				Object quanityList = items.get("quantity");

				Map customers = customerDetailsDao.getByContactNumberAndApartment(
						customerOrderReplica.getContactNumber(), customerOrderReplica.getApartmentId());

				// Apartments apartments =
				// apartmentDao.getApartmentById(customerOrderReplica.getApartmentId());
				customerOrderReplica.setApartmentName(
						customers.get("apartmentName") != null ? (String) customers.get("apartmentName") : null);

				customerOrderReplica.setStreetName(
						customers.get("streetName") != null ? (String) customers.get("streetName") : null);

				customerOrderReplica.setCustomerDetails(customers);

				customerOrderReplica.setCustomerOrder(customerOrder);
				customerOrderReplica.setQuatityList(quanityList);

			} catch (Exception e) {
				e.printStackTrace();
			}

		});

		return CustomerOrderReplica;

	}

	@Override
	public List<CustomerOrderReplica> getAllCustomerOrderReplicasBySchedule(Map<String, Object> request) {

		String statusType = null;
		String searchQuery = null;

		String scheduleId = null;

		Schedule schedule = scheduleDao.getlatestScheduleCustomers();

		if (schedule != null) {

			try {
				scheduleId = schedule.getsId() != null ? schedule.getsId().toString() : null;
			} catch (Exception e) {
				e.printStackTrace();
			}
		}

		statusType = request.containsKey("statusType") ? ((String) request.get("statusType")).toLowerCase() : "Success";

		List<CustomerOrderReplica> CustomerOrderReplica = customerOrderReplicaDoa
				.getAllcustomerOrderReplicaBySchdeule(statusType, scheduleId);

		ObjectMapper objectMapper = new ObjectMapper();
		CustomerOrderReplica.forEach(customerOrderReplica -> {
			try {

				// convert JSON string to Map
				Map<String, Object> customerOrderReplicaMap = objectMapper
						.readValue(customerOrderReplica.getCustomerOrderDetails(), Map.class);

				Object customerOrder = customerOrderReplicaMap.get("customerOrder");
				Map<String, Object> items = (Map<String, Object>) customerOrderReplicaMap.get("items");

				Object quanityList = items.get("quantity");
				Map customers = customerDetailsDao.getByContactNumberAndApartment(
						customerOrderReplica.getContactNumber(), customerOrderReplica.getApartmentId());

				System.out.println("customers" + customers.get("customerName"));

				// Apartments apartments =
				// apartmentDao.getApartmentById(customerOrderReplica.getApartmentId());
				customerOrderReplica.setApartmentName(
						customers.get("apartmentName") != null ? (String) customers.get("apartmentName") : null);

				customerOrderReplica.setCustomerDetails(customers);

				customerOrderReplica.setCustomerOrder(customerOrder);
				customerOrderReplica.setQuatityList(quanityList);

			} catch (Exception e) {
				e.printStackTrace();
			}

		});

		return CustomerOrderReplica;

	}

	@Override
	public CustomerOrderReplica getCustomerOrderReplicaByCartId(String cartId) {

		CustomerOrderReplica CustomerOrderReplica = customerOrderReplicaDoa.getCustomerOrderByCartId(cartId,
				currentUser.getContactNumber());

		ObjectMapper objectMapper = new ObjectMapper();
		try {

			// convert JSON string to Map
			Map<String, Object> customerOrderReplicaMap = objectMapper
					.readValue(CustomerOrderReplica.getCustomerOrderDetails(), Map.class);

			Object customerOrder = customerOrderReplicaMap.get("customerOrder");
			Map<String, Object> items = (Map<String, Object>) customerOrderReplicaMap.get("items");

			Object quanityList = items.get("quantity");
			Map customers = customerDetailsDao.getByContactNumberAndApartment(CustomerOrderReplica.getContactNumber(),
					CustomerOrderReplica.getApartmentId());

			System.out.println("customers" + customers.get("customerName"));

			// Apartments apartments =
			// apartmentDao.getApartmentById(customerOrderReplica.getApartmentId());
			CustomerOrderReplica.setApartmentName(
					customers.get("apartmentName") != null ? (String) customers.get("apartmentName") : null);

			CustomerOrderReplica.setCustomerDetails(customers);

			CustomerOrderReplica.setCustomerOrder(customerOrder);
			CustomerOrderReplica.setQuatityList(quanityList);

		} catch (Exception e) {
			e.printStackTrace();
		}

		return CustomerOrderReplica;

	}

	@Override
	public Map createCustomerOrderReplica(CustomerOrderReplicaRequest customerOrderReplicaRequest, String contactNumber,
			Integer aparmentId) {

		if (customerOrderReplicaRequest.getRazorPayRequest() != null) {

//			Map razorPay = consumerService.createRazorPayOrder(customerOrderReplicaRequest.getRazorPayRequest());
//			customerOrderReplicaRequest.setOrderId(razorPay.get("order") != null ? (String)((RazorPay) razorPay.get("order")).getId() : null);	
//	
//			createCustomerOrderReplicaService(customerOrderReplicaRequest, contactNumber, aparmentId);
//
//			razorPay.put("cartId", customerOrderReplicaRequest.getCartId());

			Map customerOrderReplicaMap = new HashMap<>();

			Map orderId = new HashMap<>();
			String transactionId = getMerchantTransactionId();
			orderId.put("id", transactionId);

			customerOrderReplicaMap.put("order", orderId);

			customerOrderReplicaRequest.setOrderId(transactionId);
			createCustomerOrderReplicaService(customerOrderReplicaRequest, contactNumber, aparmentId);

			customerOrderReplicaMap.put("cartId", customerOrderReplicaRequest.getCartId());

			try {
				customerOrderReplicaMap.put("phonePeResponse",
						phonepeServiceImpl.initiatePhonepePayment(transactionId,
								Integer.valueOf(customerOrderReplicaRequest.getRazorPayRequest().getAmount()),
								contactNumber, customerOrderReplicaRequest.getRedirectUrl(), customerOrderReplicaRequest.getCallBackUrl()));

			} catch (Exception e) {
				e.printStackTrace();
				customerOrderReplicaMap.put("phonePeResponse", new HashedMap<>());
			}

			return customerOrderReplicaMap;

		} else {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST,
					"paymentDetails transcation Details are mandatory");
		}

	}

	private static String getMerchantTransactionId() {

		return "OD_" + MerchantTransactionIdGenerator.getRandomString();
	}


	@Override
	public List<CustomerOrderReplica> getCustomerOrderByMoblieNo(String contactNumber,Integer aid) {
		
		Schedule latestschedule = customerOrderReplicaDoa.getlatestschedule();
		
		if (latestschedule != null && latestschedule.getCreationTimestamp()!=null) {
			
	        if (latestschedule.getStatus().equals(UserStatus.ACTIVE)) {
	        	
	        	Customers customer = customerDetailsDao.getByContactNoAndApartment(contactNumber, aid);
	        	if (customer != null) { // Ensure the customer exists
	        		List<CustomerOrder> customerOrderList = customerOrderReplicaDoa.getListCustomerOrderByCustomerId(customer.getCtid());
	        		
	                double totalOrderAmount = 0.0;
	       
                if (customerOrderList != null && !customerOrderList.isEmpty() && customerOrderList.add(customerOrder). {
                    for (CustomerOrder customerOrder : customerOrderList) {
                        Double orderAmount = customerOrder.getAmount();
                        if (orderAmount != null) {
                            totalOrderAmount += orderAmount;
                            if(totalOrderAmount>200) {
                            	totalOrderAmount+customerOrder
                            }
                        }
                    }
                    System.out.println("Total Order Amount: " + totalOrderAmount);
                    List<CustomerOrderReplica> customerOrderReplicas = new ArrayList<>();
                    return customerOrderReplicas;
                } else {
                    return Collections.emptyList(); // or return null or an appropriate value
                }
            } else {
              
                return null; // or an appropriate value
            }
        } else {
            // Handle the case when the latest schedule is not active
            return null; // or an appropriate value
        }
    } else {
        // Handle the case when there is no latest schedule or its creation timestamp is null
        return null; // or an appropriate value
    }
	}
}



----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3003)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1003)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:799)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:743)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.lambda$0(LSJavaHoverProvider.java:68)
	at java.base/java.util.concurrent.CompletableFuture$AsyncRun.run(CompletableFuture.java:1804)
	at java.base/java.util.concurrent.CompletableFuture$AsyncRun.exec(CompletableFuture.java:1796)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:373)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1182)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1655)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1622)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:165)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-09-21 15:03:39.787
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3003)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1003)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:799)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:743)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.lambda$0(LSJavaHoverProvider.java:68)
	at java.base/java.util.concurrent.CompletableFuture$AsyncRun.run(CompletableFuture.java:1804)
	at java.base/java.util.concurrent.CompletableFuture$AsyncRun.exec(CompletableFuture.java:1796)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:373)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1182)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1655)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1622)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:165)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-09-21 15:03:39.789
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3003)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1003)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:799)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:743)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.lambda$0(LSJavaHoverProvider.java:68)
	at java.base/java.util.concurrent.CompletableFuture$AsyncRun.run(CompletableFuture.java:1804)
	at java.base/java.util.concurrent.CompletableFuture$AsyncRun.exec(CompletableFuture.java:1796)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:373)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1182)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1655)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1622)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:165)

!ENTRY org.eclipse.jdt.core 4 4 2023-09-21 15:03:39.852
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.xyram.daydrop.serviceimpl;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.transaction.Transactional;

import org.apache.commons.collections4.map.HashedMap;
import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.server.ResponseStatusException;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.xyram.daydrop.admin.model.CurrentUser;
import com.xyram.daydrop.basemodel.Base64Wrapper;
import com.xyram.daydrop.basemodel.MerchantTransactionIdGenerator;
import com.xyram.daydrop.basemodel.PhonepeSerializer;
import com.xyram.daydrop.dao.ApartmentDao;
import com.xyram.daydrop.dao.CustomerDetailsDao;
import com.xyram.daydrop.dao.CustomerOrderDao;
import com.xyram.daydrop.dao.CustomerOrderReplicaDoa;
import com.xyram.daydrop.dao.SheduleDao;
import com.xyram.daydrop.enumtypes.UserStatus;
import com.xyram.daydrop.model.Apartments;
import com.xyram.daydrop.model.CustomerOrder;
import com.xyram.daydrop.model.CustomerOrderReplica;
import com.xyram.daydrop.model.Customers;
import com.xyram.daydrop.model.Schedule;
import com.xyram.daydrop.modelMapper.PaymentInstrument;
import com.xyram.daydrop.modelMapper.PhonePePayModel;
import com.xyram.daydrop.request.CustomerOrderReplicaRequest;
import com.xyram.daydrop.response.RazorPayRequest;
import com.xyram.daydrop.service.CustomerOrderPriceService;
import com.xyram.daydrop.service.CustomerOrderReplicaService;
import com.xyram.daydrop.util.HashEncoder;
import com.xyram.daydrop.util.RazorPay;
import com.xyram.daydrop.service.ConsumerService;

@Transactional
@Service
public class CustomerOrderReplicaServiceImpl implements CustomerOrderReplicaService {

	@Autowired
	CustomerOrderReplicaDoa customerOrderReplicaDoa;

	@Autowired
	ApartmentDao apartmentDao;

	@Autowired
	SheduleDao scheduleDao;

	@Autowired
	CustomerDetailsDao customerDetailsDao;

	@Autowired
	ConsumerService consumerService;

	@Autowired
	CurrentUser currentUser;

	@Autowired
	PhonepeServiceImpl phonepeServiceImpl;

	@Value("${merchant_id}")
	private String merchantId;

	@Value("${salt_key}")
	private String saltKey;

	@Value("${salt_index}")
	private String saltIndex;

	@Override
	public Map createCustomerOrderReplicaService(CustomerOrderReplicaRequest customerOrderReplicaRequest,
			String contactNumber, Integer aparmentId)

	{

		Map response = new HashedMap<>();

		response.put("message", "success");
		CustomerOrderReplica customerOrderReplica = null;

		if (customerOrderReplicaRequest.getCartId() == null) {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "cartId is mandatory ");
		}
		long razorPayCount = 0;
		if (customerOrderReplicaRequest.getOrderId() != null) {

			razorPayCount = customerOrderReplicaDoa.getRazorPayExistByCartId(customerOrderReplicaRequest.getOrderId());
		}

		if (customerOrderReplicaRequest.getCustomerDetails() == null) {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Order Details  is mandatory ");
		}

		customerOrderReplica = customerOrderReplicaDoa.getCustomerOrderByCartId(customerOrderReplicaRequest.getCartId(),
				contactNumber);

		if (customerOrderReplica != null) {
			customerOrderReplica.setCartId(customerOrderReplica.getCartId());

			if (customerOrderReplica.isOrdered()) {
				throw new ResponseStatusException(HttpStatus.CONFLICT, "Your Order is Placed With cart Details");
			}

//			if (razorPayCount >= 1 && !(customerOrderReplica.getRazorPayOrderId() != null
//					&& customerOrderReplica.getRazorPayOrderId().equals(customerOrderReplicaRequest.getOrderId()))) {
//				throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Razor Pay Id Are already Exist ");
//			}

			customerOrderReplica.setStatusType(customerOrderReplicaRequest.getStatusType());
			customerOrderReplica.setContactNumber(contactNumber);
			customerOrderReplica.setApartmentId(aparmentId);

			customerOrderReplica.setAttempts(customerOrderReplica.getAttempts() + 1);
			customerOrderReplica.setUpdatedTime(new Date());

			customerOrderReplica.setRazorPayOrderId(customerOrderReplicaRequest.getOrderId());

			try {

				JSONObject obj = new JSONObject(customerOrderReplicaRequest.getCustomerDetails());

				customerOrderReplica.setCustomerOrderDetails(obj != null ? obj.toString() : null);

				customerOrderReplicaDoa.updateCustomer(customerOrderReplica);
				return response;

			} catch (Exception e) {
				customerOrderReplica.setCustomerOrderDetails(customerOrderReplicaRequest.getCustomerDetails() != null
						? customerOrderReplicaRequest.getCustomerDetails().toString()
						: null);
				customerOrderReplicaDoa.updateCustomer(customerOrderReplica);
				return response;
			}

		} else {

			customerOrderReplica = new CustomerOrderReplica();
			customerOrderReplica.setContactNumber(contactNumber);
			customerOrderReplica.setApartmentId(aparmentId);
			customerOrderReplica.setCartId(customerOrderReplicaRequest.getCartId());
			customerOrderReplica.setStatusType(customerOrderReplicaRequest.getStatusType());

			if (razorPayCount > 0) {
				throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Razor Pay Id Are already Exist ");
			}

			customerOrderReplica.setRazorPayOrderId(customerOrderReplicaRequest.getOrderId());

			Schedule schedule = scheduleDao.getlatestScheduleCustomers();

			if (schedule != null) {

				try {
					customerOrderReplica.setSchedule(schedule.getsId() != null ? schedule.getsId().toString() : null);
				} catch (Exception e) {
					e.printStackTrace();
				}
			} else {
				throw new ResponseStatusException(HttpStatus.BAD_REQUEST,
						"Sorry We Are Not Accepting Any Order Right now");

			}

			try {

				JSONObject obj = new JSONObject(customerOrderReplicaRequest.getCustomerDetails());

				customerOrderReplica.setCustomerOrderDetails(obj != null ? obj.toString() : null);

				customerOrderReplicaDoa.updateCustomer(customerOrderReplica);
				return response;

			} catch (Exception e) {
				customerOrderReplica.setCustomerOrderDetails(customerOrderReplicaRequest.getCustomerDetails() != null
						? customerOrderReplicaRequest.getCustomerDetails().toString()
						: null);
				customerOrderReplicaDoa.updateCustomer(customerOrderReplica);
				return response;
			}

		}

	}

	@Override
	public List<CustomerOrderReplica> getAllCustomerOrderReplicas(Map<String, Object> request) {

		String statusType = null;
		String searchQuery = null;

		String schedule = null;

		Map filter = request.containsKey("filters") ? (Map) request.get("filters") : null;
		if (filter != null) {
			statusType = filter.containsKey("statusType") ? ((String) filter.get("statusType")).toLowerCase() : null;
			searchQuery = filter.containsKey("searchQuery") ? ((String) filter.get("searchQuery")).toLowerCase() : null;
			schedule = filter.containsKey("schedule") ? (String.valueOf(filter.get("schedule"))) : null;

		}

		List<CustomerOrderReplica> CustomerOrderReplica = customerOrderReplicaDoa
				.getAllcustomerOrderReplica(searchQuery, statusType, schedule);

		ObjectMapper objectMapper = new ObjectMapper();
		CustomerOrderReplica.forEach(customerOrderReplica -> {
			try {

				// convert JSON string to Map
				Map<String, Object> customerOrderReplicaMap = objectMapper
						.readValue(customerOrderReplica.getCustomerOrderDetails(), Map.class);

				Object customerOrder = customerOrderReplicaMap.get("customerOrder");
				Map<String, Object> items = (Map<String, Object>) customerOrderReplicaMap.get("items");

				Object quanityList = items.get("quantity");

				Map customers = customerDetailsDao.getByContactNumberAndApartment(
						customerOrderReplica.getContactNumber(), customerOrderReplica.getApartmentId());

				// Apartments apartments =
				// apartmentDao.getApartmentById(customerOrderReplica.getApartmentId());
				customerOrderReplica.setApartmentName(
						customers.get("apartmentName") != null ? (String) customers.get("apartmentName") : null);

				customerOrderReplica.setStreetName(
						customers.get("streetName") != null ? (String) customers.get("streetName") : null);

				customerOrderReplica.setCustomerDetails(customers);

				customerOrderReplica.setCustomerOrder(customerOrder);
				customerOrderReplica.setQuatityList(quanityList);

			} catch (Exception e) {
				e.printStackTrace();
			}

		});

		return CustomerOrderReplica;

	}

	@Override
	public List<CustomerOrderReplica> getAllCustomerOrderReplicasBySchedule(Map<String, Object> request) {

		String statusType = null;
		String searchQuery = null;

		String scheduleId = null;

		Schedule schedule = scheduleDao.getlatestScheduleCustomers();

		if (schedule != null) {

			try {
				scheduleId = schedule.getsId() != null ? schedule.getsId().toString() : null;
			} catch (Exception e) {
				e.printStackTrace();
			}
		}

		statusType = request.containsKey("statusType") ? ((String) request.get("statusType")).toLowerCase() : "Success";

		List<CustomerOrderReplica> CustomerOrderReplica = customerOrderReplicaDoa
				.getAllcustomerOrderReplicaBySchdeule(statusType, scheduleId);

		ObjectMapper objectMapper = new ObjectMapper();
		CustomerOrderReplica.forEach(customerOrderReplica -> {
			try {

				// convert JSON string to Map
				Map<String, Object> customerOrderReplicaMap = objectMapper
						.readValue(customerOrderReplica.getCustomerOrderDetails(), Map.class);

				Object customerOrder = customerOrderReplicaMap.get("customerOrder");
				Map<String, Object> items = (Map<String, Object>) customerOrderReplicaMap.get("items");

				Object quanityList = items.get("quantity");
				Map customers = customerDetailsDao.getByContactNumberAndApartment(
						customerOrderReplica.getContactNumber(), customerOrderReplica.getApartmentId());

				System.out.println("customers" + customers.get("customerName"));

				// Apartments apartments =
				// apartmentDao.getApartmentById(customerOrderReplica.getApartmentId());
				customerOrderReplica.setApartmentName(
						customers.get("apartmentName") != null ? (String) customers.get("apartmentName") : null);

				customerOrderReplica.setCustomerDetails(customers);

				customerOrderReplica.setCustomerOrder(customerOrder);
				customerOrderReplica.setQuatityList(quanityList);

			} catch (Exception e) {
				e.printStackTrace();
			}

		});

		return CustomerOrderReplica;

	}

	@Override
	public CustomerOrderReplica getCustomerOrderReplicaByCartId(String cartId) {

		CustomerOrderReplica CustomerOrderReplica = customerOrderReplicaDoa.getCustomerOrderByCartId(cartId,
				currentUser.getContactNumber());

		ObjectMapper objectMapper = new ObjectMapper();
		try {

			// convert JSON string to Map
			Map<String, Object> customerOrderReplicaMap = objectMapper
					.readValue(CustomerOrderReplica.getCustomerOrderDetails(), Map.class);

			Object customerOrder = customerOrderReplicaMap.get("customerOrder");
			Map<String, Object> items = (Map<String, Object>) customerOrderReplicaMap.get("items");

			Object quanityList = items.get("quantity");
			Map customers = customerDetailsDao.getByContactNumberAndApartment(CustomerOrderReplica.getContactNumber(),
					CustomerOrderReplica.getApartmentId());

			System.out.println("customers" + customers.get("customerName"));

			// Apartments apartments =
			// apartmentDao.getApartmentById(customerOrderReplica.getApartmentId());
			CustomerOrderReplica.setApartmentName(
					customers.get("apartmentName") != null ? (String) customers.get("apartmentName") : null);

			CustomerOrderReplica.setCustomerDetails(customers);

			CustomerOrderReplica.setCustomerOrder(customerOrder);
			CustomerOrderReplica.setQuatityList(quanityList);

		} catch (Exception e) {
			e.printStackTrace();
		}

		return CustomerOrderReplica;

	}

	@Override
	public Map createCustomerOrderReplica(CustomerOrderReplicaRequest customerOrderReplicaRequest, String contactNumber,
			Integer aparmentId) {

		if (customerOrderReplicaRequest.getRazorPayRequest() != null) {

//			Map razorPay = consumerService.createRazorPayOrder(customerOrderReplicaRequest.getRazorPayRequest());
//			customerOrderReplicaRequest.setOrderId(razorPay.get("order") != null ? (String)((RazorPay) razorPay.get("order")).getId() : null);	
//	
//			createCustomerOrderReplicaService(customerOrderReplicaRequest, contactNumber, aparmentId);
//
//			razorPay.put("cartId", customerOrderReplicaRequest.getCartId());

			Map customerOrderReplicaMap = new HashMap<>();

			Map orderId = new HashMap<>();
			String transactionId = getMerchantTransactionId();
			orderId.put("id", transactionId);

			customerOrderReplicaMap.put("order", orderId);

			customerOrderReplicaRequest.setOrderId(transactionId);
			createCustomerOrderReplicaService(customerOrderReplicaRequest, contactNumber, aparmentId);

			customerOrderReplicaMap.put("cartId", customerOrderReplicaRequest.getCartId());

			try {
				customerOrderReplicaMap.put("phonePeResponse",
						phonepeServiceImpl.initiatePhonepePayment(transactionId,
								Integer.valueOf(customerOrderReplicaRequest.getRazorPayRequest().getAmount()),
								contactNumber, customerOrderReplicaRequest.getRedirectUrl(), customerOrderReplicaRequest.getCallBackUrl()));

			} catch (Exception e) {
				e.printStackTrace();
				customerOrderReplicaMap.put("phonePeResponse", new HashedMap<>());
			}

			return customerOrderReplicaMap;

		} else {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST,
					"paymentDetails transcation Details are mandatory");
		}

	}

	private static String getMerchantTransactionId() {

		return "OD_" + MerchantTransactionIdGenerator.getRandomString();
	}


	@Override
	public List<CustomerOrderReplica> getCustomerOrderByMoblieNo(String contactNumber,Integer aid) {
		
		Schedule latestschedule = customerOrderReplicaDoa.getlatestschedule();
		
		if (latestschedule != null && latestschedule.getCreationTimestamp()!=null) {
			
	        if (latestschedule.getStatus().equals(UserStatus.ACTIVE)) {
	        	
	        	Customers customer = customerDetailsDao.getByContactNoAndApartment(contactNumber, aid);
	        	if (customer != null) { // Ensure the customer exists
	        		List<CustomerOrder> customerOrderList = customerOrderReplicaDoa.getListCustomerOrderByCustomerId(customer.getCtid());
	        		
	                double totalOrderAmount = 0.0;
	       
                if (customerOrderList != null && !customerOrderList.isEmpty() && customerOrderList.add(customerOrder). {
                    for (CustomerOrder customerOrder : customerOrderList) {
                        Double orderAmount = customerOrder.getAmount();
                        if (orderAmount != null) {
                            totalOrderAmount += orderAmount;
                            if(totalOrderAmount>200) {
                            	totalOrderAmount+customerOrder
                            }
                        }
                    }
                    System.out.println("Total Order Amount: " + totalOrderAmount);
                    List<CustomerOrderReplica> customerOrderReplicas = new ArrayList<>();
                    return customerOrderReplicas;
                } else {
                    return Collections.emptyList(); // or return null or an appropriate value
                }
            } else {
              
                return null; // or an appropriate value
            }
        } else {
            // Handle the case when the latest schedule is not active
            return null; // or an appropriate value
        }
    } else {
        // Handle the case when there is no latest schedule or its creation timestamp is null
        return null; // or an appropriate value
    }
	}
}



----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3003)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-09-21 15:03:39.853
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3003)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-09-21 15:03:39.854
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3003)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2023-09-21 15:03:39.916
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.xyram.daydrop.serviceimpl;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.transaction.Transactional;

import org.apache.commons.collections4.map.HashedMap;
import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.server.ResponseStatusException;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.xyram.daydrop.admin.model.CurrentUser;
import com.xyram.daydrop.basemodel.Base64Wrapper;
import com.xyram.daydrop.basemodel.MerchantTransactionIdGenerator;
import com.xyram.daydrop.basemodel.PhonepeSerializer;
import com.xyram.daydrop.dao.ApartmentDao;
import com.xyram.daydrop.dao.CustomerDetailsDao;
import com.xyram.daydrop.dao.CustomerOrderDao;
import com.xyram.daydrop.dao.CustomerOrderReplicaDoa;
import com.xyram.daydrop.dao.SheduleDao;
import com.xyram.daydrop.enumtypes.UserStatus;
import com.xyram.daydrop.model.Apartments;
import com.xyram.daydrop.model.CustomerOrder;
import com.xyram.daydrop.model.CustomerOrderReplica;
import com.xyram.daydrop.model.Customers;
import com.xyram.daydrop.model.Schedule;
import com.xyram.daydrop.modelMapper.PaymentInstrument;
import com.xyram.daydrop.modelMapper.PhonePePayModel;
import com.xyram.daydrop.request.CustomerOrderReplicaRequest;
import com.xyram.daydrop.response.RazorPayRequest;
import com.xyram.daydrop.service.CustomerOrderPriceService;
import com.xyram.daydrop.service.CustomerOrderReplicaService;
import com.xyram.daydrop.util.HashEncoder;
import com.xyram.daydrop.util.RazorPay;
import com.xyram.daydrop.service.ConsumerService;

@Transactional
@Service
public class CustomerOrderReplicaServiceImpl implements CustomerOrderReplicaService {

	@Autowired
	CustomerOrderReplicaDoa customerOrderReplicaDoa;

	@Autowired
	ApartmentDao apartmentDao;

	@Autowired
	SheduleDao scheduleDao;

	@Autowired
	CustomerDetailsDao customerDetailsDao;

	@Autowired
	ConsumerService consumerService;

	@Autowired
	CurrentUser currentUser;

	@Autowired
	PhonepeServiceImpl phonepeServiceImpl;

	@Value("${merchant_id}")
	private String merchantId;

	@Value("${salt_key}")
	private String saltKey;

	@Value("${salt_index}")
	private String saltIndex;

	@Override
	public Map createCustomerOrderReplicaService(CustomerOrderReplicaRequest customerOrderReplicaRequest,
			String contactNumber, Integer aparmentId)

	{

		Map response = new HashedMap<>();

		response.put("message", "success");
		CustomerOrderReplica customerOrderReplica = null;

		if (customerOrderReplicaRequest.getCartId() == null) {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "cartId is mandatory ");
		}
		long razorPayCount = 0;
		if (customerOrderReplicaRequest.getOrderId() != null) {

			razorPayCount = customerOrderReplicaDoa.getRazorPayExistByCartId(customerOrderReplicaRequest.getOrderId());
		}

		if (customerOrderReplicaRequest.getCustomerDetails() == null) {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Order Details  is mandatory ");
		}

		customerOrderReplica = customerOrderReplicaDoa.getCustomerOrderByCartId(customerOrderReplicaRequest.getCartId(),
				contactNumber);

		if (customerOrderReplica != null) {
			customerOrderReplica.setCartId(customerOrderReplica.getCartId());

			if (customerOrderReplica.isOrdered()) {
				throw new ResponseStatusException(HttpStatus.CONFLICT, "Your Order is Placed With cart Details");
			}

//			if (razorPayCount >= 1 && !(customerOrderReplica.getRazorPayOrderId() != null
//					&& customerOrderReplica.getRazorPayOrderId().equals(customerOrderReplicaRequest.getOrderId()))) {
//				throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Razor Pay Id Are already Exist ");
//			}

			customerOrderReplica.setStatusType(customerOrderReplicaRequest.getStatusType());
			customerOrderReplica.setContactNumber(contactNumber);
			customerOrderReplica.setApartmentId(aparmentId);

			customerOrderReplica.setAttempts(customerOrderReplica.getAttempts() + 1);
			customerOrderReplica.setUpdatedTime(new Date());

			customerOrderReplica.setRazorPayOrderId(customerOrderReplicaRequest.getOrderId());

			try {

				JSONObject obj = new JSONObject(customerOrderReplicaRequest.getCustomerDetails());

				customerOrderReplica.setCustomerOrderDetails(obj != null ? obj.toString() : null);

				customerOrderReplicaDoa.updateCustomer(customerOrderReplica);
				return response;

			} catch (Exception e) {
				customerOrderReplica.setCustomerOrderDetails(customerOrderReplicaRequest.getCustomerDetails() != null
						? customerOrderReplicaRequest.getCustomerDetails().toString()
						: null);
				customerOrderReplicaDoa.updateCustomer(customerOrderReplica);
				return response;
			}

		} else {

			customerOrderReplica = new CustomerOrderReplica();
			customerOrderReplica.setContactNumber(contactNumber);
			customerOrderReplica.setApartmentId(aparmentId);
			customerOrderReplica.setCartId(customerOrderReplicaRequest.getCartId());
			customerOrderReplica.setStatusType(customerOrderReplicaRequest.getStatusType());

			if (razorPayCount > 0) {
				throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Razor Pay Id Are already Exist ");
			}

			customerOrderReplica.setRazorPayOrderId(customerOrderReplicaRequest.getOrderId());

			Schedule schedule = scheduleDao.getlatestScheduleCustomers();

			if (schedule != null) {

				try {
					customerOrderReplica.setSchedule(schedule.getsId() != null ? schedule.getsId().toString() : null);
				} catch (Exception e) {
					e.printStackTrace();
				}
			} else {
				throw new ResponseStatusException(HttpStatus.BAD_REQUEST,
						"Sorry We Are Not Accepting Any Order Right now");

			}

			try {

				JSONObject obj = new JSONObject(customerOrderReplicaRequest.getCustomerDetails());

				customerOrderReplica.setCustomerOrderDetails(obj != null ? obj.toString() : null);

				customerOrderReplicaDoa.updateCustomer(customerOrderReplica);
				return response;

			} catch (Exception e) {
				customerOrderReplica.setCustomerOrderDetails(customerOrderReplicaRequest.getCustomerDetails() != null
						? customerOrderReplicaRequest.getCustomerDetails().toString()
						: null);
				customerOrderReplicaDoa.updateCustomer(customerOrderReplica);
				return response;
			}

		}

	}

	@Override
	public List<CustomerOrderReplica> getAllCustomerOrderReplicas(Map<String, Object> request) {

		String statusType = null;
		String searchQuery = null;

		String schedule = null;

		Map filter = request.containsKey("filters") ? (Map) request.get("filters") : null;
		if (filter != null) {
			statusType = filter.containsKey("statusType") ? ((String) filter.get("statusType")).toLowerCase() : null;
			searchQuery = filter.containsKey("searchQuery") ? ((String) filter.get("searchQuery")).toLowerCase() : null;
			schedule = filter.containsKey("schedule") ? (String.valueOf(filter.get("schedule"))) : null;

		}

		List<CustomerOrderReplica> CustomerOrderReplica = customerOrderReplicaDoa
				.getAllcustomerOrderReplica(searchQuery, statusType, schedule);

		ObjectMapper objectMapper = new ObjectMapper();
		CustomerOrderReplica.forEach(customerOrderReplica -> {
			try {

				// convert JSON string to Map
				Map<String, Object> customerOrderReplicaMap = objectMapper
						.readValue(customerOrderReplica.getCustomerOrderDetails(), Map.class);

				Object customerOrder = customerOrderReplicaMap.get("customerOrder");
				Map<String, Object> items = (Map<String, Object>) customerOrderReplicaMap.get("items");

				Object quanityList = items.get("quantity");

				Map customers = customerDetailsDao.getByContactNumberAndApartment(
						customerOrderReplica.getContactNumber(), customerOrderReplica.getApartmentId());

				// Apartments apartments =
				// apartmentDao.getApartmentById(customerOrderReplica.getApartmentId());
				customerOrderReplica.setApartmentName(
						customers.get("apartmentName") != null ? (String) customers.get("apartmentName") : null);

				customerOrderReplica.setStreetName(
						customers.get("streetName") != null ? (String) customers.get("streetName") : null);

				customerOrderReplica.setCustomerDetails(customers);

				customerOrderReplica.setCustomerOrder(customerOrder);
				customerOrderReplica.setQuatityList(quanityList);

			} catch (Exception e) {
				e.printStackTrace();
			}

		});

		return CustomerOrderReplica;

	}

	@Override
	public List<CustomerOrderReplica> getAllCustomerOrderReplicasBySchedule(Map<String, Object> request) {

		String statusType = null;
		String searchQuery = null;

		String scheduleId = null;

		Schedule schedule = scheduleDao.getlatestScheduleCustomers();

		if (schedule != null) {

			try {
				scheduleId = schedule.getsId() != null ? schedule.getsId().toString() : null;
			} catch (Exception e) {
				e.printStackTrace();
			}
		}

		statusType = request.containsKey("statusType") ? ((String) request.get("statusType")).toLowerCase() : "Success";

		List<CustomerOrderReplica> CustomerOrderReplica = customerOrderReplicaDoa
				.getAllcustomerOrderReplicaBySchdeule(statusType, scheduleId);

		ObjectMapper objectMapper = new ObjectMapper();
		CustomerOrderReplica.forEach(customerOrderReplica -> {
			try {

				// convert JSON string to Map
				Map<String, Object> customerOrderReplicaMap = objectMapper
						.readValue(customerOrderReplica.getCustomerOrderDetails(), Map.class);

				Object customerOrder = customerOrderReplicaMap.get("customerOrder");
				Map<String, Object> items = (Map<String, Object>) customerOrderReplicaMap.get("items");

				Object quanityList = items.get("quantity");
				Map customers = customerDetailsDao.getByContactNumberAndApartment(
						customerOrderReplica.getContactNumber(), customerOrderReplica.getApartmentId());

				System.out.println("customers" + customers.get("customerName"));

				// Apartments apartments =
				// apartmentDao.getApartmentById(customerOrderReplica.getApartmentId());
				customerOrderReplica.setApartmentName(
						customers.get("apartmentName") != null ? (String) customers.get("apartmentName") : null);

				customerOrderReplica.setCustomerDetails(customers);

				customerOrderReplica.setCustomerOrder(customerOrder);
				customerOrderReplica.setQuatityList(quanityList);

			} catch (Exception e) {
				e.printStackTrace();
			}

		});

		return CustomerOrderReplica;

	}

	@Override
	public CustomerOrderReplica getCustomerOrderReplicaByCartId(String cartId) {

		CustomerOrderReplica CustomerOrderReplica = customerOrderReplicaDoa.getCustomerOrderByCartId(cartId,
				currentUser.getContactNumber());

		ObjectMapper objectMapper = new ObjectMapper();
		try {

			// convert JSON string to Map
			Map<String, Object> customerOrderReplicaMap = objectMapper
					.readValue(CustomerOrderReplica.getCustomerOrderDetails(), Map.class);

			Object customerOrder = customerOrderReplicaMap.get("customerOrder");
			Map<String, Object> items = (Map<String, Object>) customerOrderReplicaMap.get("items");

			Object quanityList = items.get("quantity");
			Map customers = customerDetailsDao.getByContactNumberAndApartment(CustomerOrderReplica.getContactNumber(),
					CustomerOrderReplica.getApartmentId());

			System.out.println("customers" + customers.get("customerName"));

			// Apartments apartments =
			// apartmentDao.getApartmentById(customerOrderReplica.getApartmentId());
			CustomerOrderReplica.setApartmentName(
					customers.get("apartmentName") != null ? (String) customers.get("apartmentName") : null);

			CustomerOrderReplica.setCustomerDetails(customers);

			CustomerOrderReplica.setCustomerOrder(customerOrder);
			CustomerOrderReplica.setQuatityList(quanityList);

		} catch (Exception e) {
			e.printStackTrace();
		}

		return CustomerOrderReplica;

	}

	@Override
	public Map createCustomerOrderReplica(CustomerOrderReplicaRequest customerOrderReplicaRequest, String contactNumber,
			Integer aparmentId) {

		if (customerOrderReplicaRequest.getRazorPayRequest() != null) {

//			Map razorPay = consumerService.createRazorPayOrder(customerOrderReplicaRequest.getRazorPayRequest());
//			customerOrderReplicaRequest.setOrderId(razorPay.get("order") != null ? (String)((RazorPay) razorPay.get("order")).getId() : null);	
//	
//			createCustomerOrderReplicaService(customerOrderReplicaRequest, contactNumber, aparmentId);
//
//			razorPay.put("cartId", customerOrderReplicaRequest.getCartId());

			Map customerOrderReplicaMap = new HashMap<>();

			Map orderId = new HashMap<>();
			String transactionId = getMerchantTransactionId();
			orderId.put("id", transactionId);

			customerOrderReplicaMap.put("order", orderId);

			customerOrderReplicaRequest.setOrderId(transactionId);
			createCustomerOrderReplicaService(customerOrderReplicaRequest, contactNumber, aparmentId);

			customerOrderReplicaMap.put("cartId", customerOrderReplicaRequest.getCartId());

			try {
				customerOrderReplicaMap.put("phonePeResponse",
						phonepeServiceImpl.initiatePhonepePayment(transactionId,
								Integer.valueOf(customerOrderReplicaRequest.getRazorPayRequest().getAmount()),
								contactNumber, customerOrderReplicaRequest.getRedirectUrl(), customerOrderReplicaRequest.getCallBackUrl()));

			} catch (Exception e) {
				e.printStackTrace();
				customerOrderReplicaMap.put("phonePeResponse", new HashedMap<>());
			}

			return customerOrderReplicaMap;

		} else {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST,
					"paymentDetails transcation Details are mandatory");
		}

	}

	private static String getMerchantTransactionId() {

		return "OD_" + MerchantTransactionIdGenerator.getRandomString();
	}


	@Override
	public List<CustomerOrderReplica> getCustomerOrderByMoblieNo(String contactNumber,Integer aid) {
		
		Schedule latestschedule = customerOrderReplicaDoa.getlatestschedule();
		
		if (latestschedule != null && latestschedule.getCreationTimestamp()!=null) {
			
	        if (latestschedule.getStatus().equals(UserStatus.ACTIVE)) {
	        	
	        	Customers customer = customerDetailsDao.getByContactNoAndApartment(contactNumber, aid);
	        	if (customer != null) { // Ensure the customer exists
	        		List<CustomerOrder> customerOrderList = customerOrderReplicaDoa.getListCustomerOrderByCustomerId(customer.getCtid());
	        		
	                double totalOrderAmount = 0.0;
	       
                if (customerOrderList != null && !customerOrderList.isEmpty() && customerOrderList.add(customerOrder). {
                    for (CustomerOrder customerOrder : customerOrderList) {
                        Double orderAmount = customerOrder.getAmount();
                        if (orderAmount != null) {
                            totalOrderAmount += orderAmount;
                            if(totalOrderAmount>200) {
                            	totalOrderAmount+customerOrder
                            }
                        }
                    }
                    System.out.println("Total Order Amount: " + totalOrderAmount);
                    List<CustomerOrderReplica> customerOrderReplicas = new ArrayList<>();
                    return customerOrderReplicas;
                } else {
                    return Collections.emptyList(); // or return null or an appropriate value
                }
            } else {
              
                return null; // or an appropriate value
            }
        } else {
            // Handle the case when the latest schedule is not active
            return null; // or an appropriate value
        }
    } else {
        // Handle the case when there is no latest schedule or its creation timestamp is null
        return null; // or an appropriate value
    }
	}
}



----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3003)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1003)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:799)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:743)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-09-21 15:03:39.918
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3003)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1003)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:799)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:743)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-09-21 15:03:39.919
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3003)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1003)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:799)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:743)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2023-09-21 15:03:47.047
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.xyram.daydrop.serviceimpl;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.transaction.Transactional;

import org.apache.commons.collections4.map.HashedMap;
import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.server.ResponseStatusException;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.xyram.daydrop.admin.model.CurrentUser;
import com.xyram.daydrop.basemodel.Base64Wrapper;
import com.xyram.daydrop.basemodel.MerchantTransactionIdGenerator;
import com.xyram.daydrop.basemodel.PhonepeSerializer;
import com.xyram.daydrop.dao.ApartmentDao;
import com.xyram.daydrop.dao.CustomerDetailsDao;
import com.xyram.daydrop.dao.CustomerOrderDao;
import com.xyram.daydrop.dao.CustomerOrderReplicaDoa;
import com.xyram.daydrop.dao.SheduleDao;
import com.xyram.daydrop.enumtypes.UserStatus;
import com.xyram.daydrop.model.Apartments;
import com.xyram.daydrop.model.CustomerOrder;
import com.xyram.daydrop.model.CustomerOrderReplica;
import com.xyram.daydrop.model.Customers;
import com.xyram.daydrop.model.Schedule;
import com.xyram.daydrop.modelMapper.PaymentInstrument;
import com.xyram.daydrop.modelMapper.PhonePePayModel;
import com.xyram.daydrop.request.CustomerOrderReplicaRequest;
import com.xyram.daydrop.response.RazorPayRequest;
import com.xyram.daydrop.service.CustomerOrderPriceService;
import com.xyram.daydrop.service.CustomerOrderReplicaService;
import com.xyram.daydrop.util.HashEncoder;
import com.xyram.daydrop.util.RazorPay;
import com.xyram.daydrop.service.ConsumerService;

@Transactional
@Service
public class CustomerOrderReplicaServiceImpl implements CustomerOrderReplicaService {

	@Autowired
	CustomerOrderReplicaDoa customerOrderReplicaDoa;

	@Autowired
	ApartmentDao apartmentDao;

	@Autowired
	SheduleDao scheduleDao;

	@Autowired
	CustomerDetailsDao customerDetailsDao;

	@Autowired
	ConsumerService consumerService;

	@Autowired
	CurrentUser currentUser;

	@Autowired
	PhonepeServiceImpl phonepeServiceImpl;

	@Value("${merchant_id}")
	private String merchantId;

	@Value("${salt_key}")
	private String saltKey;

	@Value("${salt_index}")
	private String saltIndex;

	@Override
	public Map createCustomerOrderReplicaService(CustomerOrderReplicaRequest customerOrderReplicaRequest,
			String contactNumber, Integer aparmentId)

	{

		Map response = new HashedMap<>();

		response.put("message", "success");
		CustomerOrderReplica customerOrderReplica = null;

		if (customerOrderReplicaRequest.getCartId() == null) {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "cartId is mandatory ");
		}
		long razorPayCount = 0;
		if (customerOrderReplicaRequest.getOrderId() != null) {

			razorPayCount = customerOrderReplicaDoa.getRazorPayExistByCartId(customerOrderReplicaRequest.getOrderId());
		}

		if (customerOrderReplicaRequest.getCustomerDetails() == null) {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Order Details  is mandatory ");
		}

		customerOrderReplica = customerOrderReplicaDoa.getCustomerOrderByCartId(customerOrderReplicaRequest.getCartId(),
				contactNumber);

		if (customerOrderReplica != null) {
			customerOrderReplica.setCartId(customerOrderReplica.getCartId());

			if (customerOrderReplica.isOrdered()) {
				throw new ResponseStatusException(HttpStatus.CONFLICT, "Your Order is Placed With cart Details");
			}

//			if (razorPayCount >= 1 && !(customerOrderReplica.getRazorPayOrderId() != null
//					&& customerOrderReplica.getRazorPayOrderId().equals(customerOrderReplicaRequest.getOrderId()))) {
//				throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Razor Pay Id Are already Exist ");
//			}

			customerOrderReplica.setStatusType(customerOrderReplicaRequest.getStatusType());
			customerOrderReplica.setContactNumber(contactNumber);
			customerOrderReplica.setApartmentId(aparmentId);

			customerOrderReplica.setAttempts(customerOrderReplica.getAttempts() + 1);
			customerOrderReplica.setUpdatedTime(new Date());

			customerOrderReplica.setRazorPayOrderId(customerOrderReplicaRequest.getOrderId());

			try {

				JSONObject obj = new JSONObject(customerOrderReplicaRequest.getCustomerDetails());

				customerOrderReplica.setCustomerOrderDetails(obj != null ? obj.toString() : null);

				customerOrderReplicaDoa.updateCustomer(customerOrderReplica);
				return response;

			} catch (Exception e) {
				customerOrderReplica.setCustomerOrderDetails(customerOrderReplicaRequest.getCustomerDetails() != null
						? customerOrderReplicaRequest.getCustomerDetails().toString()
						: null);
				customerOrderReplicaDoa.updateCustomer(customerOrderReplica);
				return response;
			}

		} else {

			customerOrderReplica = new CustomerOrderReplica();
			customerOrderReplica.setContactNumber(contactNumber);
			customerOrderReplica.setApartmentId(aparmentId);
			customerOrderReplica.setCartId(customerOrderReplicaRequest.getCartId());
			customerOrderReplica.setStatusType(customerOrderReplicaRequest.getStatusType());

			if (razorPayCount > 0) {
				throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Razor Pay Id Are already Exist ");
			}

			customerOrderReplica.setRazorPayOrderId(customerOrderReplicaRequest.getOrderId());

			Schedule schedule = scheduleDao.getlatestScheduleCustomers();

			if (schedule != null) {

				try {
					customerOrderReplica.setSchedule(schedule.getsId() != null ? schedule.getsId().toString() : null);
				} catch (Exception e) {
					e.printStackTrace();
				}
			} else {
				throw new ResponseStatusException(HttpStatus.BAD_REQUEST,
						"Sorry We Are Not Accepting Any Order Right now");

			}

			try {

				JSONObject obj = new JSONObject(customerOrderReplicaRequest.getCustomerDetails());

				customerOrderReplica.setCustomerOrderDetails(obj != null ? obj.toString() : null);

				customerOrderReplicaDoa.updateCustomer(customerOrderReplica);
				return response;

			} catch (Exception e) {
				customerOrderReplica.setCustomerOrderDetails(customerOrderReplicaRequest.getCustomerDetails() != null
						? customerOrderReplicaRequest.getCustomerDetails().toString()
						: null);
				customerOrderReplicaDoa.updateCustomer(customerOrderReplica);
				return response;
			}

		}

	}

	@Override
	public List<CustomerOrderReplica> getAllCustomerOrderReplicas(Map<String, Object> request) {

		String statusType = null;
		String searchQuery = null;

		String schedule = null;

		Map filter = request.containsKey("filters") ? (Map) request.get("filters") : null;
		if (filter != null) {
			statusType = filter.containsKey("statusType") ? ((String) filter.get("statusType")).toLowerCase() : null;
			searchQuery = filter.containsKey("searchQuery") ? ((String) filter.get("searchQuery")).toLowerCase() : null;
			schedule = filter.containsKey("schedule") ? (String.valueOf(filter.get("schedule"))) : null;

		}

		List<CustomerOrderReplica> CustomerOrderReplica = customerOrderReplicaDoa
				.getAllcustomerOrderReplica(searchQuery, statusType, schedule);

		ObjectMapper objectMapper = new ObjectMapper();
		CustomerOrderReplica.forEach(customerOrderReplica -> {
			try {

				// convert JSON string to Map
				Map<String, Object> customerOrderReplicaMap = objectMapper
						.readValue(customerOrderReplica.getCustomerOrderDetails(), Map.class);

				Object customerOrder = customerOrderReplicaMap.get("customerOrder");
				Map<String, Object> items = (Map<String, Object>) customerOrderReplicaMap.get("items");

				Object quanityList = items.get("quantity");

				Map customers = customerDetailsDao.getByContactNumberAndApartment(
						customerOrderReplica.getContactNumber(), customerOrderReplica.getApartmentId());

				// Apartments apartments =
				// apartmentDao.getApartmentById(customerOrderReplica.getApartmentId());
				customerOrderReplica.setApartmentName(
						customers.get("apartmentName") != null ? (String) customers.get("apartmentName") : null);

				customerOrderReplica.setStreetName(
						customers.get("streetName") != null ? (String) customers.get("streetName") : null);

				customerOrderReplica.setCustomerDetails(customers);

				customerOrderReplica.setCustomerOrder(customerOrder);
				customerOrderReplica.setQuatityList(quanityList);

			} catch (Exception e) {
				e.printStackTrace();
			}

		});

		return CustomerOrderReplica;

	}

	@Override
	public List<CustomerOrderReplica> getAllCustomerOrderReplicasBySchedule(Map<String, Object> request) {

		String statusType = null;
		String searchQuery = null;

		String scheduleId = null;

		Schedule schedule = scheduleDao.getlatestScheduleCustomers();

		if (schedule != null) {

			try {
				scheduleId = schedule.getsId() != null ? schedule.getsId().toString() : null;
			} catch (Exception e) {
				e.printStackTrace();
			}
		}

		statusType = request.containsKey("statusType") ? ((String) request.get("statusType")).toLowerCase() : "Success";

		List<CustomerOrderReplica> CustomerOrderReplica = customerOrderReplicaDoa
				.getAllcustomerOrderReplicaBySchdeule(statusType, scheduleId);

		ObjectMapper objectMapper = new ObjectMapper();
		CustomerOrderReplica.forEach(customerOrderReplica -> {
			try {

				// convert JSON string to Map
				Map<String, Object> customerOrderReplicaMap = objectMapper
						.readValue(customerOrderReplica.getCustomerOrderDetails(), Map.class);

				Object customerOrder = customerOrderReplicaMap.get("customerOrder");
				Map<String, Object> items = (Map<String, Object>) customerOrderReplicaMap.get("items");

				Object quanityList = items.get("quantity");
				Map customers = customerDetailsDao.getByContactNumberAndApartment(
						customerOrderReplica.getContactNumber(), customerOrderReplica.getApartmentId());

				System.out.println("customers" + customers.get("customerName"));

				// Apartments apartments =
				// apartmentDao.getApartmentById(customerOrderReplica.getApartmentId());
				customerOrderReplica.setApartmentName(
						customers.get("apartmentName") != null ? (String) customers.get("apartmentName") : null);

				customerOrderReplica.setCustomerDetails(customers);

				customerOrderReplica.setCustomerOrder(customerOrder);
				customerOrderReplica.setQuatityList(quanityList);

			} catch (Exception e) {
				e.printStackTrace();
			}

		});

		return CustomerOrderReplica;

	}

	@Override
	public CustomerOrderReplica getCustomerOrderReplicaByCartId(String cartId) {

		CustomerOrderReplica CustomerOrderReplica = customerOrderReplicaDoa.getCustomerOrderByCartId(cartId,
				currentUser.getContactNumber());

		ObjectMapper objectMapper = new ObjectMapper();
		try {

			// convert JSON string to Map
			Map<String, Object> customerOrderReplicaMap = objectMapper
					.readValue(CustomerOrderReplica.getCustomerOrderDetails(), Map.class);

			Object customerOrder = customerOrderReplicaMap.get("customerOrder");
			Map<String, Object> items = (Map<String, Object>) customerOrderReplicaMap.get("items");

			Object quanityList = items.get("quantity");
			Map customers = customerDetailsDao.getByContactNumberAndApartment(CustomerOrderReplica.getContactNumber(),
					CustomerOrderReplica.getApartmentId());

			System.out.println("customers" + customers.get("customerName"));

			// Apartments apartments =
			// apartmentDao.getApartmentById(customerOrderReplica.getApartmentId());
			CustomerOrderReplica.setApartmentName(
					customers.get("apartmentName") != null ? (String) customers.get("apartmentName") : null);

			CustomerOrderReplica.setCustomerDetails(customers);

			CustomerOrderReplica.setCustomerOrder(customerOrder);
			CustomerOrderReplica.setQuatityList(quanityList);

		} catch (Exception e) {
			e.printStackTrace();
		}

		return CustomerOrderReplica;

	}

	@Override
	public Map createCustomerOrderReplica(CustomerOrderReplicaRequest customerOrderReplicaRequest, String contactNumber,
			Integer aparmentId) {

		if (customerOrderReplicaRequest.getRazorPayRequest() != null) {

//			Map razorPay = consumerService.createRazorPayOrder(customerOrderReplicaRequest.getRazorPayRequest());
//			customerOrderReplicaRequest.setOrderId(razorPay.get("order") != null ? (String)((RazorPay) razorPay.get("order")).getId() : null);	
//	
//			createCustomerOrderReplicaService(customerOrderReplicaRequest, contactNumber, aparmentId);
//
//			razorPay.put("cartId", customerOrderReplicaRequest.getCartId());

			Map customerOrderReplicaMap = new HashMap<>();

			Map orderId = new HashMap<>();
			String transactionId = getMerchantTransactionId();
			orderId.put("id", transactionId);

			customerOrderReplicaMap.put("order", orderId);

			customerOrderReplicaRequest.setOrderId(transactionId);
			createCustomerOrderReplicaService(customerOrderReplicaRequest, contactNumber, aparmentId);

			customerOrderReplicaMap.put("cartId", customerOrderReplicaRequest.getCartId());

			try {
				customerOrderReplicaMap.put("phonePeResponse",
						phonepeServiceImpl.initiatePhonepePayment(transactionId,
								Integer.valueOf(customerOrderReplicaRequest.getRazorPayRequest().getAmount()),
								contactNumber, customerOrderReplicaRequest.getRedirectUrl(), customerOrderReplicaRequest.getCallBackUrl()));

			} catch (Exception e) {
				e.printStackTrace();
				customerOrderReplicaMap.put("phonePeResponse", new HashedMap<>());
			}

			return customerOrderReplicaMap;

		} else {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST,
					"paymentDetails transcation Details are mandatory");
		}

	}

	private static String getMerchantTransactionId() {

		return "OD_" + MerchantTransactionIdGenerator.getRandomString();
	}


	@Override
	public List<CustomerOrderReplica> getCustomerOrderByMoblieNo(String contactNumber,Integer aid) {
		
		Schedule latestschedule = customerOrderReplicaDoa.getlatestschedule();
		
		if (latestschedule != null && latestschedule.getCreationTimestamp()!=null) {
			
	        if (latestschedule.getStatus().equals(UserStatus.ACTIVE)) {
	        	
	        	Customers customer = customerDetailsDao.getByContactNoAndApartment(contactNumber, aid);
	        	if (customer != null) { // Ensure the customer exists
	        		List<CustomerOrder> customerOrderList = customerOrderReplicaDoa.getListCustomerOrderByCustomerId(customer.getCtid());
	        		
	                double totalOrderAmount = 0.0;
	       
                if (customerOrderList != null && !customerOrderList.isEmpty() && customerOrderList.add(customerOrder). {
                    for (CustomerOrder customerOrder : customerOrderList) {
                        Double orderAmount = customerOrder.getAmount();
                        
                        
                        if (orderAmount != null) {
                            totalOrderAmount += orderAmount;
                            if(totalOrderAmount>200) {
                            	totalOrderAmount+customerOrder
                            }
                        }
                    }
                    System.out.println("Total Order Amount: " + totalOrderAmount);
                    List<CustomerOrderReplica> customerOrderReplicas = new ArrayList<>();
                    return customerOrderReplicas;
                } else {
                    return Collections.emptyList(); // or return null or an appropriate value
                }
            } else {
              
                return null; // or an appropriate value
            }
        } else {
            // Handle the case when the latest schedule is not active
            return null; // or an appropriate value
        }
    } else {
        // Handle the case when there is no latest schedule or its creation timestamp is null
        return null; // or an appropriate value
    }
	}
}



----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3003)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2023-09-21 15:03:47.049
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3003)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2023-09-21 15:03:47.051
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3003)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2023-09-21 15:03:47.171
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.xyram.daydrop.serviceimpl;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.transaction.Transactional;

import org.apache.commons.collections4.map.HashedMap;
import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.server.ResponseStatusException;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.xyram.daydrop.admin.model.CurrentUser;
import com.xyram.daydrop.basemodel.Base64Wrapper;
import com.xyram.daydrop.basemodel.MerchantTransactionIdGenerator;
import com.xyram.daydrop.basemodel.PhonepeSerializer;
import com.xyram.daydrop.dao.ApartmentDao;
import com.xyram.daydrop.dao.CustomerDetailsDao;
import com.xyram.daydrop.dao.CustomerOrderDao;
import com.xyram.daydrop.dao.CustomerOrderReplicaDoa;
import com.xyram.daydrop.dao.SheduleDao;
import com.xyram.daydrop.enumtypes.UserStatus;
import com.xyram.daydrop.model.Apartments;
import com.xyram.daydrop.model.CustomerOrder;
import com.xyram.daydrop.model.CustomerOrderReplica;
import com.xyram.daydrop.model.Customers;
import com.xyram.daydrop.model.Schedule;
import com.xyram.daydrop.modelMapper.PaymentInstrument;
import com.xyram.daydrop.modelMapper.PhonePePayModel;
import com.xyram.daydrop.request.CustomerOrderReplicaRequest;
import com.xyram.daydrop.response.RazorPayRequest;
import com.xyram.daydrop.service.CustomerOrderPriceService;
import com.xyram.daydrop.service.CustomerOrderReplicaService;
import com.xyram.daydrop.util.HashEncoder;
import com.xyram.daydrop.util.RazorPay;
import com.xyram.daydrop.service.ConsumerService;

@Transactional
@Service
public class CustomerOrderReplicaServiceImpl implements CustomerOrderReplicaService {

	@Autowired
	CustomerOrderReplicaDoa customerOrderReplicaDoa;

	@Autowired
	ApartmentDao apartmentDao;

	@Autowired
	SheduleDao scheduleDao;

	@Autowired
	CustomerDetailsDao customerDetailsDao;

	@Autowired
	ConsumerService consumerService;

	@Autowired
	CurrentUser currentUser;

	@Autowired
	PhonepeServiceImpl phonepeServiceImpl;

	@Value("${merchant_id}")
	private String merchantId;

	@Value("${salt_key}")
	private String saltKey;

	@Value("${salt_index}")
	private String saltIndex;

	@Override
	public Map createCustomerOrderReplicaService(CustomerOrderReplicaRequest customerOrderReplicaRequest,
			String contactNumber, Integer aparmentId)

	{

		Map response = new HashedMap<>();

		response.put("message", "success");
		CustomerOrderReplica customerOrderReplica = null;

		if (customerOrderReplicaRequest.getCartId() == null) {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "cartId is mandatory ");
		}
		long razorPayCount = 0;
		if (customerOrderReplicaRequest.getOrderId() != null) {

			razorPayCount = customerOrderReplicaDoa.getRazorPayExistByCartId(customerOrderReplicaRequest.getOrderId());
		}

		if (customerOrderReplicaRequest.getCustomerDetails() == null) {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Order Details  is mandatory ");
		}

		customerOrderReplica = customerOrderReplicaDoa.getCustomerOrderByCartId(customerOrderReplicaRequest.getCartId(),
				contactNumber);

		if (customerOrderReplica != null) {
			customerOrderReplica.setCartId(customerOrderReplica.getCartId());

			if (customerOrderReplica.isOrdered()) {
				throw new ResponseStatusException(HttpStatus.CONFLICT, "Your Order is Placed With cart Details");
			}

//			if (razorPayCount >= 1 && !(customerOrderReplica.getRazorPayOrderId() != null
//					&& customerOrderReplica.getRazorPayOrderId().equals(customerOrderReplicaRequest.getOrderId()))) {
//				throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Razor Pay Id Are already Exist ");
//			}

			customerOrderReplica.setStatusType(customerOrderReplicaRequest.getStatusType());
			customerOrderReplica.setContactNumber(contactNumber);
			customerOrderReplica.setApartmentId(aparmentId);

			customerOrderReplica.setAttempts(customerOrderReplica.getAttempts() + 1);
			customerOrderReplica.setUpdatedTime(new Date());

			customerOrderReplica.setRazorPayOrderId(customerOrderReplicaRequest.getOrderId());

			try {

				JSONObject obj = new JSONObject(customerOrderReplicaRequest.getCustomerDetails());

				customerOrderReplica.setCustomerOrderDetails(obj != null ? obj.toString() : null);

				customerOrderReplicaDoa.updateCustomer(customerOrderReplica);
				return response;

			} catch (Exception e) {
				customerOrderReplica.setCustomerOrderDetails(customerOrderReplicaRequest.getCustomerDetails() != null
						? customerOrderReplicaRequest.getCustomerDetails().toString()
						: null);
				customerOrderReplicaDoa.updateCustomer(customerOrderReplica);
				return response;
			}

		} else {

			customerOrderReplica = new CustomerOrderReplica();
			customerOrderReplica.setContactNumber(contactNumber);
			customerOrderReplica.setApartmentId(aparmentId);
			customerOrderReplica.setCartId(customerOrderReplicaRequest.getCartId());
			customerOrderReplica.setStatusType(customerOrderReplicaRequest.getStatusType());

			if (razorPayCount > 0) {
				throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Razor Pay Id Are already Exist ");
			}

			customerOrderReplica.setRazorPayOrderId(customerOrderReplicaRequest.getOrderId());

			Schedule schedule = scheduleDao.getlatestScheduleCustomers();

			if (schedule != null) {

				try {
					customerOrderReplica.setSchedule(schedule.getsId() != null ? schedule.getsId().toString() : null);
				} catch (Exception e) {
					e.printStackTrace();
				}
			} else {
				throw new ResponseStatusException(HttpStatus.BAD_REQUEST,
						"Sorry We Are Not Accepting Any Order Right now");

			}

			try {

				JSONObject obj = new JSONObject(customerOrderReplicaRequest.getCustomerDetails());

				customerOrderReplica.setCustomerOrderDetails(obj != null ? obj.toString() : null);

				customerOrderReplicaDoa.updateCustomer(customerOrderReplica);
				return response;

			} catch (Exception e) {
				customerOrderReplica.setCustomerOrderDetails(customerOrderReplicaRequest.getCustomerDetails() != null
						? customerOrderReplicaRequest.getCustomerDetails().toString()
						: null);
				customerOrderReplicaDoa.updateCustomer(customerOrderReplica);
				return response;
			}

		}

	}

	@Override
	public List<CustomerOrderReplica> getAllCustomerOrderReplicas(Map<String, Object> request) {

		String statusType = null;
		String searchQuery = null;

		String schedule = null;

		Map filter = request.containsKey("filters") ? (Map) request.get("filters") : null;
		if (filter != null) {
			statusType = filter.containsKey("statusType") ? ((String) filter.get("statusType")).toLowerCase() : null;
			searchQuery = filter.containsKey("searchQuery") ? ((String) filter.get("searchQuery")).toLowerCase() : null;
			schedule = filter.containsKey("schedule") ? (String.valueOf(filter.get("schedule"))) : null;

		}

		List<CustomerOrderReplica> CustomerOrderReplica = customerOrderReplicaDoa
				.getAllcustomerOrderReplica(searchQuery, statusType, schedule);

		ObjectMapper objectMapper = new ObjectMapper();
		CustomerOrderReplica.forEach(customerOrderReplica -> {
			try {

				// convert JSON string to Map
				Map<String, Object> customerOrderReplicaMap = objectMapper
						.readValue(customerOrderReplica.getCustomerOrderDetails(), Map.class);

				Object customerOrder = customerOrderReplicaMap.get("customerOrder");
				Map<String, Object> items = (Map<String, Object>) customerOrderReplicaMap.get("items");

				Object quanityList = items.get("quantity");

				Map customers = customerDetailsDao.getByContactNumberAndApartment(
						customerOrderReplica.getContactNumber(), customerOrderReplica.getApartmentId());

				// Apartments apartments =
				// apartmentDao.getApartmentById(customerOrderReplica.getApartmentId());
				customerOrderReplica.setApartmentName(
						customers.get("apartmentName") != null ? (String) customers.get("apartmentName") : null);

				customerOrderReplica.setStreetName(
						customers.get("streetName") != null ? (String) customers.get("streetName") : null);

				customerOrderReplica.setCustomerDetails(customers);

				customerOrderReplica.setCustomerOrder(customerOrder);
				customerOrderReplica.setQuatityList(quanityList);

			} catch (Exception e) {
				e.printStackTrace();
			}

		});

		return CustomerOrderReplica;

	}

	@Override
	public List<CustomerOrderReplica> getAllCustomerOrderReplicasBySchedule(Map<String, Object> request) {

		String statusType = null;
		String searchQuery = null;

		String scheduleId = null;

		Schedule schedule = scheduleDao.getlatestScheduleCustomers();

		if (schedule != null) {

			try {
				scheduleId = schedule.getsId() != null ? schedule.getsId().toString() : null;
			} catch (Exception e) {
				e.printStackTrace();
			}
		}

		statusType = request.containsKey("statusType") ? ((String) request.get("statusType")).toLowerCase() : "Success";

		List<CustomerOrderReplica> CustomerOrderReplica = customerOrderReplicaDoa
				.getAllcustomerOrderReplicaBySchdeule(statusType, scheduleId);

		ObjectMapper objectMapper = new ObjectMapper();
		CustomerOrderReplica.forEach(customerOrderReplica -> {
			try {

				// convert JSON string to Map
				Map<String, Object> customerOrderReplicaMap = objectMapper
						.readValue(customerOrderReplica.getCustomerOrderDetails(), Map.class);

				Object customerOrder = customerOrderReplicaMap.get("customerOrder");
				Map<String, Object> items = (Map<String, Object>) customerOrderReplicaMap.get("items");

				Object quanityList = items.get("quantity");
				Map customers = customerDetailsDao.getByContactNumberAndApartment(
						customerOrderReplica.getContactNumber(), customerOrderReplica.getApartmentId());

				System.out.println("customers" + customers.get("customerName"));

				// Apartments apartments =
				// apartmentDao.getApartmentById(customerOrderReplica.getApartmentId());
				customerOrderReplica.setApartmentName(
						customers.get("apartmentName") != null ? (String) customers.get("apartmentName") : null);

				customerOrderReplica.setCustomerDetails(customers);

				customerOrderReplica.setCustomerOrder(customerOrder);
				customerOrderReplica.setQuatityList(quanityList);

			} catch (Exception e) {
				e.printStackTrace();
			}

		});

		return CustomerOrderReplica;

	}

	@Override
	public CustomerOrderReplica getCustomerOrderReplicaByCartId(String cartId) {

		CustomerOrderReplica CustomerOrderReplica = customerOrderReplicaDoa.getCustomerOrderByCartId(cartId,
				currentUser.getContactNumber());

		ObjectMapper objectMapper = new ObjectMapper();
		try {

			// convert JSON string to Map
			Map<String, Object> customerOrderReplicaMap = objectMapper
					.readValue(CustomerOrderReplica.getCustomerOrderDetails(), Map.class);

			Object customerOrder = customerOrderReplicaMap.get("customerOrder");
			Map<String, Object> items = (Map<String, Object>) customerOrderReplicaMap.get("items");

			Object quanityList = items.get("quantity");
			Map customers = customerDetailsDao.getByContactNumberAndApartment(CustomerOrderReplica.getContactNumber(),
					CustomerOrderReplica.getApartmentId());

			System.out.println("customers" + customers.get("customerName"));

			// Apartments apartments =
			// apartmentDao.getApartmentById(customerOrderReplica.getApartmentId());
			CustomerOrderReplica.setApartmentName(
					customers.get("apartmentName") != null ? (String) customers.get("apartmentName") : null);

			CustomerOrderReplica.setCustomerDetails(customers);

			CustomerOrderReplica.setCustomerOrder(customerOrder);
			CustomerOrderReplica.setQuatityList(quanityList);

		} catch (Exception e) {
			e.printStackTrace();
		}

		return CustomerOrderReplica;

	}

	@Override
	public Map createCustomerOrderReplica(CustomerOrderReplicaRequest customerOrderReplicaRequest, String contactNumber,
			Integer aparmentId) {

		if (customerOrderReplicaRequest.getRazorPayRequest() != null) {

//			Map razorPay = consumerService.createRazorPayOrder(customerOrderReplicaRequest.getRazorPayRequest());
//			customerOrderReplicaRequest.setOrderId(razorPay.get("order") != null ? (String)((RazorPay) razorPay.get("order")).getId() : null);	
//	
//			createCustomerOrderReplicaService(customerOrderReplicaRequest, contactNumber, aparmentId);
//
//			razorPay.put("cartId", customerOrderReplicaRequest.getCartId());

			Map customerOrderReplicaMap = new HashMap<>();

			Map orderId = new HashMap<>();
			String transactionId = getMerchantTransactionId();
			orderId.put("id", transactionId);

			customerOrderReplicaMap.put("order", orderId);

			customerOrderReplicaRequest.setOrderId(transactionId);
			createCustomerOrderReplicaService(customerOrderReplicaRequest, contactNumber, aparmentId);

			customerOrderReplicaMap.put("cartId", customerOrderReplicaRequest.getCartId());

			try {
				customerOrderReplicaMap.put("phonePeResponse",
						phonepeServiceImpl.initiatePhonepePayment(transactionId,
								Integer.valueOf(customerOrderReplicaRequest.getRazorPayRequest().getAmount()),
								contactNumber, customerOrderReplicaRequest.getRedirectUrl(), customerOrderReplicaRequest.getCallBackUrl()));

			} catch (Exception e) {
				e.printStackTrace();
				customerOrderReplicaMap.put("phonePeResponse", new HashedMap<>());
			}

			return customerOrderReplicaMap;

		} else {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST,
					"paymentDetails transcation Details are mandatory");
		}

	}

	private static String getMerchantTransactionId() {

		return "OD_" + MerchantTransactionIdGenerator.getRandomString();
	}


	@Override
	public List<CustomerOrderReplica> getCustomerOrderByMoblieNo(String contactNumber,Integer aid) {
		
		Schedule latestschedule = customerOrderReplicaDoa.getlatestschedule();
		
		if (latestschedule != null && latestschedule.getCreationTimestamp()!=null) {
			
	        if (latestschedule.getStatus().equals(UserStatus.ACTIVE)) {
	        	
	        	Customers customer = customerDetailsDao.getByContactNoAndApartment(contactNumber, aid);
	        	if (customer != null) { // Ensure the customer exists
	        		List<CustomerOrder> customerOrderList = customerOrderReplicaDoa.getListCustomerOrderByCustomerId(customer.getCtid());
	        		
	                double totalOrderAmount = 0.0;
	       
                if (customerOrderList != null && !customerOrderList.isEmpty() && customerOrderList.add(customerOrder). {
                    for (CustomerOrder customerOrder : customerOrderList) {
                        Double orderAmount = customerOrder.getAmount();
                        
                        
                        if (orderAmount != null) {
                            totalOrderAmount += orderAmount;
                            if(totalOrderAmount>200) {
                            	totalOrderAmount+customerOrder
                            }
                        }
                    }
                    System.out.println("Total Order Amount: " + totalOrderAmount);
                    List<CustomerOrderReplica> customerOrderReplicas = new ArrayList<>();
                    return customerOrderReplicas;
                } else {
                    return Collections.emptyList(); // or return null or an appropriate value
                }
            } else {
              
                return null; // or an appropriate value
            }
        } else {
            // Handle the case when the latest schedule is not active
            return null; // or an appropriate value
        }
    } else {
        // Handle the case when there is no latest schedule or its creation timestamp is null
        return null; // or an appropriate value
    }
	}
}



----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3003)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-09-21 15:03:47.173
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3003)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-09-21 15:03:47.175
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3003)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2023-09-21 15:03:48.041
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.xyram.daydrop.serviceimpl;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.transaction.Transactional;

import org.apache.commons.collections4.map.HashedMap;
import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.server.ResponseStatusException;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.xyram.daydrop.admin.model.CurrentUser;
import com.xyram.daydrop.basemodel.Base64Wrapper;
import com.xyram.daydrop.basemodel.MerchantTransactionIdGenerator;
import com.xyram.daydrop.basemodel.PhonepeSerializer;
import com.xyram.daydrop.dao.ApartmentDao;
import com.xyram.daydrop.dao.CustomerDetailsDao;
import com.xyram.daydrop.dao.CustomerOrderDao;
import com.xyram.daydrop.dao.CustomerOrderReplicaDoa;
import com.xyram.daydrop.dao.SheduleDao;
import com.xyram.daydrop.enumtypes.UserStatus;
import com.xyram.daydrop.model.Apartments;
import com.xyram.daydrop.model.CustomerOrder;
import com.xyram.daydrop.model.CustomerOrderReplica;
import com.xyram.daydrop.model.Customers;
import com.xyram.daydrop.model.Schedule;
import com.xyram.daydrop.modelMapper.PaymentInstrument;
import com.xyram.daydrop.modelMapper.PhonePePayModel;
import com.xyram.daydrop.request.CustomerOrderReplicaRequest;
import com.xyram.daydrop.response.RazorPayRequest;
import com.xyram.daydrop.service.CustomerOrderPriceService;
import com.xyram.daydrop.service.CustomerOrderReplicaService;
import com.xyram.daydrop.util.HashEncoder;
import com.xyram.daydrop.util.RazorPay;
import com.xyram.daydrop.service.ConsumerService;

@Transactional
@Service
public class CustomerOrderReplicaServiceImpl implements CustomerOrderReplicaService {

	@Autowired
	CustomerOrderReplicaDoa customerOrderReplicaDoa;

	@Autowired
	ApartmentDao apartmentDao;

	@Autowired
	SheduleDao scheduleDao;

	@Autowired
	CustomerDetailsDao customerDetailsDao;

	@Autowired
	ConsumerService consumerService;

	@Autowired
	CurrentUser currentUser;

	@Autowired
	PhonepeServiceImpl phonepeServiceImpl;

	@Value("${merchant_id}")
	private String merchantId;

	@Value("${salt_key}")
	private String saltKey;

	@Value("${salt_index}")
	private String saltIndex;

	@Override
	public Map createCustomerOrderReplicaService(CustomerOrderReplicaRequest customerOrderReplicaRequest,
			String contactNumber, Integer aparmentId)

	{

		Map response = new HashedMap<>();

		response.put("message", "success");
		CustomerOrderReplica customerOrderReplica = null;

		if (customerOrderReplicaRequest.getCartId() == null) {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "cartId is mandatory ");
		}
		long razorPayCount = 0;
		if (customerOrderReplicaRequest.getOrderId() != null) {

			razorPayCount = customerOrderReplicaDoa.getRazorPayExistByCartId(customerOrderReplicaRequest.getOrderId());
		}

		if (customerOrderReplicaRequest.getCustomerDetails() == null) {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Order Details  is mandatory ");
		}

		customerOrderReplica = customerOrderReplicaDoa.getCustomerOrderByCartId(customerOrderReplicaRequest.getCartId(),
				contactNumber);

		if (customerOrderReplica != null) {
			customerOrderReplica.setCartId(customerOrderReplica.getCartId());

			if (customerOrderReplica.isOrdered()) {
				throw new ResponseStatusException(HttpStatus.CONFLICT, "Your Order is Placed With cart Details");
			}

//			if (razorPayCount >= 1 && !(customerOrderReplica.getRazorPayOrderId() != null
//					&& customerOrderReplica.getRazorPayOrderId().equals(customerOrderReplicaRequest.getOrderId()))) {
//				throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Razor Pay Id Are already Exist ");
//			}

			customerOrderReplica.setStatusType(customerOrderReplicaRequest.getStatusType());
			customerOrderReplica.setContactNumber(contactNumber);
			customerOrderReplica.setApartmentId(aparmentId);

			customerOrderReplica.setAttempts(customerOrderReplica.getAttempts() + 1);
			customerOrderReplica.setUpdatedTime(new Date());

			customerOrderReplica.setRazorPayOrderId(customerOrderReplicaRequest.getOrderId());

			try {

				JSONObject obj = new JSONObject(customerOrderReplicaRequest.getCustomerDetails());

				customerOrderReplica.setCustomerOrderDetails(obj != null ? obj.toString() : null);

				customerOrderReplicaDoa.updateCustomer(customerOrderReplica);
				return response;

			} catch (Exception e) {
				customerOrderReplica.setCustomerOrderDetails(customerOrderReplicaRequest.getCustomerDetails() != null
						? customerOrderReplicaRequest.getCustomerDetails().toString()
						: null);
				customerOrderReplicaDoa.updateCustomer(customerOrderReplica);
				return response;
			}

		} else {

			customerOrderReplica = new CustomerOrderReplica();
			customerOrderReplica.setContactNumber(contactNumber);
			customerOrderReplica.setApartmentId(aparmentId);
			customerOrderReplica.setCartId(customerOrderReplicaRequest.getCartId());
			customerOrderReplica.setStatusType(customerOrderReplicaRequest.getStatusType());

			if (razorPayCount > 0) {
				throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Razor Pay Id Are already Exist ");
			}

			customerOrderReplica.setRazorPayOrderId(customerOrderReplicaRequest.getOrderId());

			Schedule schedule = scheduleDao.getlatestScheduleCustomers();

			if (schedule != null) {

				try {
					customerOrderReplica.setSchedule(schedule.getsId() != null ? schedule.getsId().toString() : null);
				} catch (Exception e) {
					e.printStackTrace();
				}
			} else {
				throw new ResponseStatusException(HttpStatus.BAD_REQUEST,
						"Sorry We Are Not Accepting Any Order Right now");

			}

			try {

				JSONObject obj = new JSONObject(customerOrderReplicaRequest.getCustomerDetails());

				customerOrderReplica.setCustomerOrderDetails(obj != null ? obj.toString() : null);

				customerOrderReplicaDoa.updateCustomer(customerOrderReplica);
				return response;

			} catch (Exception e) {
				customerOrderReplica.setCustomerOrderDetails(customerOrderReplicaRequest.getCustomerDetails() != null
						? customerOrderReplicaRequest.getCustomerDetails().toString()
						: null);
				customerOrderReplicaDoa.updateCustomer(customerOrderReplica);
				return response;
			}

		}

	}

	@Override
	public List<CustomerOrderReplica> getAllCustomerOrderReplicas(Map<String, Object> request) {

		String statusType = null;
		String searchQuery = null;

		String schedule = null;

		Map filter = request.containsKey("filters") ? (Map) request.get("filters") : null;
		if (filter != null) {
			statusType = filter.containsKey("statusType") ? ((String) filter.get("statusType")).toLowerCase() : null;
			searchQuery = filter.containsKey("searchQuery") ? ((String) filter.get("searchQuery")).toLowerCase() : null;
			schedule = filter.containsKey("schedule") ? (String.valueOf(filter.get("schedule"))) : null;

		}

		List<CustomerOrderReplica> CustomerOrderReplica = customerOrderReplicaDoa
				.getAllcustomerOrderReplica(searchQuery, statusType, schedule);

		ObjectMapper objectMapper = new ObjectMapper();
		CustomerOrderReplica.forEach(customerOrderReplica -> {
			try {

				// convert JSON string to Map
				Map<String, Object> customerOrderReplicaMap = objectMapper
						.readValue(customerOrderReplica.getCustomerOrderDetails(), Map.class);

				Object customerOrder = customerOrderReplicaMap.get("customerOrder");
				Map<String, Object> items = (Map<String, Object>) customerOrderReplicaMap.get("items");

				Object quanityList = items.get("quantity");

				Map customers = customerDetailsDao.getByContactNumberAndApartment(
						customerOrderReplica.getContactNumber(), customerOrderReplica.getApartmentId());

				// Apartments apartments =
				// apartmentDao.getApartmentById(customerOrderReplica.getApartmentId());
				customerOrderReplica.setApartmentName(
						customers.get("apartmentName") != null ? (String) customers.get("apartmentName") : null);

				customerOrderReplica.setStreetName(
						customers.get("streetName") != null ? (String) customers.get("streetName") : null);

				customerOrderReplica.setCustomerDetails(customers);

				customerOrderReplica.setCustomerOrder(customerOrder);
				customerOrderReplica.setQuatityList(quanityList);

			} catch (Exception e) {
				e.printStackTrace();
			}

		});

		return CustomerOrderReplica;

	}

	@Override
	public List<CustomerOrderReplica> getAllCustomerOrderReplicasBySchedule(Map<String, Object> request) {

		String statusType = null;
		String searchQuery = null;

		String scheduleId = null;

		Schedule schedule = scheduleDao.getlatestScheduleCustomers();

		if (schedule != null) {

			try {
				scheduleId = schedule.getsId() != null ? schedule.getsId().toString() : null;
			} catch (Exception e) {
				e.printStackTrace();
			}
		}

		statusType = request.containsKey("statusType") ? ((String) request.get("statusType")).toLowerCase() : "Success";

		List<CustomerOrderReplica> CustomerOrderReplica = customerOrderReplicaDoa
				.getAllcustomerOrderReplicaBySchdeule(statusType, scheduleId);

		ObjectMapper objectMapper = new ObjectMapper();
		CustomerOrderReplica.forEach(customerOrderReplica -> {
			try {

				// convert JSON string to Map
				Map<String, Object> customerOrderReplicaMap = objectMapper
						.readValue(customerOrderReplica.getCustomerOrderDetails(), Map.class);

				Object customerOrder = customerOrderReplicaMap.get("customerOrder");
				Map<String, Object> items = (Map<String, Object>) customerOrderReplicaMap.get("items");

				Object quanityList = items.get("quantity");
				Map customers = customerDetailsDao.getByContactNumberAndApartment(
						customerOrderReplica.getContactNumber(), customerOrderReplica.getApartmentId());

				System.out.println("customers" + customers.get("customerName"));

				// Apartments apartments =
				// apartmentDao.getApartmentById(customerOrderReplica.getApartmentId());
				customerOrderReplica.setApartmentName(
						customers.get("apartmentName") != null ? (String) customers.get("apartmentName") : null);

				customerOrderReplica.setCustomerDetails(customers);

				customerOrderReplica.setCustomerOrder(customerOrder);
				customerOrderReplica.setQuatityList(quanityList);

			} catch (Exception e) {
				e.printStackTrace();
			}

		});

		return CustomerOrderReplica;

	}

	@Override
	public CustomerOrderReplica getCustomerOrderReplicaByCartId(String cartId) {

		CustomerOrderReplica CustomerOrderReplica = customerOrderReplicaDoa.getCustomerOrderByCartId(cartId,
				currentUser.getContactNumber());

		ObjectMapper objectMapper = new ObjectMapper();
		try {

			// convert JSON string to Map
			Map<String, Object> customerOrderReplicaMap = objectMapper
					.readValue(CustomerOrderReplica.getCustomerOrderDetails(), Map.class);

			Object customerOrder = customerOrderReplicaMap.get("customerOrder");
			Map<String, Object> items = (Map<String, Object>) customerOrderReplicaMap.get("items");

			Object quanityList = items.get("quantity");
			Map customers = customerDetailsDao.getByContactNumberAndApartment(CustomerOrderReplica.getContactNumber(),
					CustomerOrderReplica.getApartmentId());

			System.out.println("customers" + customers.get("customerName"));

			// Apartments apartments =
			// apartmentDao.getApartmentById(customerOrderReplica.getApartmentId());
			CustomerOrderReplica.setApartmentName(
					customers.get("apartmentName") != null ? (String) customers.get("apartmentName") : null);

			CustomerOrderReplica.setCustomerDetails(customers);

			CustomerOrderReplica.setCustomerOrder(customerOrder);
			CustomerOrderReplica.setQuatityList(quanityList);

		} catch (Exception e) {
			e.printStackTrace();
		}

		return CustomerOrderReplica;

	}

	@Override
	public Map createCustomerOrderReplica(CustomerOrderReplicaRequest customerOrderReplicaRequest, String contactNumber,
			Integer aparmentId) {

		if (customerOrderReplicaRequest.getRazorPayRequest() != null) {

//			Map razorPay = consumerService.createRazorPayOrder(customerOrderReplicaRequest.getRazorPayRequest());
//			customerOrderReplicaRequest.setOrderId(razorPay.get("order") != null ? (String)((RazorPay) razorPay.get("order")).getId() : null);	
//	
//			createCustomerOrderReplicaService(customerOrderReplicaRequest, contactNumber, aparmentId);
//
//			razorPay.put("cartId", customerOrderReplicaRequest.getCartId());

			Map customerOrderReplicaMap = new HashMap<>();

			Map orderId = new HashMap<>();
			String transactionId = getMerchantTransactionId();
			orderId.put("id", transactionId);

			customerOrderReplicaMap.put("order", orderId);

			customerOrderReplicaRequest.setOrderId(transactionId);
			createCustomerOrderReplicaService(customerOrderReplicaRequest, contactNumber, aparmentId);

			customerOrderReplicaMap.put("cartId", customerOrderReplicaRequest.getCartId());

			try {
				customerOrderReplicaMap.put("phonePeResponse",
						phonepeServiceImpl.initiatePhonepePayment(transactionId,
								Integer.valueOf(customerOrderReplicaRequest.getRazorPayRequest().getAmount()),
								contactNumber, customerOrderReplicaRequest.getRedirectUrl(), customerOrderReplicaRequest.getCallBackUrl()));

			} catch (Exception e) {
				e.printStackTrace();
				customerOrderReplicaMap.put("phonePeResponse", new HashedMap<>());
			}

			return customerOrderReplicaMap;

		} else {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST,
					"paymentDetails transcation Details are mandatory");
		}

	}

	private static String getMerchantTransactionId() {

		return "OD_" + MerchantTransactionIdGenerator.getRandomString();
	}


	@Override
	public List<CustomerOrderReplica> getCustomerOrderByMoblieNo(String contactNumber,Integer aid) {
		
		Schedule latestschedule = customerOrderReplicaDoa.getlatestschedule();
		
		if (latestschedule != null && latestschedule.getCreationTimestamp()!=null) {
			
	        if (latestschedule.getStatus().equals(UserStatus.ACTIVE)) {
	        	
	        	Customers customer = customerDetailsDao.getByContactNoAndApartment(contactNumber, aid);
	        	if (customer != null) { // Ensure the customer exists
	        		List<CustomerOrder> customerOrderList = customerOrderReplicaDoa.getListCustomerOrderByCustomerId(customer.getCtid());
	        		
	                double totalOrderAmount = 0.0;
	       
                if (customerOrderList != null && !customerOrderList.isEmpty() && customerOrderList.add(customerOrder). {
                    for (CustomerOrder customerOrder : customerOrderList) {
                        Double orderAmount = customerOrder.getAmount();
                        
                        if
                        if (orderAmount != null) {
                            totalOrderAmount += orderAmount;
                            if(totalOrderAmount>200) {
                            	totalOrderAmount+customerOrder
                            }
                        }
                    }
                    System.out.println("Total Order Amount: " + totalOrderAmount);
                    List<CustomerOrderReplica> customerOrderReplicas = new ArrayList<>();
                    return customerOrderReplicas;
                } else {
                    return Collections.emptyList(); // or return null or an appropriate value
                }
            } else {
              
                return null; // or an appropriate value
            }
        } else {
            // Handle the case when the latest schedule is not active
            return null; // or an appropriate value
        }
    } else {
        // Handle the case when there is no latest schedule or its creation timestamp is null
        return null; // or an appropriate value
    }
	}
}



----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3003)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2023-09-21 15:03:48.043
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3003)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2023-09-21 15:03:48.045
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3003)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2023-09-21 15:03:48.214
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.xyram.daydrop.serviceimpl;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.transaction.Transactional;

import org.apache.commons.collections4.map.HashedMap;
import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.server.ResponseStatusException;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.xyram.daydrop.admin.model.CurrentUser;
import com.xyram.daydrop.basemodel.Base64Wrapper;
import com.xyram.daydrop.basemodel.MerchantTransactionIdGenerator;
import com.xyram.daydrop.basemodel.PhonepeSerializer;
import com.xyram.daydrop.dao.ApartmentDao;
import com.xyram.daydrop.dao.CustomerDetailsDao;
import com.xyram.daydrop.dao.CustomerOrderDao;
import com.xyram.daydrop.dao.CustomerOrderReplicaDoa;
import com.xyram.daydrop.dao.SheduleDao;
import com.xyram.daydrop.enumtypes.UserStatus;
import com.xyram.daydrop.model.Apartments;
import com.xyram.daydrop.model.CustomerOrder;
import com.xyram.daydrop.model.CustomerOrderReplica;
import com.xyram.daydrop.model.Customers;
import com.xyram.daydrop.model.Schedule;
import com.xyram.daydrop.modelMapper.PaymentInstrument;
import com.xyram.daydrop.modelMapper.PhonePePayModel;
import com.xyram.daydrop.request.CustomerOrderReplicaRequest;
import com.xyram.daydrop.response.RazorPayRequest;
import com.xyram.daydrop.service.CustomerOrderPriceService;
import com.xyram.daydrop.service.CustomerOrderReplicaService;
import com.xyram.daydrop.util.HashEncoder;
import com.xyram.daydrop.util.RazorPay;
import com.xyram.daydrop.service.ConsumerService;

@Transactional
@Service
public class CustomerOrderReplicaServiceImpl implements CustomerOrderReplicaService {

	@Autowired
	CustomerOrderReplicaDoa customerOrderReplicaDoa;

	@Autowired
	ApartmentDao apartmentDao;

	@Autowired
	SheduleDao scheduleDao;

	@Autowired
	CustomerDetailsDao customerDetailsDao;

	@Autowired
	ConsumerService consumerService;

	@Autowired
	CurrentUser currentUser;

	@Autowired
	PhonepeServiceImpl phonepeServiceImpl;

	@Value("${merchant_id}")
	private String merchantId;

	@Value("${salt_key}")
	private String saltKey;

	@Value("${salt_index}")
	private String saltIndex;

	@Override
	public Map createCustomerOrderReplicaService(CustomerOrderReplicaRequest customerOrderReplicaRequest,
			String contactNumber, Integer aparmentId)

	{

		Map response = new HashedMap<>();

		response.put("message", "success");
		CustomerOrderReplica customerOrderReplica = null;

		if (customerOrderReplicaRequest.getCartId() == null) {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "cartId is mandatory ");
		}
		long razorPayCount = 0;
		if (customerOrderReplicaRequest.getOrderId() != null) {

			razorPayCount = customerOrderReplicaDoa.getRazorPayExistByCartId(customerOrderReplicaRequest.getOrderId());
		}

		if (customerOrderReplicaRequest.getCustomerDetails() == null) {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Order Details  is mandatory ");
		}

		customerOrderReplica = customerOrderReplicaDoa.getCustomerOrderByCartId(customerOrderReplicaRequest.getCartId(),
				contactNumber);

		if (customerOrderReplica != null) {
			customerOrderReplica.setCartId(customerOrderReplica.getCartId());

			if (customerOrderReplica.isOrdered()) {
				throw new ResponseStatusException(HttpStatus.CONFLICT, "Your Order is Placed With cart Details");
			}

//			if (razorPayCount >= 1 && !(customerOrderReplica.getRazorPayOrderId() != null
//					&& customerOrderReplica.getRazorPayOrderId().equals(customerOrderReplicaRequest.getOrderId()))) {
//				throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Razor Pay Id Are already Exist ");
//			}

			customerOrderReplica.setStatusType(customerOrderReplicaRequest.getStatusType());
			customerOrderReplica.setContactNumber(contactNumber);
			customerOrderReplica.setApartmentId(aparmentId);

			customerOrderReplica.setAttempts(customerOrderReplica.getAttempts() + 1);
			customerOrderReplica.setUpdatedTime(new Date());

			customerOrderReplica.setRazorPayOrderId(customerOrderReplicaRequest.getOrderId());

			try {

				JSONObject obj = new JSONObject(customerOrderReplicaRequest.getCustomerDetails());

				customerOrderReplica.setCustomerOrderDetails(obj != null ? obj.toString() : null);

				customerOrderReplicaDoa.updateCustomer(customerOrderReplica);
				return response;

			} catch (Exception e) {
				customerOrderReplica.setCustomerOrderDetails(customerOrderReplicaRequest.getCustomerDetails() != null
						? customerOrderReplicaRequest.getCustomerDetails().toString()
						: null);
				customerOrderReplicaDoa.updateCustomer(customerOrderReplica);
				return response;
			}

		} else {

			customerOrderReplica = new CustomerOrderReplica();
			customerOrderReplica.setContactNumber(contactNumber);
			customerOrderReplica.setApartmentId(aparmentId);
			customerOrderReplica.setCartId(customerOrderReplicaRequest.getCartId());
			customerOrderReplica.setStatusType(customerOrderReplicaRequest.getStatusType());

			if (razorPayCount > 0) {
				throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Razor Pay Id Are already Exist ");
			}

			customerOrderReplica.setRazorPayOrderId(customerOrderReplicaRequest.getOrderId());

			Schedule schedule = scheduleDao.getlatestScheduleCustomers();

			if (schedule != null) {

				try {
					customerOrderReplica.setSchedule(schedule.getsId() != null ? schedule.getsId().toString() : null);
				} catch (Exception e) {
					e.printStackTrace();
				}
			} else {
				throw new ResponseStatusException(HttpStatus.BAD_REQUEST,
						"Sorry We Are Not Accepting Any Order Right now");

			}

			try {

				JSONObject obj = new JSONObject(customerOrderReplicaRequest.getCustomerDetails());

				customerOrderReplica.setCustomerOrderDetails(obj != null ? obj.toString() : null);

				customerOrderReplicaDoa.updateCustomer(customerOrderReplica);
				return response;

			} catch (Exception e) {
				customerOrderReplica.setCustomerOrderDetails(customerOrderReplicaRequest.getCustomerDetails() != null
						? customerOrderReplicaRequest.getCustomerDetails().toString()
						: null);
				customerOrderReplicaDoa.updateCustomer(customerOrderReplica);
				return response;
			}

		}

	}

	@Override
	public List<CustomerOrderReplica> getAllCustomerOrderReplicas(Map<String, Object> request) {

		String statusType = null;
		String searchQuery = null;

		String schedule = null;

		Map filter = request.containsKey("filters") ? (Map) request.get("filters") : null;
		if (filter != null) {
			statusType = filter.containsKey("statusType") ? ((String) filter.get("statusType")).toLowerCase() : null;
			searchQuery = filter.containsKey("searchQuery") ? ((String) filter.get("searchQuery")).toLowerCase() : null;
			schedule = filter.containsKey("schedule") ? (String.valueOf(filter.get("schedule"))) : null;

		}

		List<CustomerOrderReplica> CustomerOrderReplica = customerOrderReplicaDoa
				.getAllcustomerOrderReplica(searchQuery, statusType, schedule);

		ObjectMapper objectMapper = new ObjectMapper();
		CustomerOrderReplica.forEach(customerOrderReplica -> {
			try {

				// convert JSON string to Map
				Map<String, Object> customerOrderReplicaMap = objectMapper
						.readValue(customerOrderReplica.getCustomerOrderDetails(), Map.class);

				Object customerOrder = customerOrderReplicaMap.get("customerOrder");
				Map<String, Object> items = (Map<String, Object>) customerOrderReplicaMap.get("items");

				Object quanityList = items.get("quantity");

				Map customers = customerDetailsDao.getByContactNumberAndApartment(
						customerOrderReplica.getContactNumber(), customerOrderReplica.getApartmentId());

				// Apartments apartments =
				// apartmentDao.getApartmentById(customerOrderReplica.getApartmentId());
				customerOrderReplica.setApartmentName(
						customers.get("apartmentName") != null ? (String) customers.get("apartmentName") : null);

				customerOrderReplica.setStreetName(
						customers.get("streetName") != null ? (String) customers.get("streetName") : null);

				customerOrderReplica.setCustomerDetails(customers);

				customerOrderReplica.setCustomerOrder(customerOrder);
				customerOrderReplica.setQuatityList(quanityList);

			} catch (Exception e) {
				e.printStackTrace();
			}

		});

		return CustomerOrderReplica;

	}

	@Override
	public List<CustomerOrderReplica> getAllCustomerOrderReplicasBySchedule(Map<String, Object> request) {

		String statusType = null;
		String searchQuery = null;

		String scheduleId = null;

		Schedule schedule = scheduleDao.getlatestScheduleCustomers();

		if (schedule != null) {

			try {
				scheduleId = schedule.getsId() != null ? schedule.getsId().toString() : null;
			} catch (Exception e) {
				e.printStackTrace();
			}
		}

		statusType = request.containsKey("statusType") ? ((String) request.get("statusType")).toLowerCase() : "Success";

		List<CustomerOrderReplica> CustomerOrderReplica = customerOrderReplicaDoa
				.getAllcustomerOrderReplicaBySchdeule(statusType, scheduleId);

		ObjectMapper objectMapper = new ObjectMapper();
		CustomerOrderReplica.forEach(customerOrderReplica -> {
			try {

				// convert JSON string to Map
				Map<String, Object> customerOrderReplicaMap = objectMapper
						.readValue(customerOrderReplica.getCustomerOrderDetails(), Map.class);

				Object customerOrder = customerOrderReplicaMap.get("customerOrder");
				Map<String, Object> items = (Map<String, Object>) customerOrderReplicaMap.get("items");

				Object quanityList = items.get("quantity");
				Map customers = customerDetailsDao.getByContactNumberAndApartment(
						customerOrderReplica.getContactNumber(), customerOrderReplica.getApartmentId());

				System.out.println("customers" + customers.get("customerName"));

				// Apartments apartments =
				// apartmentDao.getApartmentById(customerOrderReplica.getApartmentId());
				customerOrderReplica.setApartmentName(
						customers.get("apartmentName") != null ? (String) customers.get("apartmentName") : null);

				customerOrderReplica.setCustomerDetails(customers);

				customerOrderReplica.setCustomerOrder(customerOrder);
				customerOrderReplica.setQuatityList(quanityList);

			} catch (Exception e) {
				e.printStackTrace();
			}

		});

		return CustomerOrderReplica;

	}

	@Override
	public CustomerOrderReplica getCustomerOrderReplicaByCartId(String cartId) {

		CustomerOrderReplica CustomerOrderReplica = customerOrderReplicaDoa.getCustomerOrderByCartId(cartId,
				currentUser.getContactNumber());

		ObjectMapper objectMapper = new ObjectMapper();
		try {

			// convert JSON string to Map
			Map<String, Object> customerOrderReplicaMap = objectMapper
					.readValue(CustomerOrderReplica.getCustomerOrderDetails(), Map.class);

			Object customerOrder = customerOrderReplicaMap.get("customerOrder");
			Map<String, Object> items = (Map<String, Object>) customerOrderReplicaMap.get("items");

			Object quanityList = items.get("quantity");
			Map customers = customerDetailsDao.getByContactNumberAndApartment(CustomerOrderReplica.getContactNumber(),
					CustomerOrderReplica.getApartmentId());

			System.out.println("customers" + customers.get("customerName"));

			// Apartments apartments =
			// apartmentDao.getApartmentById(customerOrderReplica.getApartmentId());
			CustomerOrderReplica.setApartmentName(
					customers.get("apartmentName") != null ? (String) customers.get("apartmentName") : null);

			CustomerOrderReplica.setCustomerDetails(customers);

			CustomerOrderReplica.setCustomerOrder(customerOrder);
			CustomerOrderReplica.setQuatityList(quanityList);

		} catch (Exception e) {
			e.printStackTrace();
		}

		return CustomerOrderReplica;

	}

	@Override
	public Map createCustomerOrderReplica(CustomerOrderReplicaRequest customerOrderReplicaRequest, String contactNumber,
			Integer aparmentId) {

		if (customerOrderReplicaRequest.getRazorPayRequest() != null) {

//			Map razorPay = consumerService.createRazorPayOrder(customerOrderReplicaRequest.getRazorPayRequest());
//			customerOrderReplicaRequest.setOrderId(razorPay.get("order") != null ? (String)((RazorPay) razorPay.get("order")).getId() : null);	
//	
//			createCustomerOrderReplicaService(customerOrderReplicaRequest, contactNumber, aparmentId);
//
//			razorPay.put("cartId", customerOrderReplicaRequest.getCartId());

			Map customerOrderReplicaMap = new HashMap<>();

			Map orderId = new HashMap<>();
			String transactionId = getMerchantTransactionId();
			orderId.put("id", transactionId);

			customerOrderReplicaMap.put("order", orderId);

			customerOrderReplicaRequest.setOrderId(transactionId);
			createCustomerOrderReplicaService(customerOrderReplicaRequest, contactNumber, aparmentId);

			customerOrderReplicaMap.put("cartId", customerOrderReplicaRequest.getCartId());

			try {
				customerOrderReplicaMap.put("phonePeResponse",
						phonepeServiceImpl.initiatePhonepePayment(transactionId,
								Integer.valueOf(customerOrderReplicaRequest.getRazorPayRequest().getAmount()),
								contactNumber, customerOrderReplicaRequest.getRedirectUrl(), customerOrderReplicaRequest.getCallBackUrl()));

			} catch (Exception e) {
				e.printStackTrace();
				customerOrderReplicaMap.put("phonePeResponse", new HashedMap<>());
			}

			return customerOrderReplicaMap;

		} else {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST,
					"paymentDetails transcation Details are mandatory");
		}

	}

	private static String getMerchantTransactionId() {

		return "OD_" + MerchantTransactionIdGenerator.getRandomString();
	}


	@Override
	public List<CustomerOrderReplica> getCustomerOrderByMoblieNo(String contactNumber,Integer aid) {
		
		Schedule latestschedule = customerOrderReplicaDoa.getlatestschedule();
		
		if (latestschedule != null && latestschedule.getCreationTimestamp()!=null) {
			
	        if (latestschedule.getStatus().equals(UserStatus.ACTIVE)) {
	        	
	        	Customers customer = customerDetailsDao.getByContactNoAndApartment(contactNumber, aid);
	        	if (customer != null) { // Ensure the customer exists
	        		List<CustomerOrder> customerOrderList = customerOrderReplicaDoa.getListCustomerOrderByCustomerId(customer.getCtid());
	        		
	                double totalOrderAmount = 0.0;
	       
                if (customerOrderList != null && !customerOrderList.isEmpty() && customerOrderList.add(customerOrder). {
                    for (CustomerOrder customerOrder : customerOrderList) {
                        Double orderAmount = customerOrder.getAmount();
                        
                        if
                        if (orderAmount != null) {
                            totalOrderAmount += orderAmount;
                            if(totalOrderAmount>200) {
                            	totalOrderAmount+customerOrder
                            }
                        }
                    }
                    System.out.println("Total Order Amount: " + totalOrderAmount);
                    List<CustomerOrderReplica> customerOrderReplicas = new ArrayList<>();
                    return customerOrderReplicas;
                } else {
                    return Collections.emptyList(); // or return null or an appropriate value
                }
            } else {
              
                return null; // or an appropriate value
            }
        } else {
            // Handle the case when the latest schedule is not active
            return null; // or an appropriate value
        }
    } else {
        // Handle the case when there is no latest schedule or its creation timestamp is null
        return null; // or an appropriate value
    }
	}
}



----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3003)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-09-21 15:03:48.221
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3003)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-09-21 15:03:48.225
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3003)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2023-09-21 15:03:48.825
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.xyram.daydrop.serviceimpl;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.transaction.Transactional;

import org.apache.commons.collections4.map.HashedMap;
import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.server.ResponseStatusException;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.xyram.daydrop.admin.model.CurrentUser;
import com.xyram.daydrop.basemodel.Base64Wrapper;
import com.xyram.daydrop.basemodel.MerchantTransactionIdGenerator;
import com.xyram.daydrop.basemodel.PhonepeSerializer;
import com.xyram.daydrop.dao.ApartmentDao;
import com.xyram.daydrop.dao.CustomerDetailsDao;
import com.xyram.daydrop.dao.CustomerOrderDao;
import com.xyram.daydrop.dao.CustomerOrderReplicaDoa;
import com.xyram.daydrop.dao.SheduleDao;
import com.xyram.daydrop.enumtypes.UserStatus;
import com.xyram.daydrop.model.Apartments;
import com.xyram.daydrop.model.CustomerOrder;
import com.xyram.daydrop.model.CustomerOrderReplica;
import com.xyram.daydrop.model.Customers;
import com.xyram.daydrop.model.Schedule;
import com.xyram.daydrop.modelMapper.PaymentInstrument;
import com.xyram.daydrop.modelMapper.PhonePePayModel;
import com.xyram.daydrop.request.CustomerOrderReplicaRequest;
import com.xyram.daydrop.response.RazorPayRequest;
import com.xyram.daydrop.service.CustomerOrderPriceService;
import com.xyram.daydrop.service.CustomerOrderReplicaService;
import com.xyram.daydrop.util.HashEncoder;
import com.xyram.daydrop.util.RazorPay;
import com.xyram.daydrop.service.ConsumerService;

@Transactional
@Service
public class CustomerOrderReplicaServiceImpl implements CustomerOrderReplicaService {

	@Autowired
	CustomerOrderReplicaDoa customerOrderReplicaDoa;

	@Autowired
	ApartmentDao apartmentDao;

	@Autowired
	SheduleDao scheduleDao;

	@Autowired
	CustomerDetailsDao customerDetailsDao;

	@Autowired
	ConsumerService consumerService;

	@Autowired
	CurrentUser currentUser;

	@Autowired
	PhonepeServiceImpl phonepeServiceImpl;

	@Value("${merchant_id}")
	private String merchantId;

	@Value("${salt_key}")
	private String saltKey;

	@Value("${salt_index}")
	private String saltIndex;

	@Override
	public Map createCustomerOrderReplicaService(CustomerOrderReplicaRequest customerOrderReplicaRequest,
			String contactNumber, Integer aparmentId)

	{

		Map response = new HashedMap<>();

		response.put("message", "success");
		CustomerOrderReplica customerOrderReplica = null;

		if (customerOrderReplicaRequest.getCartId() == null) {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "cartId is mandatory ");
		}
		long razorPayCount = 0;
		if (customerOrderReplicaRequest.getOrderId() != null) {

			razorPayCount = customerOrderReplicaDoa.getRazorPayExistByCartId(customerOrderReplicaRequest.getOrderId());
		}

		if (customerOrderReplicaRequest.getCustomerDetails() == null) {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Order Details  is mandatory ");
		}

		customerOrderReplica = customerOrderReplicaDoa.getCustomerOrderByCartId(customerOrderReplicaRequest.getCartId(),
				contactNumber);

		if (customerOrderReplica != null) {
			customerOrderReplica.setCartId(customerOrderReplica.getCartId());

			if (customerOrderReplica.isOrdered()) {
				throw new ResponseStatusException(HttpStatus.CONFLICT, "Your Order is Placed With cart Details");
			}

//			if (razorPayCount >= 1 && !(customerOrderReplica.getRazorPayOrderId() != null
//					&& customerOrderReplica.getRazorPayOrderId().equals(customerOrderReplicaRequest.getOrderId()))) {
//				throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Razor Pay Id Are already Exist ");
//			}

			customerOrderReplica.setStatusType(customerOrderReplicaRequest.getStatusType());
			customerOrderReplica.setContactNumber(contactNumber);
			customerOrderReplica.setApartmentId(aparmentId);

			customerOrderReplica.setAttempts(customerOrderReplica.getAttempts() + 1);
			customerOrderReplica.setUpdatedTime(new Date());

			customerOrderReplica.setRazorPayOrderId(customerOrderReplicaRequest.getOrderId());

			try {

				JSONObject obj = new JSONObject(customerOrderReplicaRequest.getCustomerDetails());

				customerOrderReplica.setCustomerOrderDetails(obj != null ? obj.toString() : null);

				customerOrderReplicaDoa.updateCustomer(customerOrderReplica);
				return response;

			} catch (Exception e) {
				customerOrderReplica.setCustomerOrderDetails(customerOrderReplicaRequest.getCustomerDetails() != null
						? customerOrderReplicaRequest.getCustomerDetails().toString()
						: null);
				customerOrderReplicaDoa.updateCustomer(customerOrderReplica);
				return response;
			}

		} else {

			customerOrderReplica = new CustomerOrderReplica();
			customerOrderReplica.setContactNumber(contactNumber);
			customerOrderReplica.setApartmentId(aparmentId);
			customerOrderReplica.setCartId(customerOrderReplicaRequest.getCartId());
			customerOrderReplica.setStatusType(customerOrderReplicaRequest.getStatusType());

			if (razorPayCount > 0) {
				throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Razor Pay Id Are already Exist ");
			}

			customerOrderReplica.setRazorPayOrderId(customerOrderReplicaRequest.getOrderId());

			Schedule schedule = scheduleDao.getlatestScheduleCustomers();

			if (schedule != null) {

				try {
					customerOrderReplica.setSchedule(schedule.getsId() != null ? schedule.getsId().toString() : null);
				} catch (Exception e) {
					e.printStackTrace();
				}
			} else {
				throw new ResponseStatusException(HttpStatus.BAD_REQUEST,
						"Sorry We Are Not Accepting Any Order Right now");

			}

			try {

				JSONObject obj = new JSONObject(customerOrderReplicaRequest.getCustomerDetails());

				customerOrderReplica.setCustomerOrderDetails(obj != null ? obj.toString() : null);

				customerOrderReplicaDoa.updateCustomer(customerOrderReplica);
				return response;

			} catch (Exception e) {
				customerOrderReplica.setCustomerOrderDetails(customerOrderReplicaRequest.getCustomerDetails() != null
						? customerOrderReplicaRequest.getCustomerDetails().toString()
						: null);
				customerOrderReplicaDoa.updateCustomer(customerOrderReplica);
				return response;
			}

		}

	}

	@Override
	public List<CustomerOrderReplica> getAllCustomerOrderReplicas(Map<String, Object> request) {

		String statusType = null;
		String searchQuery = null;

		String schedule = null;

		Map filter = request.containsKey("filters") ? (Map) request.get("filters") : null;
		if (filter != null) {
			statusType = filter.containsKey("statusType") ? ((String) filter.get("statusType")).toLowerCase() : null;
			searchQuery = filter.containsKey("searchQuery") ? ((String) filter.get("searchQuery")).toLowerCase() : null;
			schedule = filter.containsKey("schedule") ? (String.valueOf(filter.get("schedule"))) : null;

		}

		List<CustomerOrderReplica> CustomerOrderReplica = customerOrderReplicaDoa
				.getAllcustomerOrderReplica(searchQuery, statusType, schedule);

		ObjectMapper objectMapper = new ObjectMapper();
		CustomerOrderReplica.forEach(customerOrderReplica -> {
			try {

				// convert JSON string to Map
				Map<String, Object> customerOrderReplicaMap = objectMapper
						.readValue(customerOrderReplica.getCustomerOrderDetails(), Map.class);

				Object customerOrder = customerOrderReplicaMap.get("customerOrder");
				Map<String, Object> items = (Map<String, Object>) customerOrderReplicaMap.get("items");

				Object quanityList = items.get("quantity");

				Map customers = customerDetailsDao.getByContactNumberAndApartment(
						customerOrderReplica.getContactNumber(), customerOrderReplica.getApartmentId());

				// Apartments apartments =
				// apartmentDao.getApartmentById(customerOrderReplica.getApartmentId());
				customerOrderReplica.setApartmentName(
						customers.get("apartmentName") != null ? (String) customers.get("apartmentName") : null);

				customerOrderReplica.setStreetName(
						customers.get("streetName") != null ? (String) customers.get("streetName") : null);

				customerOrderReplica.setCustomerDetails(customers);

				customerOrderReplica.setCustomerOrder(customerOrder);
				customerOrderReplica.setQuatityList(quanityList);

			} catch (Exception e) {
				e.printStackTrace();
			}

		});

		return CustomerOrderReplica;

	}

	@Override
	public List<CustomerOrderReplica> getAllCustomerOrderReplicasBySchedule(Map<String, Object> request) {

		String statusType = null;
		String searchQuery = null;

		String scheduleId = null;

		Schedule schedule = scheduleDao.getlatestScheduleCustomers();

		if (schedule != null) {

			try {
				scheduleId = schedule.getsId() != null ? schedule.getsId().toString() : null;
			} catch (Exception e) {
				e.printStackTrace();
			}
		}

		statusType = request.containsKey("statusType") ? ((String) request.get("statusType")).toLowerCase() : "Success";

		List<CustomerOrderReplica> CustomerOrderReplica = customerOrderReplicaDoa
				.getAllcustomerOrderReplicaBySchdeule(statusType, scheduleId);

		ObjectMapper objectMapper = new ObjectMapper();
		CustomerOrderReplica.forEach(customerOrderReplica -> {
			try {

				// convert JSON string to Map
				Map<String, Object> customerOrderReplicaMap = objectMapper
						.readValue(customerOrderReplica.getCustomerOrderDetails(), Map.class);

				Object customerOrder = customerOrderReplicaMap.get("customerOrder");
				Map<String, Object> items = (Map<String, Object>) customerOrderReplicaMap.get("items");

				Object quanityList = items.get("quantity");
				Map customers = customerDetailsDao.getByContactNumberAndApartment(
						customerOrderReplica.getContactNumber(), customerOrderReplica.getApartmentId());

				System.out.println("customers" + customers.get("customerName"));

				// Apartments apartments =
				// apartmentDao.getApartmentById(customerOrderReplica.getApartmentId());
				customerOrderReplica.setApartmentName(
						customers.get("apartmentName") != null ? (String) customers.get("apartmentName") : null);

				customerOrderReplica.setCustomerDetails(customers);

				customerOrderReplica.setCustomerOrder(customerOrder);
				customerOrderReplica.setQuatityList(quanityList);

			} catch (Exception e) {
				e.printStackTrace();
			}

		});

		return CustomerOrderReplica;

	}

	@Override
	public CustomerOrderReplica getCustomerOrderReplicaByCartId(String cartId) {

		CustomerOrderReplica CustomerOrderReplica = customerOrderReplicaDoa.getCustomerOrderByCartId(cartId,
				currentUser.getContactNumber());

		ObjectMapper objectMapper = new ObjectMapper();
		try {

			// convert JSON string to Map
			Map<String, Object> customerOrderReplicaMap = objectMapper
					.readValue(CustomerOrderReplica.getCustomerOrderDetails(), Map.class);

			Object customerOrder = customerOrderReplicaMap.get("customerOrder");
			Map<String, Object> items = (Map<String, Object>) customerOrderReplicaMap.get("items");

			Object quanityList = items.get("quantity");
			Map customers = customerDetailsDao.getByContactNumberAndApartment(CustomerOrderReplica.getContactNumber(),
					CustomerOrderReplica.getApartmentId());

			System.out.println("customers" + customers.get("customerName"));

			// Apartments apartments =
			// apartmentDao.getApartmentById(customerOrderReplica.getApartmentId());
			CustomerOrderReplica.setApartmentName(
					customers.get("apartmentName") != null ? (String) customers.get("apartmentName") : null);

			CustomerOrderReplica.setCustomerDetails(customers);

			CustomerOrderReplica.setCustomerOrder(customerOrder);
			CustomerOrderReplica.setQuatityList(quanityList);

		} catch (Exception e) {
			e.printStackTrace();
		}

		return CustomerOrderReplica;

	}

	@Override
	public Map createCustomerOrderReplica(CustomerOrderReplicaRequest customerOrderReplicaRequest, String contactNumber,
			Integer aparmentId) {

		if (customerOrderReplicaRequest.getRazorPayRequest() != null) {

//			Map razorPay = consumerService.createRazorPayOrder(customerOrderReplicaRequest.getRazorPayRequest());
//			customerOrderReplicaRequest.setOrderId(razorPay.get("order") != null ? (String)((RazorPay) razorPay.get("order")).getId() : null);	
//	
//			createCustomerOrderReplicaService(customerOrderReplicaRequest, contactNumber, aparmentId);
//
//			razorPay.put("cartId", customerOrderReplicaRequest.getCartId());

			Map customerOrderReplicaMap = new HashMap<>();

			Map orderId = new HashMap<>();
			String transactionId = getMerchantTransactionId();
			orderId.put("id", transactionId);

			customerOrderReplicaMap.put("order", orderId);

			customerOrderReplicaRequest.setOrderId(transactionId);
			createCustomerOrderReplicaService(customerOrderReplicaRequest, contactNumber, aparmentId);

			customerOrderReplicaMap.put("cartId", customerOrderReplicaRequest.getCartId());

			try {
				customerOrderReplicaMap.put("phonePeResponse",
						phonepeServiceImpl.initiatePhonepePayment(transactionId,
								Integer.valueOf(customerOrderReplicaRequest.getRazorPayRequest().getAmount()),
								contactNumber, customerOrderReplicaRequest.getRedirectUrl(), customerOrderReplicaRequest.getCallBackUrl()));

			} catch (Exception e) {
				e.printStackTrace();
				customerOrderReplicaMap.put("phonePeResponse", new HashedMap<>());
			}

			return customerOrderReplicaMap;

		} else {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST,
					"paymentDetails transcation Details are mandatory");
		}

	}

	private static String getMerchantTransactionId() {

		return "OD_" + MerchantTransactionIdGenerator.getRandomString();
	}


	@Override
	public List<CustomerOrderReplica> getCustomerOrderByMoblieNo(String contactNumber,Integer aid) {
		
		Schedule latestschedule = customerOrderReplicaDoa.getlatestschedule();
		
		if (latestschedule != null && latestschedule.getCreationTimestamp()!=null) {
			
	        if (latestschedule.getStatus().equals(UserStatus.ACTIVE)) {
	        	
	        	Customers customer = customerDetailsDao.getByContactNoAndApartment(contactNumber, aid);
	        	if (customer != null) { // Ensure the customer exists
	        		List<CustomerOrder> customerOrderList = customerOrderReplicaDoa.getListCustomerOrderByCustomerId(customer.getCtid());
	        		
	                double totalOrderAmount = 0.0;
	       
                if (customerOrderList != null && !customerOrderList.isEmpty() && customerOrderList.add(customerOrder). {
                    for (CustomerOrder customerOrder : customerOrderList) {
                        Double orderAmount = customerOrder.getAmount();
                        
                        if()
                        if (orderAmount != null) {
                            totalOrderAmount += orderAmount;
                            if(totalOrderAmount>200) {
                            	totalOrderAmount+customerOrder
                            }
                        }
                    }
                    System.out.println("Total Order Amount: " + totalOrderAmount);
                    List<CustomerOrderReplica> customerOrderReplicas = new ArrayList<>();
                    return customerOrderReplicas;
                } else {
                    return Collections.emptyList(); // or return null or an appropriate value
                }
            } else {
              
                return null; // or an appropriate value
            }
        } else {
            // Handle the case when the latest schedule is not active
            return null; // or an appropriate value
        }
    } else {
        // Handle the case when there is no latest schedule or its creation timestamp is null
        return null; // or an appropriate value
    }
	}
}



----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3003)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2023-09-21 15:03:48.828
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3003)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2023-09-21 15:03:48.830
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3003)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2023-09-21 15:03:49.632
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.xyram.daydrop.serviceimpl;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.transaction.Transactional;

import org.apache.commons.collections4.map.HashedMap;
import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.server.ResponseStatusException;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.xyram.daydrop.admin.model.CurrentUser;
import com.xyram.daydrop.basemodel.Base64Wrapper;
import com.xyram.daydrop.basemodel.MerchantTransactionIdGenerator;
import com.xyram.daydrop.basemodel.PhonepeSerializer;
import com.xyram.daydrop.dao.ApartmentDao;
import com.xyram.daydrop.dao.CustomerDetailsDao;
import com.xyram.daydrop.dao.CustomerOrderDao;
import com.xyram.daydrop.dao.CustomerOrderReplicaDoa;
import com.xyram.daydrop.dao.SheduleDao;
import com.xyram.daydrop.enumtypes.UserStatus;
import com.xyram.daydrop.model.Apartments;
import com.xyram.daydrop.model.CustomerOrder;
import com.xyram.daydrop.model.CustomerOrderReplica;
import com.xyram.daydrop.model.Customers;
import com.xyram.daydrop.model.Schedule;
import com.xyram.daydrop.modelMapper.PaymentInstrument;
import com.xyram.daydrop.modelMapper.PhonePePayModel;
import com.xyram.daydrop.request.CustomerOrderReplicaRequest;
import com.xyram.daydrop.response.RazorPayRequest;
import com.xyram.daydrop.service.CustomerOrderPriceService;
import com.xyram.daydrop.service.CustomerOrderReplicaService;
import com.xyram.daydrop.util.HashEncoder;
import com.xyram.daydrop.util.RazorPay;
import com.xyram.daydrop.service.ConsumerService;

@Transactional
@Service
public class CustomerOrderReplicaServiceImpl implements CustomerOrderReplicaService {

	@Autowired
	CustomerOrderReplicaDoa customerOrderReplicaDoa;

	@Autowired
	ApartmentDao apartmentDao;

	@Autowired
	SheduleDao scheduleDao;

	@Autowired
	CustomerDetailsDao customerDetailsDao;

	@Autowired
	ConsumerService consumerService;

	@Autowired
	CurrentUser currentUser;

	@Autowired
	PhonepeServiceImpl phonepeServiceImpl;

	@Value("${merchant_id}")
	private String merchantId;

	@Value("${salt_key}")
	private String saltKey;

	@Value("${salt_index}")
	private String saltIndex;

	@Override
	public Map createCustomerOrderReplicaService(CustomerOrderReplicaRequest customerOrderReplicaRequest,
			String contactNumber, Integer aparmentId)

	{

		Map response = new HashedMap<>();

		response.put("message", "success");
		CustomerOrderReplica customerOrderReplica = null;

		if (customerOrderReplicaRequest.getCartId() == null) {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "cartId is mandatory ");
		}
		long razorPayCount = 0;
		if (customerOrderReplicaRequest.getOrderId() != null) {

			razorPayCount = customerOrderReplicaDoa.getRazorPayExistByCartId(customerOrderReplicaRequest.getOrderId());
		}

		if (customerOrderReplicaRequest.getCustomerDetails() == null) {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Order Details  is mandatory ");
		}

		customerOrderReplica = customerOrderReplicaDoa.getCustomerOrderByCartId(customerOrderReplicaRequest.getCartId(),
				contactNumber);

		if (customerOrderReplica != null) {
			customerOrderReplica.setCartId(customerOrderReplica.getCartId());

			if (customerOrderReplica.isOrdered()) {
				throw new ResponseStatusException(HttpStatus.CONFLICT, "Your Order is Placed With cart Details");
			}

//			if (razorPayCount >= 1 && !(customerOrderReplica.getRazorPayOrderId() != null
//					&& customerOrderReplica.getRazorPayOrderId().equals(customerOrderReplicaRequest.getOrderId()))) {
//				throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Razor Pay Id Are already Exist ");
//			}

			customerOrderReplica.setStatusType(customerOrderReplicaRequest.getStatusType());
			customerOrderReplica.setContactNumber(contactNumber);
			customerOrderReplica.setApartmentId(aparmentId);

			customerOrderReplica.setAttempts(customerOrderReplica.getAttempts() + 1);
			customerOrderReplica.setUpdatedTime(new Date());

			customerOrderReplica.setRazorPayOrderId(customerOrderReplicaRequest.getOrderId());

			try {

				JSONObject obj = new JSONObject(customerOrderReplicaRequest.getCustomerDetails());

				customerOrderReplica.setCustomerOrderDetails(obj != null ? obj.toString() : null);

				customerOrderReplicaDoa.updateCustomer(customerOrderReplica);
				return response;

			} catch (Exception e) {
				customerOrderReplica.setCustomerOrderDetails(customerOrderReplicaRequest.getCustomerDetails() != null
						? customerOrderReplicaRequest.getCustomerDetails().toString()
						: null);
				customerOrderReplicaDoa.updateCustomer(customerOrderReplica);
				return response;
			}

		} else {

			customerOrderReplica = new CustomerOrderReplica();
			customerOrderReplica.setContactNumber(contactNumber);
			customerOrderReplica.setApartmentId(aparmentId);
			customerOrderReplica.setCartId(customerOrderReplicaRequest.getCartId());
			customerOrderReplica.setStatusType(customerOrderReplicaRequest.getStatusType());

			if (razorPayCount > 0) {
				throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Razor Pay Id Are already Exist ");
			}

			customerOrderReplica.setRazorPayOrderId(customerOrderReplicaRequest.getOrderId());

			Schedule schedule = scheduleDao.getlatestScheduleCustomers();

			if (schedule != null) {

				try {
					customerOrderReplica.setSchedule(schedule.getsId() != null ? schedule.getsId().toString() : null);
				} catch (Exception e) {
					e.printStackTrace();
				}
			} else {
				throw new ResponseStatusException(HttpStatus.BAD_REQUEST,
						"Sorry We Are Not Accepting Any Order Right now");

			}

			try {

				JSONObject obj = new JSONObject(customerOrderReplicaRequest.getCustomerDetails());

				customerOrderReplica.setCustomerOrderDetails(obj != null ? obj.toString() : null);

				customerOrderReplicaDoa.updateCustomer(customerOrderReplica);
				return response;

			} catch (Exception e) {
				customerOrderReplica.setCustomerOrderDetails(customerOrderReplicaRequest.getCustomerDetails() != null
						? customerOrderReplicaRequest.getCustomerDetails().toString()
						: null);
				customerOrderReplicaDoa.updateCustomer(customerOrderReplica);
				return response;
			}

		}

	}

	@Override
	public List<CustomerOrderReplica> getAllCustomerOrderReplicas(Map<String, Object> request) {

		String statusType = null;
		String searchQuery = null;

		String schedule = null;

		Map filter = request.containsKey("filters") ? (Map) request.get("filters") : null;
		if (filter != null) {
			statusType = filter.containsKey("statusType") ? ((String) filter.get("statusType")).toLowerCase() : null;
			searchQuery = filter.containsKey("searchQuery") ? ((String) filter.get("searchQuery")).toLowerCase() : null;
			schedule = filter.containsKey("schedule") ? (String.valueOf(filter.get("schedule"))) : null;

		}

		List<CustomerOrderReplica> CustomerOrderReplica = customerOrderReplicaDoa
				.getAllcustomerOrderReplica(searchQuery, statusType, schedule);

		ObjectMapper objectMapper = new ObjectMapper();
		CustomerOrderReplica.forEach(customerOrderReplica -> {
			try {

				// convert JSON string to Map
				Map<String, Object> customerOrderReplicaMap = objectMapper
						.readValue(customerOrderReplica.getCustomerOrderDetails(), Map.class);

				Object customerOrder = customerOrderReplicaMap.get("customerOrder");
				Map<String, Object> items = (Map<String, Object>) customerOrderReplicaMap.get("items");

				Object quanityList = items.get("quantity");

				Map customers = customerDetailsDao.getByContactNumberAndApartment(
						customerOrderReplica.getContactNumber(), customerOrderReplica.getApartmentId());

				// Apartments apartments =
				// apartmentDao.getApartmentById(customerOrderReplica.getApartmentId());
				customerOrderReplica.setApartmentName(
						customers.get("apartmentName") != null ? (String) customers.get("apartmentName") : null);

				customerOrderReplica.setStreetName(
						customers.get("streetName") != null ? (String) customers.get("streetName") : null);

				customerOrderReplica.setCustomerDetails(customers);

				customerOrderReplica.setCustomerOrder(customerOrder);
				customerOrderReplica.setQuatityList(quanityList);

			} catch (Exception e) {
				e.printStackTrace();
			}

		});

		return CustomerOrderReplica;

	}

	@Override
	public List<CustomerOrderReplica> getAllCustomerOrderReplicasBySchedule(Map<String, Object> request) {

		String statusType = null;
		String searchQuery = null;

		String scheduleId = null;

		Schedule schedule = scheduleDao.getlatestScheduleCustomers();

		if (schedule != null) {

			try {
				scheduleId = schedule.getsId() != null ? schedule.getsId().toString() : null;
			} catch (Exception e) {
				e.printStackTrace();
			}
		}

		statusType = request.containsKey("statusType") ? ((String) request.get("statusType")).toLowerCase() : "Success";

		List<CustomerOrderReplica> CustomerOrderReplica = customerOrderReplicaDoa
				.getAllcustomerOrderReplicaBySchdeule(statusType, scheduleId);

		ObjectMapper objectMapper = new ObjectMapper();
		CustomerOrderReplica.forEach(customerOrderReplica -> {
			try {

				// convert JSON string to Map
				Map<String, Object> customerOrderReplicaMap = objectMapper
						.readValue(customerOrderReplica.getCustomerOrderDetails(), Map.class);

				Object customerOrder = customerOrderReplicaMap.get("customerOrder");
				Map<String, Object> items = (Map<String, Object>) customerOrderReplicaMap.get("items");

				Object quanityList = items.get("quantity");
				Map customers = customerDetailsDao.getByContactNumberAndApartment(
						customerOrderReplica.getContactNumber(), customerOrderReplica.getApartmentId());

				System.out.println("customers" + customers.get("customerName"));

				// Apartments apartments =
				// apartmentDao.getApartmentById(customerOrderReplica.getApartmentId());
				customerOrderReplica.setApartmentName(
						customers.get("apartmentName") != null ? (String) customers.get("apartmentName") : null);

				customerOrderReplica.setCustomerDetails(customers);

				customerOrderReplica.setCustomerOrder(customerOrder);
				customerOrderReplica.setQuatityList(quanityList);

			} catch (Exception e) {
				e.printStackTrace();
			}

		});

		return CustomerOrderReplica;

	}

	@Override
	public CustomerOrderReplica getCustomerOrderReplicaByCartId(String cartId) {

		CustomerOrderReplica CustomerOrderReplica = customerOrderReplicaDoa.getCustomerOrderByCartId(cartId,
				currentUser.getContactNumber());

		ObjectMapper objectMapper = new ObjectMapper();
		try {

			// convert JSON string to Map
			Map<String, Object> customerOrderReplicaMap = objectMapper
					.readValue(CustomerOrderReplica.getCustomerOrderDetails(), Map.class);

			Object customerOrder = customerOrderReplicaMap.get("customerOrder");
			Map<String, Object> items = (Map<String, Object>) customerOrderReplicaMap.get("items");

			Object quanityList = items.get("quantity");
			Map customers = customerDetailsDao.getByContactNumberAndApartment(CustomerOrderReplica.getContactNumber(),
					CustomerOrderReplica.getApartmentId());

			System.out.println("customers" + customers.get("customerName"));

			// Apartments apartments =
			// apartmentDao.getApartmentById(customerOrderReplica.getApartmentId());
			CustomerOrderReplica.setApartmentName(
					customers.get("apartmentName") != null ? (String) customers.get("apartmentName") : null);

			CustomerOrderReplica.setCustomerDetails(customers);

			CustomerOrderReplica.setCustomerOrder(customerOrder);
			CustomerOrderReplica.setQuatityList(quanityList);

		} catch (Exception e) {
			e.printStackTrace();
		}

		return CustomerOrderReplica;

	}

	@Override
	public Map createCustomerOrderReplica(CustomerOrderReplicaRequest customerOrderReplicaRequest, String contactNumber,
			Integer aparmentId) {

		if (customerOrderReplicaRequest.getRazorPayRequest() != null) {

//			Map razorPay = consumerService.createRazorPayOrder(customerOrderReplicaRequest.getRazorPayRequest());
//			customerOrderReplicaRequest.setOrderId(razorPay.get("order") != null ? (String)((RazorPay) razorPay.get("order")).getId() : null);	
//	
//			createCustomerOrderReplicaService(customerOrderReplicaRequest, contactNumber, aparmentId);
//
//			razorPay.put("cartId", customerOrderReplicaRequest.getCartId());

			Map customerOrderReplicaMap = new HashMap<>();

			Map orderId = new HashMap<>();
			String transactionId = getMerchantTransactionId();
			orderId.put("id", transactionId);

			customerOrderReplicaMap.put("order", orderId);

			customerOrderReplicaRequest.setOrderId(transactionId);
			createCustomerOrderReplicaService(customerOrderReplicaRequest, contactNumber, aparmentId);

			customerOrderReplicaMap.put("cartId", customerOrderReplicaRequest.getCartId());

			try {
				customerOrderReplicaMap.put("phonePeResponse",
						phonepeServiceImpl.initiatePhonepePayment(transactionId,
								Integer.valueOf(customerOrderReplicaRequest.getRazorPayRequest().getAmount()),
								contactNumber, customerOrderReplicaRequest.getRedirectUrl(), customerOrderReplicaRequest.getCallBackUrl()));

			} catch (Exception e) {
				e.printStackTrace();
				customerOrderReplicaMap.put("phonePeResponse", new HashedMap<>());
			}

			return customerOrderReplicaMap;

		} else {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST,
					"paymentDetails transcation Details are mandatory");
		}

	}

	private static String getMerchantTransactionId() {

		return "OD_" + MerchantTransactionIdGenerator.getRandomString();
	}


	@Override
	public List<CustomerOrderReplica> getCustomerOrderByMoblieNo(String contactNumber,Integer aid) {
		
		Schedule latestschedule = customerOrderReplicaDoa.getlatestschedule();
		
		if (latestschedule != null && latestschedule.getCreationTimestamp()!=null) {
			
	        if (latestschedule.getStatus().equals(UserStatus.ACTIVE)) {
	        	
	        	Customers customer = customerDetailsDao.getByContactNoAndApartment(contactNumber, aid);
	        	if (customer != null) { // Ensure the customer exists
	        		List<CustomerOrder> customerOrderList = customerOrderReplicaDoa.getListCustomerOrderByCustomerId(customer.getCtid());
	        		
	                double totalOrderAmount = 0.0;
	       
                if (customerOrderList != null && !customerOrderList.isEmpty() && customerOrderList.add(customerOrder). {
                    for (CustomerOrder customerOrder : customerOrderList) {
                        Double orderAmount = customerOrder.getAmount();
                        
                        if()
                        if (orderAmount != null) {
                            totalOrderAmount += orderAmount;
                            if(totalOrderAmount>200) {
                            	totalOrderAmount+customerOrder
                            }
                        }
                    }
                    System.out.println("Total Order Amount: " + totalOrderAmount);
                    List<CustomerOrderReplica> customerOrderReplicas = new ArrayList<>();
                    return customerOrderReplicas;
                } else {
                    return Collections.emptyList(); // or return null or an appropriate value
                }
            } else {
              
                return null; // or an appropriate value
            }
        } else {
            // Handle the case when the latest schedule is not active
            return null; // or an appropriate value
        }
    } else {
        // Handle the case when there is no latest schedule or its creation timestamp is null
        return null; // or an appropriate value
    }
	}
}



----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3003)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-09-21 15:03:49.635
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3003)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-09-21 15:03:49.638
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3003)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2023-09-21 15:03:51.887
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.xyram.daydrop.serviceimpl;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.transaction.Transactional;

import org.apache.commons.collections4.map.HashedMap;
import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.server.ResponseStatusException;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.xyram.daydrop.admin.model.CurrentUser;
import com.xyram.daydrop.basemodel.Base64Wrapper;
import com.xyram.daydrop.basemodel.MerchantTransactionIdGenerator;
import com.xyram.daydrop.basemodel.PhonepeSerializer;
import com.xyram.daydrop.dao.ApartmentDao;
import com.xyram.daydrop.dao.CustomerDetailsDao;
import com.xyram.daydrop.dao.CustomerOrderDao;
import com.xyram.daydrop.dao.CustomerOrderReplicaDoa;
import com.xyram.daydrop.dao.SheduleDao;
import com.xyram.daydrop.enumtypes.UserStatus;
import com.xyram.daydrop.model.Apartments;
import com.xyram.daydrop.model.CustomerOrder;
import com.xyram.daydrop.model.CustomerOrderReplica;
import com.xyram.daydrop.model.Customers;
import com.xyram.daydrop.model.Schedule;
import com.xyram.daydrop.modelMapper.PaymentInstrument;
import com.xyram.daydrop.modelMapper.PhonePePayModel;
import com.xyram.daydrop.request.CustomerOrderReplicaRequest;
import com.xyram.daydrop.response.RazorPayRequest;
import com.xyram.daydrop.service.CustomerOrderPriceService;
import com.xyram.daydrop.service.CustomerOrderReplicaService;
import com.xyram.daydrop.util.HashEncoder;
import com.xyram.daydrop.util.RazorPay;
import com.xyram.daydrop.service.ConsumerService;

@Transactional
@Service
public class CustomerOrderReplicaServiceImpl implements CustomerOrderReplicaService {

	@Autowired
	CustomerOrderReplicaDoa customerOrderReplicaDoa;

	@Autowired
	ApartmentDao apartmentDao;

	@Autowired
	SheduleDao scheduleDao;

	@Autowired
	CustomerDetailsDao customerDetailsDao;

	@Autowired
	ConsumerService consumerService;

	@Autowired
	CurrentUser currentUser;

	@Autowired
	PhonepeServiceImpl phonepeServiceImpl;

	@Value("${merchant_id}")
	private String merchantId;

	@Value("${salt_key}")
	private String saltKey;

	@Value("${salt_index}")
	private String saltIndex;

	@Override
	public Map createCustomerOrderReplicaService(CustomerOrderReplicaRequest customerOrderReplicaRequest,
			String contactNumber, Integer aparmentId)

	{

		Map response = new HashedMap<>();

		response.put("message", "success");
		CustomerOrderReplica customerOrderReplica = null;

		if (customerOrderReplicaRequest.getCartId() == null) {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "cartId is mandatory ");
		}
		long razorPayCount = 0;
		if (customerOrderReplicaRequest.getOrderId() != null) {

			razorPayCount = customerOrderReplicaDoa.getRazorPayExistByCartId(customerOrderReplicaRequest.getOrderId());
		}

		if (customerOrderReplicaRequest.getCustomerDetails() == null) {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Order Details  is mandatory ");
		}

		customerOrderReplica = customerOrderReplicaDoa.getCustomerOrderByCartId(customerOrderReplicaRequest.getCartId(),
				contactNumber);

		if (customerOrderReplica != null) {
			customerOrderReplica.setCartId(customerOrderReplica.getCartId());

			if (customerOrderReplica.isOrdered()) {
				throw new ResponseStatusException(HttpStatus.CONFLICT, "Your Order is Placed With cart Details");
			}

//			if (razorPayCount >= 1 && !(customerOrderReplica.getRazorPayOrderId() != null
//					&& customerOrderReplica.getRazorPayOrderId().equals(customerOrderReplicaRequest.getOrderId()))) {
//				throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Razor Pay Id Are already Exist ");
//			}

			customerOrderReplica.setStatusType(customerOrderReplicaRequest.getStatusType());
			customerOrderReplica.setContactNumber(contactNumber);
			customerOrderReplica.setApartmentId(aparmentId);

			customerOrderReplica.setAttempts(customerOrderReplica.getAttempts() + 1);
			customerOrderReplica.setUpdatedTime(new Date());

			customerOrderReplica.setRazorPayOrderId(customerOrderReplicaRequest.getOrderId());

			try {

				JSONObject obj = new JSONObject(customerOrderReplicaRequest.getCustomerDetails());

				customerOrderReplica.setCustomerOrderDetails(obj != null ? obj.toString() : null);

				customerOrderReplicaDoa.updateCustomer(customerOrderReplica);
				return response;

			} catch (Exception e) {
				customerOrderReplica.setCustomerOrderDetails(customerOrderReplicaRequest.getCustomerDetails() != null
						? customerOrderReplicaRequest.getCustomerDetails().toString()
						: null);
				customerOrderReplicaDoa.updateCustomer(customerOrderReplica);
				return response;
			}

		} else {

			customerOrderReplica = new CustomerOrderReplica();
			customerOrderReplica.setContactNumber(contactNumber);
			customerOrderReplica.setApartmentId(aparmentId);
			customerOrderReplica.setCartId(customerOrderReplicaRequest.getCartId());
			customerOrderReplica.setStatusType(customerOrderReplicaRequest.getStatusType());

			if (razorPayCount > 0) {
				throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Razor Pay Id Are already Exist ");
			}

			customerOrderReplica.setRazorPayOrderId(customerOrderReplicaRequest.getOrderId());

			Schedule schedule = scheduleDao.getlatestScheduleCustomers();

			if (schedule != null) {

				try {
					customerOrderReplica.setSchedule(schedule.getsId() != null ? schedule.getsId().toString() : null);
				} catch (Exception e) {
					e.printStackTrace();
				}
			} else {
				throw new ResponseStatusException(HttpStatus.BAD_REQUEST,
						"Sorry We Are Not Accepting Any Order Right now");

			}

			try {

				JSONObject obj = new JSONObject(customerOrderReplicaRequest.getCustomerDetails());

				customerOrderReplica.setCustomerOrderDetails(obj != null ? obj.toString() : null);

				customerOrderReplicaDoa.updateCustomer(customerOrderReplica);
				return response;

			} catch (Exception e) {
				customerOrderReplica.setCustomerOrderDetails(customerOrderReplicaRequest.getCustomerDetails() != null
						? customerOrderReplicaRequest.getCustomerDetails().toString()
						: null);
				customerOrderReplicaDoa.updateCustomer(customerOrderReplica);
				return response;
			}

		}

	}

	@Override
	public List<CustomerOrderReplica> getAllCustomerOrderReplicas(Map<String, Object> request) {

		String statusType = null;
		String searchQuery = null;

		String schedule = null;

		Map filter = request.containsKey("filters") ? (Map) request.get("filters") : null;
		if (filter != null) {
			statusType = filter.containsKey("statusType") ? ((String) filter.get("statusType")).toLowerCase() : null;
			searchQuery = filter.containsKey("searchQuery") ? ((String) filter.get("searchQuery")).toLowerCase() : null;
			schedule = filter.containsKey("schedule") ? (String.valueOf(filter.get("schedule"))) : null;

		}

		List<CustomerOrderReplica> CustomerOrderReplica = customerOrderReplicaDoa
				.getAllcustomerOrderReplica(searchQuery, statusType, schedule);

		ObjectMapper objectMapper = new ObjectMapper();
		CustomerOrderReplica.forEach(customerOrderReplica -> {
			try {

				// convert JSON string to Map
				Map<String, Object> customerOrderReplicaMap = objectMapper
						.readValue(customerOrderReplica.getCustomerOrderDetails(), Map.class);

				Object customerOrder = customerOrderReplicaMap.get("customerOrder");
				Map<String, Object> items = (Map<String, Object>) customerOrderReplicaMap.get("items");

				Object quanityList = items.get("quantity");

				Map customers = customerDetailsDao.getByContactNumberAndApartment(
						customerOrderReplica.getContactNumber(), customerOrderReplica.getApartmentId());

				// Apartments apartments =
				// apartmentDao.getApartmentById(customerOrderReplica.getApartmentId());
				customerOrderReplica.setApartmentName(
						customers.get("apartmentName") != null ? (String) customers.get("apartmentName") : null);

				customerOrderReplica.setStreetName(
						customers.get("streetName") != null ? (String) customers.get("streetName") : null);

				customerOrderReplica.setCustomerDetails(customers);

				customerOrderReplica.setCustomerOrder(customerOrder);
				customerOrderReplica.setQuatityList(quanityList);

			} catch (Exception e) {
				e.printStackTrace();
			}

		});

		return CustomerOrderReplica;

	}

	@Override
	public List<CustomerOrderReplica> getAllCustomerOrderReplicasBySchedule(Map<String, Object> request) {

		String statusType = null;
		String searchQuery = null;

		String scheduleId = null;

		Schedule schedule = scheduleDao.getlatestScheduleCustomers();

		if (schedule != null) {

			try {
				scheduleId = schedule.getsId() != null ? schedule.getsId().toString() : null;
			} catch (Exception e) {
				e.printStackTrace();
			}
		}

		statusType = request.containsKey("statusType") ? ((String) request.get("statusType")).toLowerCase() : "Success";

		List<CustomerOrderReplica> CustomerOrderReplica = customerOrderReplicaDoa
				.getAllcustomerOrderReplicaBySchdeule(statusType, scheduleId);

		ObjectMapper objectMapper = new ObjectMapper();
		CustomerOrderReplica.forEach(customerOrderReplica -> {
			try {

				// convert JSON string to Map
				Map<String, Object> customerOrderReplicaMap = objectMapper
						.readValue(customerOrderReplica.getCustomerOrderDetails(), Map.class);

				Object customerOrder = customerOrderReplicaMap.get("customerOrder");
				Map<String, Object> items = (Map<String, Object>) customerOrderReplicaMap.get("items");

				Object quanityList = items.get("quantity");
				Map customers = customerDetailsDao.getByContactNumberAndApartment(
						customerOrderReplica.getContactNumber(), customerOrderReplica.getApartmentId());

				System.out.println("customers" + customers.get("customerName"));

				// Apartments apartments =
				// apartmentDao.getApartmentById(customerOrderReplica.getApartmentId());
				customerOrderReplica.setApartmentName(
						customers.get("apartmentName") != null ? (String) customers.get("apartmentName") : null);

				customerOrderReplica.setCustomerDetails(customers);

				customerOrderReplica.setCustomerOrder(customerOrder);
				customerOrderReplica.setQuatityList(quanityList);

			} catch (Exception e) {
				e.printStackTrace();
			}

		});

		return CustomerOrderReplica;

	}

	@Override
	public CustomerOrderReplica getCustomerOrderReplicaByCartId(String cartId) {

		CustomerOrderReplica CustomerOrderReplica = customerOrderReplicaDoa.getCustomerOrderByCartId(cartId,
				currentUser.getContactNumber());

		ObjectMapper objectMapper = new ObjectMapper();
		try {

			// convert JSON string to Map
			Map<String, Object> customerOrderReplicaMap = objectMapper
					.readValue(CustomerOrderReplica.getCustomerOrderDetails(), Map.class);

			Object customerOrder = customerOrderReplicaMap.get("customerOrder");
			Map<String, Object> items = (Map<String, Object>) customerOrderReplicaMap.get("items");

			Object quanityList = items.get("quantity");
			Map customers = customerDetailsDao.getByContactNumberAndApartment(CustomerOrderReplica.getContactNumber(),
					CustomerOrderReplica.getApartmentId());

			System.out.println("customers" + customers.get("customerName"));

			// Apartments apartments =
			// apartmentDao.getApartmentById(customerOrderReplica.getApartmentId());
			CustomerOrderReplica.setApartmentName(
					customers.get("apartmentName") != null ? (String) customers.get("apartmentName") : null);

			CustomerOrderReplica.setCustomerDetails(customers);

			CustomerOrderReplica.setCustomerOrder(customerOrder);
			CustomerOrderReplica.setQuatityList(quanityList);

		} catch (Exception e) {
			e.printStackTrace();
		}

		return CustomerOrderReplica;

	}

	@Override
	public Map createCustomerOrderReplica(CustomerOrderReplicaRequest customerOrderReplicaRequest, String contactNumber,
			Integer aparmentId) {

		if (customerOrderReplicaRequest.getRazorPayRequest() != null) {

//			Map razorPay = consumerService.createRazorPayOrder(customerOrderReplicaRequest.getRazorPayRequest());
//			customerOrderReplicaRequest.setOrderId(razorPay.get("order") != null ? (String)((RazorPay) razorPay.get("order")).getId() : null);	
//	
//			createCustomerOrderReplicaService(customerOrderReplicaRequest, contactNumber, aparmentId);
//
//			razorPay.put("cartId", customerOrderReplicaRequest.getCartId());

			Map customerOrderReplicaMap = new HashMap<>();

			Map orderId = new HashMap<>();
			String transactionId = getMerchantTransactionId();
			orderId.put("id", transactionId);

			customerOrderReplicaMap.put("order", orderId);

			customerOrderReplicaRequest.setOrderId(transactionId);
			createCustomerOrderReplicaService(customerOrderReplicaRequest, contactNumber, aparmentId);

			customerOrderReplicaMap.put("cartId", customerOrderReplicaRequest.getCartId());

			try {
				customerOrderReplicaMap.put("phonePeResponse",
						phonepeServiceImpl.initiatePhonepePayment(transactionId,
								Integer.valueOf(customerOrderReplicaRequest.getRazorPayRequest().getAmount()),
								contactNumber, customerOrderReplicaRequest.getRedirectUrl(), customerOrderReplicaRequest.getCallBackUrl()));

			} catch (Exception e) {
				e.printStackTrace();
				customerOrderReplicaMap.put("phonePeResponse", new HashedMap<>());
			}

			return customerOrderReplicaMap;

		} else {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST,
					"paymentDetails transcation Details are mandatory");
		}

	}

	private static String getMerchantTransactionId() {

		return "OD_" + MerchantTransactionIdGenerator.getRandomString();
	}


	@Override
	public List<CustomerOrderReplica> getCustomerOrderByMoblieNo(String contactNumber,Integer aid) {
		
		Schedule latestschedule = customerOrderReplicaDoa.getlatestschedule();
		
		if (latestschedule != null && latestschedule.getCreationTimestamp()!=null) {
			
	        if (latestschedule.getStatus().equals(UserStatus.ACTIVE)) {
	        	
	        	Customers customer = customerDetailsDao.getByContactNoAndApartment(contactNumber, aid);
	        	if (customer != null) { // Ensure the customer exists
	        		List<CustomerOrder> customerOrderList = customerOrderReplicaDoa.getListCustomerOrderByCustomerId(customer.getCtid());
	        		
	                double totalOrderAmount = 0.0;
	       
                if (customerOrderList != null && !customerOrderList.isEmpty() && customerOrderList.add(customerOrder). {
                    for (CustomerOrder customerOrder : customerOrderList) {
                        Double orderAmount = customerOrder.getAmount();
                        
                        if()
                        if (orderAmount != null) {
                            totalOrderAmount += orderAmount;
                            if(totalOrderAmount>200) {
                            	totalOrderAmount+customerOrder
                            }
                        }
                    }
                    System.out.println("Total Order Amount: " + totalOrderAmount);
                    List<CustomerOrderReplica> customerOrderReplicas = new ArrayList<>();
                    return customerOrderReplicas;
                } else {
                    return Collections.emptyList(); // or return null or an appropriate value
                }
            } else {
              
                return null; // or an appropriate value
            }
        } else {
            // Handle the case when the latest schedule is not active
            return null; // or an appropriate value
        }
    } else {
        // Handle the case when there is no latest schedule or its creation timestamp is null
        return null; // or an appropriate value
    }
	}
}



----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3003)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-09-21 15:03:51.888
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3003)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-09-21 15:03:51.889
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3003)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2023-09-21 15:03:54.011
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.xyram.daydrop.serviceimpl;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.transaction.Transactional;

import org.apache.commons.collections4.map.HashedMap;
import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.server.ResponseStatusException;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.xyram.daydrop.admin.model.CurrentUser;
import com.xyram.daydrop.basemodel.Base64Wrapper;
import com.xyram.daydrop.basemodel.MerchantTransactionIdGenerator;
import com.xyram.daydrop.basemodel.PhonepeSerializer;
import com.xyram.daydrop.dao.ApartmentDao;
import com.xyram.daydrop.dao.CustomerDetailsDao;
import com.xyram.daydrop.dao.CustomerOrderDao;
import com.xyram.daydrop.dao.CustomerOrderReplicaDoa;
import com.xyram.daydrop.dao.SheduleDao;
import com.xyram.daydrop.enumtypes.UserStatus;
import com.xyram.daydrop.model.Apartments;
import com.xyram.daydrop.model.CustomerOrder;
import com.xyram.daydrop.model.CustomerOrderReplica;
import com.xyram.daydrop.model.Customers;
import com.xyram.daydrop.model.Schedule;
import com.xyram.daydrop.modelMapper.PaymentInstrument;
import com.xyram.daydrop.modelMapper.PhonePePayModel;
import com.xyram.daydrop.request.CustomerOrderReplicaRequest;
import com.xyram.daydrop.response.RazorPayRequest;
import com.xyram.daydrop.service.CustomerOrderPriceService;
import com.xyram.daydrop.service.CustomerOrderReplicaService;
import com.xyram.daydrop.util.HashEncoder;
import com.xyram.daydrop.util.RazorPay;
import com.xyram.daydrop.service.ConsumerService;

@Transactional
@Service
public class CustomerOrderReplicaServiceImpl implements CustomerOrderReplicaService {

	@Autowired
	CustomerOrderReplicaDoa customerOrderReplicaDoa;

	@Autowired
	ApartmentDao apartmentDao;

	@Autowired
	SheduleDao scheduleDao;

	@Autowired
	CustomerDetailsDao customerDetailsDao;

	@Autowired
	ConsumerService consumerService;

	@Autowired
	CurrentUser currentUser;

	@Autowired
	PhonepeServiceImpl phonepeServiceImpl;

	@Value("${merchant_id}")
	private String merchantId;

	@Value("${salt_key}")
	private String saltKey;

	@Value("${salt_index}")
	private String saltIndex;

	@Override
	public Map createCustomerOrderReplicaService(CustomerOrderReplicaRequest customerOrderReplicaRequest,
			String contactNumber, Integer aparmentId)

	{

		Map response = new HashedMap<>();

		response.put("message", "success");
		CustomerOrderReplica customerOrderReplica = null;

		if (customerOrderReplicaRequest.getCartId() == null) {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "cartId is mandatory ");
		}
		long razorPayCount = 0;
		if (customerOrderReplicaRequest.getOrderId() != null) {

			razorPayCount = customerOrderReplicaDoa.getRazorPayExistByCartId(customerOrderReplicaRequest.getOrderId());
		}

		if (customerOrderReplicaRequest.getCustomerDetails() == null) {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Order Details  is mandatory ");
		}

		customerOrderReplica = customerOrderReplicaDoa.getCustomerOrderByCartId(customerOrderReplicaRequest.getCartId(),
				contactNumber);

		if (customerOrderReplica != null) {
			customerOrderReplica.setCartId(customerOrderReplica.getCartId());

			if (customerOrderReplica.isOrdered()) {
				throw new ResponseStatusException(HttpStatus.CONFLICT, "Your Order is Placed With cart Details");
			}

//			if (razorPayCount >= 1 && !(customerOrderReplica.getRazorPayOrderId() != null
//					&& customerOrderReplica.getRazorPayOrderId().equals(customerOrderReplicaRequest.getOrderId()))) {
//				throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Razor Pay Id Are already Exist ");
//			}

			customerOrderReplica.setStatusType(customerOrderReplicaRequest.getStatusType());
			customerOrderReplica.setContactNumber(contactNumber);
			customerOrderReplica.setApartmentId(aparmentId);

			customerOrderReplica.setAttempts(customerOrderReplica.getAttempts() + 1);
			customerOrderReplica.setUpdatedTime(new Date());

			customerOrderReplica.setRazorPayOrderId(customerOrderReplicaRequest.getOrderId());

			try {

				JSONObject obj = new JSONObject(customerOrderReplicaRequest.getCustomerDetails());

				customerOrderReplica.setCustomerOrderDetails(obj != null ? obj.toString() : null);

				customerOrderReplicaDoa.updateCustomer(customerOrderReplica);
				return response;

			} catch (Exception e) {
				customerOrderReplica.setCustomerOrderDetails(customerOrderReplicaRequest.getCustomerDetails() != null
						? customerOrderReplicaRequest.getCustomerDetails().toString()
						: null);
				customerOrderReplicaDoa.updateCustomer(customerOrderReplica);
				return response;
			}

		} else {

			customerOrderReplica = new CustomerOrderReplica();
			customerOrderReplica.setContactNumber(contactNumber);
			customerOrderReplica.setApartmentId(aparmentId);
			customerOrderReplica.setCartId(customerOrderReplicaRequest.getCartId());
			customerOrderReplica.setStatusType(customerOrderReplicaRequest.getStatusType());

			if (razorPayCount > 0) {
				throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Razor Pay Id Are already Exist ");
			}

			customerOrderReplica.setRazorPayOrderId(customerOrderReplicaRequest.getOrderId());

			Schedule schedule = scheduleDao.getlatestScheduleCustomers();

			if (schedule != null) {

				try {
					customerOrderReplica.setSchedule(schedule.getsId() != null ? schedule.getsId().toString() : null);
				} catch (Exception e) {
					e.printStackTrace();
				}
			} else {
				throw new ResponseStatusException(HttpStatus.BAD_REQUEST,
						"Sorry We Are Not Accepting Any Order Right now");

			}

			try {

				JSONObject obj = new JSONObject(customerOrderReplicaRequest.getCustomerDetails());

				customerOrderReplica.setCustomerOrderDetails(obj != null ? obj.toString() : null);

				customerOrderReplicaDoa.updateCustomer(customerOrderReplica);
				return response;

			} catch (Exception e) {
				customerOrderReplica.setCustomerOrderDetails(customerOrderReplicaRequest.getCustomerDetails() != null
						? customerOrderReplicaRequest.getCustomerDetails().toString()
						: null);
				customerOrderReplicaDoa.updateCustomer(customerOrderReplica);
				return response;
			}

		}

	}

	@Override
	public List<CustomerOrderReplica> getAllCustomerOrderReplicas(Map<String, Object> request) {

		String statusType = null;
		String searchQuery = null;

		String schedule = null;

		Map filter = request.containsKey("filters") ? (Map) request.get("filters") : null;
		if (filter != null) {
			statusType = filter.containsKey("statusType") ? ((String) filter.get("statusType")).toLowerCase() : null;
			searchQuery = filter.containsKey("searchQuery") ? ((String) filter.get("searchQuery")).toLowerCase() : null;
			schedule = filter.containsKey("schedule") ? (String.valueOf(filter.get("schedule"))) : null;

		}

		List<CustomerOrderReplica> CustomerOrderReplica = customerOrderReplicaDoa
				.getAllcustomerOrderReplica(searchQuery, statusType, schedule);

		ObjectMapper objectMapper = new ObjectMapper();
		CustomerOrderReplica.forEach(customerOrderReplica -> {
			try {

				// convert JSON string to Map
				Map<String, Object> customerOrderReplicaMap = objectMapper
						.readValue(customerOrderReplica.getCustomerOrderDetails(), Map.class);

				Object customerOrder = customerOrderReplicaMap.get("customerOrder");
				Map<String, Object> items = (Map<String, Object>) customerOrderReplicaMap.get("items");

				Object quanityList = items.get("quantity");

				Map customers = customerDetailsDao.getByContactNumberAndApartment(
						customerOrderReplica.getContactNumber(), customerOrderReplica.getApartmentId());

				// Apartments apartments =
				// apartmentDao.getApartmentById(customerOrderReplica.getApartmentId());
				customerOrderReplica.setApartmentName(
						customers.get("apartmentName") != null ? (String) customers.get("apartmentName") : null);

				customerOrderReplica.setStreetName(
						customers.get("streetName") != null ? (String) customers.get("streetName") : null);

				customerOrderReplica.setCustomerDetails(customers);

				customerOrderReplica.setCustomerOrder(customerOrder);
				customerOrderReplica.setQuatityList(quanityList);

			} catch (Exception e) {
				e.printStackTrace();
			}

		});

		return CustomerOrderReplica;

	}

	@Override
	public List<CustomerOrderReplica> getAllCustomerOrderReplicasBySchedule(Map<String, Object> request) {

		String statusType = null;
		String searchQuery = null;

		String scheduleId = null;

		Schedule schedule = scheduleDao.getlatestScheduleCustomers();

		if (schedule != null) {

			try {
				scheduleId = schedule.getsId() != null ? schedule.getsId().toString() : null;
			} catch (Exception e) {
				e.printStackTrace();
			}
		}

		statusType = request.containsKey("statusType") ? ((String) request.get("statusType")).toLowerCase() : "Success";

		List<CustomerOrderReplica> CustomerOrderReplica = customerOrderReplicaDoa
				.getAllcustomerOrderReplicaBySchdeule(statusType, scheduleId);

		ObjectMapper objectMapper = new ObjectMapper();
		CustomerOrderReplica.forEach(customerOrderReplica -> {
			try {

				// convert JSON string to Map
				Map<String, Object> customerOrderReplicaMap = objectMapper
						.readValue(customerOrderReplica.getCustomerOrderDetails(), Map.class);

				Object customerOrder = customerOrderReplicaMap.get("customerOrder");
				Map<String, Object> items = (Map<String, Object>) customerOrderReplicaMap.get("items");

				Object quanityList = items.get("quantity");
				Map customers = customerDetailsDao.getByContactNumberAndApartment(
						customerOrderReplica.getContactNumber(), customerOrderReplica.getApartmentId());

				System.out.println("customers" + customers.get("customerName"));

				// Apartments apartments =
				// apartmentDao.getApartmentById(customerOrderReplica.getApartmentId());
				customerOrderReplica.setApartmentName(
						customers.get("apartmentName") != null ? (String) customers.get("apartmentName") : null);

				customerOrderReplica.setCustomerDetails(customers);

				customerOrderReplica.setCustomerOrder(customerOrder);
				customerOrderReplica.setQuatityList(quanityList);

			} catch (Exception e) {
				e.printStackTrace();
			}

		});

		return CustomerOrderReplica;

	}

	@Override
	public CustomerOrderReplica getCustomerOrderReplicaByCartId(String cartId) {

		CustomerOrderReplica CustomerOrderReplica = customerOrderReplicaDoa.getCustomerOrderByCartId(cartId,
				currentUser.getContactNumber());

		ObjectMapper objectMapper = new ObjectMapper();
		try {

			// convert JSON string to Map
			Map<String, Object> customerOrderReplicaMap = objectMapper
					.readValue(CustomerOrderReplica.getCustomerOrderDetails(), Map.class);

			Object customerOrder = customerOrderReplicaMap.get("customerOrder");
			Map<String, Object> items = (Map<String, Object>) customerOrderReplicaMap.get("items");

			Object quanityList = items.get("quantity");
			Map customers = customerDetailsDao.getByContactNumberAndApartment(CustomerOrderReplica.getContactNumber(),
					CustomerOrderReplica.getApartmentId());

			System.out.println("customers" + customers.get("customerName"));

			// Apartments apartments =
			// apartmentDao.getApartmentById(customerOrderReplica.getApartmentId());
			CustomerOrderReplica.setApartmentName(
					customers.get("apartmentName") != null ? (String) customers.get("apartmentName") : null);

			CustomerOrderReplica.setCustomerDetails(customers);

			CustomerOrderReplica.setCustomerOrder(customerOrder);
			CustomerOrderReplica.setQuatityList(quanityList);

		} catch (Exception e) {
			e.printStackTrace();
		}

		return CustomerOrderReplica;

	}

	@Override
	public Map createCustomerOrderReplica(CustomerOrderReplicaRequest customerOrderReplicaRequest, String contactNumber,
			Integer aparmentId) {

		if (customerOrderReplicaRequest.getRazorPayRequest() != null) {

//			Map razorPay = consumerService.createRazorPayOrder(customerOrderReplicaRequest.getRazorPayRequest());
//			customerOrderReplicaRequest.setOrderId(razorPay.get("order") != null ? (String)((RazorPay) razorPay.get("order")).getId() : null);	
//	
//			createCustomerOrderReplicaService(customerOrderReplicaRequest, contactNumber, aparmentId);
//
//			razorPay.put("cartId", customerOrderReplicaRequest.getCartId());

			Map customerOrderReplicaMap = new HashMap<>();

			Map orderId = new HashMap<>();
			String transactionId = getMerchantTransactionId();
			orderId.put("id", transactionId);

			customerOrderReplicaMap.put("order", orderId);

			customerOrderReplicaRequest.setOrderId(transactionId);
			createCustomerOrderReplicaService(customerOrderReplicaRequest, contactNumber, aparmentId);

			customerOrderReplicaMap.put("cartId", customerOrderReplicaRequest.getCartId());

			try {
				customerOrderReplicaMap.put("phonePeResponse",
						phonepeServiceImpl.initiatePhonepePayment(transactionId,
								Integer.valueOf(customerOrderReplicaRequest.getRazorPayRequest().getAmount()),
								contactNumber, customerOrderReplicaRequest.getRedirectUrl(), customerOrderReplicaRequest.getCallBackUrl()));

			} catch (Exception e) {
				e.printStackTrace();
				customerOrderReplicaMap.put("phonePeResponse", new HashedMap<>());
			}

			return customerOrderReplicaMap;

		} else {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST,
					"paymentDetails transcation Details are mandatory");
		}

	}

	private static String getMerchantTransactionId() {

		return "OD_" + MerchantTransactionIdGenerator.getRandomString();
	}


	@Override
	public List<CustomerOrderReplica> getCustomerOrderByMoblieNo(String contactNumber,Integer aid) {
		
		Schedule latestschedule = customerOrderReplicaDoa.getlatestschedule();
		
		if (latestschedule != null && latestschedule.getCreationTimestamp()!=null) {
			
	        if (latestschedule.getStatus().equals(UserStatus.ACTIVE)) {
	        	
	        	Customers customer = customerDetailsDao.getByContactNoAndApartment(contactNumber, aid);
	        	if (customer != null) { // Ensure the customer exists
	        		List<CustomerOrder> customerOrderList = customerOrderReplicaDoa.getListCustomerOrderByCustomerId(customer.getCtid());
	        		
	                double totalOrderAmount = 0.0;
	       
                if (customerOrderList != null && !customerOrderList.isEmpty() && customerOrderList.add(customerOrder). {
                    for (CustomerOrder customerOrder : customerOrderList) {
                        Double orderAmount = customerOrder.getAmount();
                        
                        if(orderAmount)
                        if (orderAmount != null) {
                            totalOrderAmount += orderAmount;
                            if(totalOrderAmount>200) {
                            	totalOrderAmount+customerOrder
                            }
                        }
                    }
                    System.out.println("Total Order Amount: " + totalOrderAmount);
                    List<CustomerOrderReplica> customerOrderReplicas = new ArrayList<>();
                    return customerOrderReplicas;
                } else {
                    return Collections.emptyList(); // or return null or an appropriate value
                }
            } else {
              
                return null; // or an appropriate value
            }
        } else {
            // Handle the case when the latest schedule is not active
            return null; // or an appropriate value
        }
    } else {
        // Handle the case when there is no latest schedule or its creation timestamp is null
        return null; // or an appropriate value
    }
	}
}



----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3003)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2023-09-21 15:03:54.013
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3003)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2023-09-21 15:03:54.015
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3003)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2023-09-21 15:03:54.090
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.xyram.daydrop.serviceimpl;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.transaction.Transactional;

import org.apache.commons.collections4.map.HashedMap;
import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.server.ResponseStatusException;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.xyram.daydrop.admin.model.CurrentUser;
import com.xyram.daydrop.basemodel.Base64Wrapper;
import com.xyram.daydrop.basemodel.MerchantTransactionIdGenerator;
import com.xyram.daydrop.basemodel.PhonepeSerializer;
import com.xyram.daydrop.dao.ApartmentDao;
import com.xyram.daydrop.dao.CustomerDetailsDao;
import com.xyram.daydrop.dao.CustomerOrderDao;
import com.xyram.daydrop.dao.CustomerOrderReplicaDoa;
import com.xyram.daydrop.dao.SheduleDao;
import com.xyram.daydrop.enumtypes.UserStatus;
import com.xyram.daydrop.model.Apartments;
import com.xyram.daydrop.model.CustomerOrder;
import com.xyram.daydrop.model.CustomerOrderReplica;
import com.xyram.daydrop.model.Customers;
import com.xyram.daydrop.model.Schedule;
import com.xyram.daydrop.modelMapper.PaymentInstrument;
import com.xyram.daydrop.modelMapper.PhonePePayModel;
import com.xyram.daydrop.request.CustomerOrderReplicaRequest;
import com.xyram.daydrop.response.RazorPayRequest;
import com.xyram.daydrop.service.CustomerOrderPriceService;
import com.xyram.daydrop.service.CustomerOrderReplicaService;
import com.xyram.daydrop.util.HashEncoder;
import com.xyram.daydrop.util.RazorPay;
import com.xyram.daydrop.service.ConsumerService;

@Transactional
@Service
public class CustomerOrderReplicaServiceImpl implements CustomerOrderReplicaService {

	@Autowired
	CustomerOrderReplicaDoa customerOrderReplicaDoa;

	@Autowired
	ApartmentDao apartmentDao;

	@Autowired
	SheduleDao scheduleDao;

	@Autowired
	CustomerDetailsDao customerDetailsDao;

	@Autowired
	ConsumerService consumerService;

	@Autowired
	CurrentUser currentUser;

	@Autowired
	PhonepeServiceImpl phonepeServiceImpl;

	@Value("${merchant_id}")
	private String merchantId;

	@Value("${salt_key}")
	private String saltKey;

	@Value("${salt_index}")
	private String saltIndex;

	@Override
	public Map createCustomerOrderReplicaService(CustomerOrderReplicaRequest customerOrderReplicaRequest,
			String contactNumber, Integer aparmentId)

	{

		Map response = new HashedMap<>();

		response.put("message", "success");
		CustomerOrderReplica customerOrderReplica = null;

		if (customerOrderReplicaRequest.getCartId() == null) {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "cartId is mandatory ");
		}
		long razorPayCount = 0;
		if (customerOrderReplicaRequest.getOrderId() != null) {

			razorPayCount = customerOrderReplicaDoa.getRazorPayExistByCartId(customerOrderReplicaRequest.getOrderId());
		}

		if (customerOrderReplicaRequest.getCustomerDetails() == null) {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Order Details  is mandatory ");
		}

		customerOrderReplica = customerOrderReplicaDoa.getCustomerOrderByCartId(customerOrderReplicaRequest.getCartId(),
				contactNumber);

		if (customerOrderReplica != null) {
			customerOrderReplica.setCartId(customerOrderReplica.getCartId());

			if (customerOrderReplica.isOrdered()) {
				throw new ResponseStatusException(HttpStatus.CONFLICT, "Your Order is Placed With cart Details");
			}

//			if (razorPayCount >= 1 && !(customerOrderReplica.getRazorPayOrderId() != null
//					&& customerOrderReplica.getRazorPayOrderId().equals(customerOrderReplicaRequest.getOrderId()))) {
//				throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Razor Pay Id Are already Exist ");
//			}

			customerOrderReplica.setStatusType(customerOrderReplicaRequest.getStatusType());
			customerOrderReplica.setContactNumber(contactNumber);
			customerOrderReplica.setApartmentId(aparmentId);

			customerOrderReplica.setAttempts(customerOrderReplica.getAttempts() + 1);
			customerOrderReplica.setUpdatedTime(new Date());

			customerOrderReplica.setRazorPayOrderId(customerOrderReplicaRequest.getOrderId());

			try {

				JSONObject obj = new JSONObject(customerOrderReplicaRequest.getCustomerDetails());

				customerOrderReplica.setCustomerOrderDetails(obj != null ? obj.toString() : null);

				customerOrderReplicaDoa.updateCustomer(customerOrderReplica);
				return response;

			} catch (Exception e) {
				customerOrderReplica.setCustomerOrderDetails(customerOrderReplicaRequest.getCustomerDetails() != null
						? customerOrderReplicaRequest.getCustomerDetails().toString()
						: null);
				customerOrderReplicaDoa.updateCustomer(customerOrderReplica);
				return response;
			}

		} else {

			customerOrderReplica = new CustomerOrderReplica();
			customerOrderReplica.setContactNumber(contactNumber);
			customerOrderReplica.setApartmentId(aparmentId);
			customerOrderReplica.setCartId(customerOrderReplicaRequest.getCartId());
			customerOrderReplica.setStatusType(customerOrderReplicaRequest.getStatusType());

			if (razorPayCount > 0) {
				throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Razor Pay Id Are already Exist ");
			}

			customerOrderReplica.setRazorPayOrderId(customerOrderReplicaRequest.getOrderId());

			Schedule schedule = scheduleDao.getlatestScheduleCustomers();

			if (schedule != null) {

				try {
					customerOrderReplica.setSchedule(schedule.getsId() != null ? schedule.getsId().toString() : null);
				} catch (Exception e) {
					e.printStackTrace();
				}
			} else {
				throw new ResponseStatusException(HttpStatus.BAD_REQUEST,
						"Sorry We Are Not Accepting Any Order Right now");

			}

			try {

				JSONObject obj = new JSONObject(customerOrderReplicaRequest.getCustomerDetails());

				customerOrderReplica.setCustomerOrderDetails(obj != null ? obj.toString() : null);

				customerOrderReplicaDoa.updateCustomer(customerOrderReplica);
				return response;

			} catch (Exception e) {
				customerOrderReplica.setCustomerOrderDetails(customerOrderReplicaRequest.getCustomerDetails() != null
						? customerOrderReplicaRequest.getCustomerDetails().toString()
						: null);
				customerOrderReplicaDoa.updateCustomer(customerOrderReplica);
				return response;
			}

		}

	}

	@Override
	public List<CustomerOrderReplica> getAllCustomerOrderReplicas(Map<String, Object> request) {

		String statusType = null;
		String searchQuery = null;

		String schedule = null;

		Map filter = request.containsKey("filters") ? (Map) request.get("filters") : null;
		if (filter != null) {
			statusType = filter.containsKey("statusType") ? ((String) filter.get("statusType")).toLowerCase() : null;
			searchQuery = filter.containsKey("searchQuery") ? ((String) filter.get("searchQuery")).toLowerCase() : null;
			schedule = filter.containsKey("schedule") ? (String.valueOf(filter.get("schedule"))) : null;

		}

		List<CustomerOrderReplica> CustomerOrderReplica = customerOrderReplicaDoa
				.getAllcustomerOrderReplica(searchQuery, statusType, schedule);

		ObjectMapper objectMapper = new ObjectMapper();
		CustomerOrderReplica.forEach(customerOrderReplica -> {
			try {

				// convert JSON string to Map
				Map<String, Object> customerOrderReplicaMap = objectMapper
						.readValue(customerOrderReplica.getCustomerOrderDetails(), Map.class);

				Object customerOrder = customerOrderReplicaMap.get("customerOrder");
				Map<String, Object> items = (Map<String, Object>) customerOrderReplicaMap.get("items");

				Object quanityList = items.get("quantity");

				Map customers = customerDetailsDao.getByContactNumberAndApartment(
						customerOrderReplica.getContactNumber(), customerOrderReplica.getApartmentId());

				// Apartments apartments =
				// apartmentDao.getApartmentById(customerOrderReplica.getApartmentId());
				customerOrderReplica.setApartmentName(
						customers.get("apartmentName") != null ? (String) customers.get("apartmentName") : null);

				customerOrderReplica.setStreetName(
						customers.get("streetName") != null ? (String) customers.get("streetName") : null);

				customerOrderReplica.setCustomerDetails(customers);

				customerOrderReplica.setCustomerOrder(customerOrder);
				customerOrderReplica.setQuatityList(quanityList);

			} catch (Exception e) {
				e.printStackTrace();
			}

		});

		return CustomerOrderReplica;

	}

	@Override
	public List<CustomerOrderReplica> getAllCustomerOrderReplicasBySchedule(Map<String, Object> request) {

		String statusType = null;
		String searchQuery = null;

		String scheduleId = null;

		Schedule schedule = scheduleDao.getlatestScheduleCustomers();

		if (schedule != null) {

			try {
				scheduleId = schedule.getsId() != null ? schedule.getsId().toString() : null;
			} catch (Exception e) {
				e.printStackTrace();
			}
		}

		statusType = request.containsKey("statusType") ? ((String) request.get("statusType")).toLowerCase() : "Success";

		List<CustomerOrderReplica> CustomerOrderReplica = customerOrderReplicaDoa
				.getAllcustomerOrderReplicaBySchdeule(statusType, scheduleId);

		ObjectMapper objectMapper = new ObjectMapper();
		CustomerOrderReplica.forEach(customerOrderReplica -> {
			try {

				// convert JSON string to Map
				Map<String, Object> customerOrderReplicaMap = objectMapper
						.readValue(customerOrderReplica.getCustomerOrderDetails(), Map.class);

				Object customerOrder = customerOrderReplicaMap.get("customerOrder");
				Map<String, Object> items = (Map<String, Object>) customerOrderReplicaMap.get("items");

				Object quanityList = items.get("quantity");
				Map customers = customerDetailsDao.getByContactNumberAndApartment(
						customerOrderReplica.getContactNumber(), customerOrderReplica.getApartmentId());

				System.out.println("customers" + customers.get("customerName"));

				// Apartments apartments =
				// apartmentDao.getApartmentById(customerOrderReplica.getApartmentId());
				customerOrderReplica.setApartmentName(
						customers.get("apartmentName") != null ? (String) customers.get("apartmentName") : null);

				customerOrderReplica.setCustomerDetails(customers);

				customerOrderReplica.setCustomerOrder(customerOrder);
				customerOrderReplica.setQuatityList(quanityList);

			} catch (Exception e) {
				e.printStackTrace();
			}

		});

		return CustomerOrderReplica;

	}

	@Override
	public CustomerOrderReplica getCustomerOrderReplicaByCartId(String cartId) {

		CustomerOrderReplica CustomerOrderReplica = customerOrderReplicaDoa.getCustomerOrderByCartId(cartId,
				currentUser.getContactNumber());

		ObjectMapper objectMapper = new ObjectMapper();
		try {

			// convert JSON string to Map
			Map<String, Object> customerOrderReplicaMap = objectMapper
					.readValue(CustomerOrderReplica.getCustomerOrderDetails(), Map.class);

			Object customerOrder = customerOrderReplicaMap.get("customerOrder");
			Map<String, Object> items = (Map<String, Object>) customerOrderReplicaMap.get("items");

			Object quanityList = items.get("quantity");
			Map customers = customerDetailsDao.getByContactNumberAndApartment(CustomerOrderReplica.getContactNumber(),
					CustomerOrderReplica.getApartmentId());

			System.out.println("customers" + customers.get("customerName"));

			// Apartments apartments =
			// apartmentDao.getApartmentById(customerOrderReplica.getApartmentId());
			CustomerOrderReplica.setApartmentName(
					customers.get("apartmentName") != null ? (String) customers.get("apartmentName") : null);

			CustomerOrderReplica.setCustomerDetails(customers);

			CustomerOrderReplica.setCustomerOrder(customerOrder);
			CustomerOrderReplica.setQuatityList(quanityList);

		} catch (Exception e) {
			e.printStackTrace();
		}

		return CustomerOrderReplica;

	}

	@Override
	public Map createCustomerOrderReplica(CustomerOrderReplicaRequest customerOrderReplicaRequest, String contactNumber,
			Integer aparmentId) {

		if (customerOrderReplicaRequest.getRazorPayRequest() != null) {

//			Map razorPay = consumerService.createRazorPayOrder(customerOrderReplicaRequest.getRazorPayRequest());
//			customerOrderReplicaRequest.setOrderId(razorPay.get("order") != null ? (String)((RazorPay) razorPay.get("order")).getId() : null);	
//	
//			createCustomerOrderReplicaService(customerOrderReplicaRequest, contactNumber, aparmentId);
//
//			razorPay.put("cartId", customerOrderReplicaRequest.getCartId());

			Map customerOrderReplicaMap = new HashMap<>();

			Map orderId = new HashMap<>();
			String transactionId = getMerchantTransactionId();
			orderId.put("id", transactionId);

			customerOrderReplicaMap.put("order", orderId);

			customerOrderReplicaRequest.setOrderId(transactionId);
			createCustomerOrderReplicaService(customerOrderReplicaRequest, contactNumber, aparmentId);

			customerOrderReplicaMap.put("cartId", customerOrderReplicaRequest.getCartId());

			try {
				customerOrderReplicaMap.put("phonePeResponse",
						phonepeServiceImpl.initiatePhonepePayment(transactionId,
								Integer.valueOf(customerOrderReplicaRequest.getRazorPayRequest().getAmount()),
								contactNumber, customerOrderReplicaRequest.getRedirectUrl(), customerOrderReplicaRequest.getCallBackUrl()));

			} catch (Exception e) {
				e.printStackTrace();
				customerOrderReplicaMap.put("phonePeResponse", new HashedMap<>());
			}

			return customerOrderReplicaMap;

		} else {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST,
					"paymentDetails transcation Details are mandatory");
		}

	}

	private static String getMerchantTransactionId() {

		return "OD_" + MerchantTransactionIdGenerator.getRandomString();
	}


	@Override
	public List<CustomerOrderReplica> getCustomerOrderByMoblieNo(String contactNumber,Integer aid) {
		
		Schedule latestschedule = customerOrderReplicaDoa.getlatestschedule();
		
		if (latestschedule != null && latestschedule.getCreationTimestamp()!=null) {
			
	        if (latestschedule.getStatus().equals(UserStatus.ACTIVE)) {
	        	
	        	Customers customer = customerDetailsDao.getByContactNoAndApartment(contactNumber, aid);
	        	if (customer != null) { // Ensure the customer exists
	        		List<CustomerOrder> customerOrderList = customerOrderReplicaDoa.getListCustomerOrderByCustomerId(customer.getCtid());
	        		
	                double totalOrderAmount = 0.0;
	       
                if (customerOrderList != null && !customerOrderList.isEmpty() && customerOrderList.add(customerOrder). {
                    for (CustomerOrder customerOrder : customerOrderList) {
                        Double orderAmount = customerOrder.getAmount();
                        
                        if(orderAmount)
                        if (orderAmount != null) {
                            totalOrderAmount += orderAmount;
                            if(totalOrderAmount>200) {
                            	totalOrderAmount+customerOrder
                            }
                        }
                    }
                    System.out.println("Total Order Amount: " + totalOrderAmount);
                    List<CustomerOrderReplica> customerOrderReplicas = new ArrayList<>();
                    return customerOrderReplicas;
                } else {
                    return Collections.emptyList(); // or return null or an appropriate value
                }
            } else {
              
                return null; // or an appropriate value
            }
        } else {
            // Handle the case when the latest schedule is not active
            return null; // or an appropriate value
        }
    } else {
        // Handle the case when there is no latest schedule or its creation timestamp is null
        return null; // or an appropriate value
    }
	}
}



----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3003)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-09-21 15:03:54.092
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3003)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-09-21 15:03:54.094
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3003)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2023-09-21 15:03:54.904
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.xyram.daydrop.serviceimpl;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.transaction.Transactional;

import org.apache.commons.collections4.map.HashedMap;
import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.server.ResponseStatusException;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.xyram.daydrop.admin.model.CurrentUser;
import com.xyram.daydrop.basemodel.Base64Wrapper;
import com.xyram.daydrop.basemodel.MerchantTransactionIdGenerator;
import com.xyram.daydrop.basemodel.PhonepeSerializer;
import com.xyram.daydrop.dao.ApartmentDao;
import com.xyram.daydrop.dao.CustomerDetailsDao;
import com.xyram.daydrop.dao.CustomerOrderDao;
import com.xyram.daydrop.dao.CustomerOrderReplicaDoa;
import com.xyram.daydrop.dao.SheduleDao;
import com.xyram.daydrop.enumtypes.UserStatus;
import com.xyram.daydrop.model.Apartments;
import com.xyram.daydrop.model.CustomerOrder;
import com.xyram.daydrop.model.CustomerOrderReplica;
import com.xyram.daydrop.model.Customers;
import com.xyram.daydrop.model.Schedule;
import com.xyram.daydrop.modelMapper.PaymentInstrument;
import com.xyram.daydrop.modelMapper.PhonePePayModel;
import com.xyram.daydrop.request.CustomerOrderReplicaRequest;
import com.xyram.daydrop.response.RazorPayRequest;
import com.xyram.daydrop.service.CustomerOrderPriceService;
import com.xyram.daydrop.service.CustomerOrderReplicaService;
import com.xyram.daydrop.util.HashEncoder;
import com.xyram.daydrop.util.RazorPay;
import com.xyram.daydrop.service.ConsumerService;

@Transactional
@Service
public class CustomerOrderReplicaServiceImpl implements CustomerOrderReplicaService {

	@Autowired
	CustomerOrderReplicaDoa customerOrderReplicaDoa;

	@Autowired
	ApartmentDao apartmentDao;

	@Autowired
	SheduleDao scheduleDao;

	@Autowired
	CustomerDetailsDao customerDetailsDao;

	@Autowired
	ConsumerService consumerService;

	@Autowired
	CurrentUser currentUser;

	@Autowired
	PhonepeServiceImpl phonepeServiceImpl;

	@Value("${merchant_id}")
	private String merchantId;

	@Value("${salt_key}")
	private String saltKey;

	@Value("${salt_index}")
	private String saltIndex;

	@Override
	public Map createCustomerOrderReplicaService(CustomerOrderReplicaRequest customerOrderReplicaRequest,
			String contactNumber, Integer aparmentId)

	{

		Map response = new HashedMap<>();

		response.put("message", "success");
		CustomerOrderReplica customerOrderReplica = null;

		if (customerOrderReplicaRequest.getCartId() == null) {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "cartId is mandatory ");
		}
		long razorPayCount = 0;
		if (customerOrderReplicaRequest.getOrderId() != null) {

			razorPayCount = customerOrderReplicaDoa.getRazorPayExistByCartId(customerOrderReplicaRequest.getOrderId());
		}

		if (customerOrderReplicaRequest.getCustomerDetails() == null) {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Order Details  is mandatory ");
		}

		customerOrderReplica = customerOrderReplicaDoa.getCustomerOrderByCartId(customerOrderReplicaRequest.getCartId(),
				contactNumber);

		if (customerOrderReplica != null) {
			customerOrderReplica.setCartId(customerOrderReplica.getCartId());

			if (customerOrderReplica.isOrdered()) {
				throw new ResponseStatusException(HttpStatus.CONFLICT, "Your Order is Placed With cart Details");
			}

//			if (razorPayCount >= 1 && !(customerOrderReplica.getRazorPayOrderId() != null
//					&& customerOrderReplica.getRazorPayOrderId().equals(customerOrderReplicaRequest.getOrderId()))) {
//				throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Razor Pay Id Are already Exist ");
//			}

			customerOrderReplica.setStatusType(customerOrderReplicaRequest.getStatusType());
			customerOrderReplica.setContactNumber(contactNumber);
			customerOrderReplica.setApartmentId(aparmentId);

			customerOrderReplica.setAttempts(customerOrderReplica.getAttempts() + 1);
			customerOrderReplica.setUpdatedTime(new Date());

			customerOrderReplica.setRazorPayOrderId(customerOrderReplicaRequest.getOrderId());

			try {

				JSONObject obj = new JSONObject(customerOrderReplicaRequest.getCustomerDetails());

				customerOrderReplica.setCustomerOrderDetails(obj != null ? obj.toString() : null);

				customerOrderReplicaDoa.updateCustomer(customerOrderReplica);
				return response;

			} catch (Exception e) {
				customerOrderReplica.setCustomerOrderDetails(customerOrderReplicaRequest.getCustomerDetails() != null
						? customerOrderReplicaRequest.getCustomerDetails().toString()
						: null);
				customerOrderReplicaDoa.updateCustomer(customerOrderReplica);
				return response;
			}

		} else {

			customerOrderReplica = new CustomerOrderReplica();
			customerOrderReplica.setContactNumber(contactNumber);
			customerOrderReplica.setApartmentId(aparmentId);
			customerOrderReplica.setCartId(customerOrderReplicaRequest.getCartId());
			customerOrderReplica.setStatusType(customerOrderReplicaRequest.getStatusType());

			if (razorPayCount > 0) {
				throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Razor Pay Id Are already Exist ");
			}

			customerOrderReplica.setRazorPayOrderId(customerOrderReplicaRequest.getOrderId());

			Schedule schedule = scheduleDao.getlatestScheduleCustomers();

			if (schedule != null) {

				try {
					customerOrderReplica.setSchedule(schedule.getsId() != null ? schedule.getsId().toString() : null);
				} catch (Exception e) {
					e.printStackTrace();
				}
			} else {
				throw new ResponseStatusException(HttpStatus.BAD_REQUEST,
						"Sorry We Are Not Accepting Any Order Right now");

			}

			try {

				JSONObject obj = new JSONObject(customerOrderReplicaRequest.getCustomerDetails());

				customerOrderReplica.setCustomerOrderDetails(obj != null ? obj.toString() : null);

				customerOrderReplicaDoa.updateCustomer(customerOrderReplica);
				return response;

			} catch (Exception e) {
				customerOrderReplica.setCustomerOrderDetails(customerOrderReplicaRequest.getCustomerDetails() != null
						? customerOrderReplicaRequest.getCustomerDetails().toString()
						: null);
				customerOrderReplicaDoa.updateCustomer(customerOrderReplica);
				return response;
			}

		}

	}

	@Override
	public List<CustomerOrderReplica> getAllCustomerOrderReplicas(Map<String, Object> request) {

		String statusType = null;
		String searchQuery = null;

		String schedule = null;

		Map filter = request.containsKey("filters") ? (Map) request.get("filters") : null;
		if (filter != null) {
			statusType = filter.containsKey("statusType") ? ((String) filter.get("statusType")).toLowerCase() : null;
			searchQuery = filter.containsKey("searchQuery") ? ((String) filter.get("searchQuery")).toLowerCase() : null;
			schedule = filter.containsKey("schedule") ? (String.valueOf(filter.get("schedule"))) : null;

		}

		List<CustomerOrderReplica> CustomerOrderReplica = customerOrderReplicaDoa
				.getAllcustomerOrderReplica(searchQuery, statusType, schedule);

		ObjectMapper objectMapper = new ObjectMapper();
		CustomerOrderReplica.forEach(customerOrderReplica -> {
			try {

				// convert JSON string to Map
				Map<String, Object> customerOrderReplicaMap = objectMapper
						.readValue(customerOrderReplica.getCustomerOrderDetails(), Map.class);

				Object customerOrder = customerOrderReplicaMap.get("customerOrder");
				Map<String, Object> items = (Map<String, Object>) customerOrderReplicaMap.get("items");

				Object quanityList = items.get("quantity");

				Map customers = customerDetailsDao.getByContactNumberAndApartment(
						customerOrderReplica.getContactNumber(), customerOrderReplica.getApartmentId());

				// Apartments apartments =
				// apartmentDao.getApartmentById(customerOrderReplica.getApartmentId());
				customerOrderReplica.setApartmentName(
						customers.get("apartmentName") != null ? (String) customers.get("apartmentName") : null);

				customerOrderReplica.setStreetName(
						customers.get("streetName") != null ? (String) customers.get("streetName") : null);

				customerOrderReplica.setCustomerDetails(customers);

				customerOrderReplica.setCustomerOrder(customerOrder);
				customerOrderReplica.setQuatityList(quanityList);

			} catch (Exception e) {
				e.printStackTrace();
			}

		});

		return CustomerOrderReplica;

	}

	@Override
	public List<CustomerOrderReplica> getAllCustomerOrderReplicasBySchedule(Map<String, Object> request) {

		String statusType = null;
		String searchQuery = null;

		String scheduleId = null;

		Schedule schedule = scheduleDao.getlatestScheduleCustomers();

		if (schedule != null) {

			try {
				scheduleId = schedule.getsId() != null ? schedule.getsId().toString() : null;
			} catch (Exception e) {
				e.printStackTrace();
			}
		}

		statusType = request.containsKey("statusType") ? ((String) request.get("statusType")).toLowerCase() : "Success";

		List<CustomerOrderReplica> CustomerOrderReplica = customerOrderReplicaDoa
				.getAllcustomerOrderReplicaBySchdeule(statusType, scheduleId);

		ObjectMapper objectMapper = new ObjectMapper();
		CustomerOrderReplica.forEach(customerOrderReplica -> {
			try {

				// convert JSON string to Map
				Map<String, Object> customerOrderReplicaMap = objectMapper
						.readValue(customerOrderReplica.getCustomerOrderDetails(), Map.class);

				Object customerOrder = customerOrderReplicaMap.get("customerOrder");
				Map<String, Object> items = (Map<String, Object>) customerOrderReplicaMap.get("items");

				Object quanityList = items.get("quantity");
				Map customers = customerDetailsDao.getByContactNumberAndApartment(
						customerOrderReplica.getContactNumber(), customerOrderReplica.getApartmentId());

				System.out.println("customers" + customers.get("customerName"));

				// Apartments apartments =
				// apartmentDao.getApartmentById(customerOrderReplica.getApartmentId());
				customerOrderReplica.setApartmentName(
						customers.get("apartmentName") != null ? (String) customers.get("apartmentName") : null);

				customerOrderReplica.setCustomerDetails(customers);

				customerOrderReplica.setCustomerOrder(customerOrder);
				customerOrderReplica.setQuatityList(quanityList);

			} catch (Exception e) {
				e.printStackTrace();
			}

		});

		return CustomerOrderReplica;

	}

	@Override
	public CustomerOrderReplica getCustomerOrderReplicaByCartId(String cartId) {

		CustomerOrderReplica CustomerOrderReplica = customerOrderReplicaDoa.getCustomerOrderByCartId(cartId,
				currentUser.getContactNumber());

		ObjectMapper objectMapper = new ObjectMapper();
		try {

			// convert JSON string to Map
			Map<String, Object> customerOrderReplicaMap = objectMapper
					.readValue(CustomerOrderReplica.getCustomerOrderDetails(), Map.class);

			Object customerOrder = customerOrderReplicaMap.get("customerOrder");
			Map<String, Object> items = (Map<String, Object>) customerOrderReplicaMap.get("items");

			Object quanityList = items.get("quantity");
			Map customers = customerDetailsDao.getByContactNumberAndApartment(CustomerOrderReplica.getContactNumber(),
					CustomerOrderReplica.getApartmentId());

			System.out.println("customers" + customers.get("customerName"));

			// Apartments apartments =
			// apartmentDao.getApartmentById(customerOrderReplica.getApartmentId());
			CustomerOrderReplica.setApartmentName(
					customers.get("apartmentName") != null ? (String) customers.get("apartmentName") : null);

			CustomerOrderReplica.setCustomerDetails(customers);

			CustomerOrderReplica.setCustomerOrder(customerOrder);
			CustomerOrderReplica.setQuatityList(quanityList);

		} catch (Exception e) {
			e.printStackTrace();
		}

		return CustomerOrderReplica;

	}

	@Override
	public Map createCustomerOrderReplica(CustomerOrderReplicaRequest customerOrderReplicaRequest, String contactNumber,
			Integer aparmentId) {

		if (customerOrderReplicaRequest.getRazorPayRequest() != null) {

//			Map razorPay = consumerService.createRazorPayOrder(customerOrderReplicaRequest.getRazorPayRequest());
//			customerOrderReplicaRequest.setOrderId(razorPay.get("order") != null ? (String)((RazorPay) razorPay.get("order")).getId() : null);	
//	
//			createCustomerOrderReplicaService(customerOrderReplicaRequest, contactNumber, aparmentId);
//
//			razorPay.put("cartId", customerOrderReplicaRequest.getCartId());

			Map customerOrderReplicaMap = new HashMap<>();

			Map orderId = new HashMap<>();
			String transactionId = getMerchantTransactionId();
			orderId.put("id", transactionId);

			customerOrderReplicaMap.put("order", orderId);

			customerOrderReplicaRequest.setOrderId(transactionId);
			createCustomerOrderReplicaService(customerOrderReplicaRequest, contactNumber, aparmentId);

			customerOrderReplicaMap.put("cartId", customerOrderReplicaRequest.getCartId());

			try {
				customerOrderReplicaMap.put("phonePeResponse",
						phonepeServiceImpl.initiatePhonepePayment(transactionId,
								Integer.valueOf(customerOrderReplicaRequest.getRazorPayRequest().getAmount()),
								contactNumber, customerOrderReplicaRequest.getRedirectUrl(), customerOrderReplicaRequest.getCallBackUrl()));

			} catch (Exception e) {
				e.printStackTrace();
				customerOrderReplicaMap.put("phonePeResponse", new HashedMap<>());
			}

			return customerOrderReplicaMap;

		} else {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST,
					"paymentDetails transcation Details are mandatory");
		}

	}

	private static String getMerchantTransactionId() {

		return "OD_" + MerchantTransactionIdGenerator.getRandomString();
	}


	@Override
	public List<CustomerOrderReplica> getCustomerOrderByMoblieNo(String contactNumber,Integer aid) {
		
		Schedule latestschedule = customerOrderReplicaDoa.getlatestschedule();
		
		if (latestschedule != null && latestschedule.getCreationTimestamp()!=null) {
			
	        if (latestschedule.getStatus().equals(UserStatus.ACTIVE)) {
	        	
	        	Customers customer = customerDetailsDao.getByContactNoAndApartment(contactNumber, aid);
	        	if (customer != null) { // Ensure the customer exists
	        		List<CustomerOrder> customerOrderList = customerOrderReplicaDoa.getListCustomerOrderByCustomerId(customer.getCtid());
	        		
	                double totalOrderAmount = 0.0;
	       
                if (customerOrderList != null && !customerOrderList.isEmpty() && customerOrderList.add(customerOrder). {
                    for (CustomerOrder customerOrder : customerOrderList) {
                        Double orderAmount = customerOrder.getAmount();
                        
                        if(orderAmount)
                        if (orderAmount != null) {
                            totalOrderAmount += orderAmount;
                            if(totalOrderAmount>200) {
                            	totalOrderAmount+customerOrder
                            }
                        }
                    }
                    System.out.println("Total Order Amount: " + totalOrderAmount);
                    List<CustomerOrderReplica> customerOrderReplicas = new ArrayList<>();
                    return customerOrderReplicas;
                } else {
                    return Collections.emptyList(); // or return null or an appropriate value
                }
            } else {
              
                return null; // or an appropriate value
            }
        } else {
            // Handle the case when the latest schedule is not active
            return null; // or an appropriate value
        }
    } else {
        // Handle the case when there is no latest schedule or its creation timestamp is null
        return null; // or an appropriate value
    }
	}
}



----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3003)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1003)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:799)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:743)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.lambda$0(LSJavaHoverProvider.java:68)
	at java.base/java.util.concurrent.CompletableFuture$AsyncRun.run(CompletableFuture.java:1804)
	at java.base/java.util.concurrent.CompletableFuture$AsyncRun.exec(CompletableFuture.java:1796)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:373)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1182)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1655)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1622)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:165)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-09-21 15:03:54.907
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3003)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1003)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:799)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:743)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.lambda$0(LSJavaHoverProvider.java:68)
	at java.base/java.util.concurrent.CompletableFuture$AsyncRun.run(CompletableFuture.java:1804)
	at java.base/java.util.concurrent.CompletableFuture$AsyncRun.exec(CompletableFuture.java:1796)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:373)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1182)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1655)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1622)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:165)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-09-21 15:03:54.909
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3003)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1003)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:799)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:743)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.lambda$0(LSJavaHoverProvider.java:68)
	at java.base/java.util.concurrent.CompletableFuture$AsyncRun.run(CompletableFuture.java:1804)
	at java.base/java.util.concurrent.CompletableFuture$AsyncRun.exec(CompletableFuture.java:1796)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:373)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1182)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1655)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1622)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:165)

!ENTRY org.eclipse.jdt.core 4 4 2023-09-21 15:03:54.970
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.xyram.daydrop.serviceimpl;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.transaction.Transactional;

import org.apache.commons.collections4.map.HashedMap;
import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.server.ResponseStatusException;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.xyram.daydrop.admin.model.CurrentUser;
import com.xyram.daydrop.basemodel.Base64Wrapper;
import com.xyram.daydrop.basemodel.MerchantTransactionIdGenerator;
import com.xyram.daydrop.basemodel.PhonepeSerializer;
import com.xyram.daydrop.dao.ApartmentDao;
import com.xyram.daydrop.dao.CustomerDetailsDao;
import com.xyram.daydrop.dao.CustomerOrderDao;
import com.xyram.daydrop.dao.CustomerOrderReplicaDoa;
import com.xyram.daydrop.dao.SheduleDao;
import com.xyram.daydrop.enumtypes.UserStatus;
import com.xyram.daydrop.model.Apartments;
import com.xyram.daydrop.model.CustomerOrder;
import com.xyram.daydrop.model.CustomerOrderReplica;
import com.xyram.daydrop.model.Customers;
import com.xyram.daydrop.model.Schedule;
import com.xyram.daydrop.modelMapper.PaymentInstrument;
import com.xyram.daydrop.modelMapper.PhonePePayModel;
import com.xyram.daydrop.request.CustomerOrderReplicaRequest;
import com.xyram.daydrop.response.RazorPayRequest;
import com.xyram.daydrop.service.CustomerOrderPriceService;
import com.xyram.daydrop.service.CustomerOrderReplicaService;
import com.xyram.daydrop.util.HashEncoder;
import com.xyram.daydrop.util.RazorPay;
import com.xyram.daydrop.service.ConsumerService;

@Transactional
@Service
public class CustomerOrderReplicaServiceImpl implements CustomerOrderReplicaService {

	@Autowired
	CustomerOrderReplicaDoa customerOrderReplicaDoa;

	@Autowired
	ApartmentDao apartmentDao;

	@Autowired
	SheduleDao scheduleDao;

	@Autowired
	CustomerDetailsDao customerDetailsDao;

	@Autowired
	ConsumerService consumerService;

	@Autowired
	CurrentUser currentUser;

	@Autowired
	PhonepeServiceImpl phonepeServiceImpl;

	@Value("${merchant_id}")
	private String merchantId;

	@Value("${salt_key}")
	private String saltKey;

	@Value("${salt_index}")
	private String saltIndex;

	@Override
	public Map createCustomerOrderReplicaService(CustomerOrderReplicaRequest customerOrderReplicaRequest,
			String contactNumber, Integer aparmentId)

	{

		Map response = new HashedMap<>();

		response.put("message", "success");
		CustomerOrderReplica customerOrderReplica = null;

		if (customerOrderReplicaRequest.getCartId() == null) {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "cartId is mandatory ");
		}
		long razorPayCount = 0;
		if (customerOrderReplicaRequest.getOrderId() != null) {

			razorPayCount = customerOrderReplicaDoa.getRazorPayExistByCartId(customerOrderReplicaRequest.getOrderId());
		}

		if (customerOrderReplicaRequest.getCustomerDetails() == null) {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Order Details  is mandatory ");
		}

		customerOrderReplica = customerOrderReplicaDoa.getCustomerOrderByCartId(customerOrderReplicaRequest.getCartId(),
				contactNumber);

		if (customerOrderReplica != null) {
			customerOrderReplica.setCartId(customerOrderReplica.getCartId());

			if (customerOrderReplica.isOrdered()) {
				throw new ResponseStatusException(HttpStatus.CONFLICT, "Your Order is Placed With cart Details");
			}

//			if (razorPayCount >= 1 && !(customerOrderReplica.getRazorPayOrderId() != null
//					&& customerOrderReplica.getRazorPayOrderId().equals(customerOrderReplicaRequest.getOrderId()))) {
//				throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Razor Pay Id Are already Exist ");
//			}

			customerOrderReplica.setStatusType(customerOrderReplicaRequest.getStatusType());
			customerOrderReplica.setContactNumber(contactNumber);
			customerOrderReplica.setApartmentId(aparmentId);

			customerOrderReplica.setAttempts(customerOrderReplica.getAttempts() + 1);
			customerOrderReplica.setUpdatedTime(new Date());

			customerOrderReplica.setRazorPayOrderId(customerOrderReplicaRequest.getOrderId());

			try {

				JSONObject obj = new JSONObject(customerOrderReplicaRequest.getCustomerDetails());

				customerOrderReplica.setCustomerOrderDetails(obj != null ? obj.toString() : null);

				customerOrderReplicaDoa.updateCustomer(customerOrderReplica);
				return response;

			} catch (Exception e) {
				customerOrderReplica.setCustomerOrderDetails(customerOrderReplicaRequest.getCustomerDetails() != null
						? customerOrderReplicaRequest.getCustomerDetails().toString()
						: null);
				customerOrderReplicaDoa.updateCustomer(customerOrderReplica);
				return response;
			}

		} else {

			customerOrderReplica = new CustomerOrderReplica();
			customerOrderReplica.setContactNumber(contactNumber);
			customerOrderReplica.setApartmentId(aparmentId);
			customerOrderReplica.setCartId(customerOrderReplicaRequest.getCartId());
			customerOrderReplica.setStatusType(customerOrderReplicaRequest.getStatusType());

			if (razorPayCount > 0) {
				throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Razor Pay Id Are already Exist ");
			}

			customerOrderReplica.setRazorPayOrderId(customerOrderReplicaRequest.getOrderId());

			Schedule schedule = scheduleDao.getlatestScheduleCustomers();

			if (schedule != null) {

				try {
					customerOrderReplica.setSchedule(schedule.getsId() != null ? schedule.getsId().toString() : null);
				} catch (Exception e) {
					e.printStackTrace();
				}
			} else {
				throw new ResponseStatusException(HttpStatus.BAD_REQUEST,
						"Sorry We Are Not Accepting Any Order Right now");

			}

			try {

				JSONObject obj = new JSONObject(customerOrderReplicaRequest.getCustomerDetails());

				customerOrderReplica.setCustomerOrderDetails(obj != null ? obj.toString() : null);

				customerOrderReplicaDoa.updateCustomer(customerOrderReplica);
				return response;

			} catch (Exception e) {
				customerOrderReplica.setCustomerOrderDetails(customerOrderReplicaRequest.getCustomerDetails() != null
						? customerOrderReplicaRequest.getCustomerDetails().toString()
						: null);
				customerOrderReplicaDoa.updateCustomer(customerOrderReplica);
				return response;
			}

		}

	}

	@Override
	public List<CustomerOrderReplica> getAllCustomerOrderReplicas(Map<String, Object> request) {

		String statusType = null;
		String searchQuery = null;

		String schedule = null;

		Map filter = request.containsKey("filters") ? (Map) request.get("filters") : null;
		if (filter != null) {
			statusType = filter.containsKey("statusType") ? ((String) filter.get("statusType")).toLowerCase() : null;
			searchQuery = filter.containsKey("searchQuery") ? ((String) filter.get("searchQuery")).toLowerCase() : null;
			schedule = filter.containsKey("schedule") ? (String.valueOf(filter.get("schedule"))) : null;

		}

		List<CustomerOrderReplica> CustomerOrderReplica = customerOrderReplicaDoa
				.getAllcustomerOrderReplica(searchQuery, statusType, schedule);

		ObjectMapper objectMapper = new ObjectMapper();
		CustomerOrderReplica.forEach(customerOrderReplica -> {
			try {

				// convert JSON string to Map
				Map<String, Object> customerOrderReplicaMap = objectMapper
						.readValue(customerOrderReplica.getCustomerOrderDetails(), Map.class);

				Object customerOrder = customerOrderReplicaMap.get("customerOrder");
				Map<String, Object> items = (Map<String, Object>) customerOrderReplicaMap.get("items");

				Object quanityList = items.get("quantity");

				Map customers = customerDetailsDao.getByContactNumberAndApartment(
						customerOrderReplica.getContactNumber(), customerOrderReplica.getApartmentId());

				// Apartments apartments =
				// apartmentDao.getApartmentById(customerOrderReplica.getApartmentId());
				customerOrderReplica.setApartmentName(
						customers.get("apartmentName") != null ? (String) customers.get("apartmentName") : null);

				customerOrderReplica.setStreetName(
						customers.get("streetName") != null ? (String) customers.get("streetName") : null);

				customerOrderReplica.setCustomerDetails(customers);

				customerOrderReplica.setCustomerOrder(customerOrder);
				customerOrderReplica.setQuatityList(quanityList);

			} catch (Exception e) {
				e.printStackTrace();
			}

		});

		return CustomerOrderReplica;

	}

	@Override
	public List<CustomerOrderReplica> getAllCustomerOrderReplicasBySchedule(Map<String, Object> request) {

		String statusType = null;
		String searchQuery = null;

		String scheduleId = null;

		Schedule schedule = scheduleDao.getlatestScheduleCustomers();

		if (schedule != null) {

			try {
				scheduleId = schedule.getsId() != null ? schedule.getsId().toString() : null;
			} catch (Exception e) {
				e.printStackTrace();
			}
		}

		statusType = request.containsKey("statusType") ? ((String) request.get("statusType")).toLowerCase() : "Success";

		List<CustomerOrderReplica> CustomerOrderReplica = customerOrderReplicaDoa
				.getAllcustomerOrderReplicaBySchdeule(statusType, scheduleId);

		ObjectMapper objectMapper = new ObjectMapper();
		CustomerOrderReplica.forEach(customerOrderReplica -> {
			try {

				// convert JSON string to Map
				Map<String, Object> customerOrderReplicaMap = objectMapper
						.readValue(customerOrderReplica.getCustomerOrderDetails(), Map.class);

				Object customerOrder = customerOrderReplicaMap.get("customerOrder");
				Map<String, Object> items = (Map<String, Object>) customerOrderReplicaMap.get("items");

				Object quanityList = items.get("quantity");
				Map customers = customerDetailsDao.getByContactNumberAndApartment(
						customerOrderReplica.getContactNumber(), customerOrderReplica.getApartmentId());

				System.out.println("customers" + customers.get("customerName"));

				// Apartments apartments =
				// apartmentDao.getApartmentById(customerOrderReplica.getApartmentId());
				customerOrderReplica.setApartmentName(
						customers.get("apartmentName") != null ? (String) customers.get("apartmentName") : null);

				customerOrderReplica.setCustomerDetails(customers);

				customerOrderReplica.setCustomerOrder(customerOrder);
				customerOrderReplica.setQuatityList(quanityList);

			} catch (Exception e) {
				e.printStackTrace();
			}

		});

		return CustomerOrderReplica;

	}

	@Override
	public CustomerOrderReplica getCustomerOrderReplicaByCartId(String cartId) {

		CustomerOrderReplica CustomerOrderReplica = customerOrderReplicaDoa.getCustomerOrderByCartId(cartId,
				currentUser.getContactNumber());

		ObjectMapper objectMapper = new ObjectMapper();
		try {

			// convert JSON string to Map
			Map<String, Object> customerOrderReplicaMap = objectMapper
					.readValue(CustomerOrderReplica.getCustomerOrderDetails(), Map.class);

			Object customerOrder = customerOrderReplicaMap.get("customerOrder");
			Map<String, Object> items = (Map<String, Object>) customerOrderReplicaMap.get("items");

			Object quanityList = items.get("quantity");
			Map customers = customerDetailsDao.getByContactNumberAndApartment(CustomerOrderReplica.getContactNumber(),
					CustomerOrderReplica.getApartmentId());

			System.out.println("customers" + customers.get("customerName"));

			// Apartments apartments =
			// apartmentDao.getApartmentById(customerOrderReplica.getApartmentId());
			CustomerOrderReplica.setApartmentName(
					customers.get("apartmentName") != null ? (String) customers.get("apartmentName") : null);

			CustomerOrderReplica.setCustomerDetails(customers);

			CustomerOrderReplica.setCustomerOrder(customerOrder);
			CustomerOrderReplica.setQuatityList(quanityList);

		} catch (Exception e) {
			e.printStackTrace();
		}

		return CustomerOrderReplica;

	}

	@Override
	public Map createCustomerOrderReplica(CustomerOrderReplicaRequest customerOrderReplicaRequest, String contactNumber,
			Integer aparmentId) {

		if (customerOrderReplicaRequest.getRazorPayRequest() != null) {

//			Map razorPay = consumerService.createRazorPayOrder(customerOrderReplicaRequest.getRazorPayRequest());
//			customerOrderReplicaRequest.setOrderId(razorPay.get("order") != null ? (String)((RazorPay) razorPay.get("order")).getId() : null);	
//	
//			createCustomerOrderReplicaService(customerOrderReplicaRequest, contactNumber, aparmentId);
//
//			razorPay.put("cartId", customerOrderReplicaRequest.getCartId());

			Map customerOrderReplicaMap = new HashMap<>();

			Map orderId = new HashMap<>();
			String transactionId = getMerchantTransactionId();
			orderId.put("id", transactionId);

			customerOrderReplicaMap.put("order", orderId);

			customerOrderReplicaRequest.setOrderId(transactionId);
			createCustomerOrderReplicaService(customerOrderReplicaRequest, contactNumber, aparmentId);

			customerOrderReplicaMap.put("cartId", customerOrderReplicaRequest.getCartId());

			try {
				customerOrderReplicaMap.put("phonePeResponse",
						phonepeServiceImpl.initiatePhonepePayment(transactionId,
								Integer.valueOf(customerOrderReplicaRequest.getRazorPayRequest().getAmount()),
								contactNumber, customerOrderReplicaRequest.getRedirectUrl(), customerOrderReplicaRequest.getCallBackUrl()));

			} catch (Exception e) {
				e.printStackTrace();
				customerOrderReplicaMap.put("phonePeResponse", new HashedMap<>());
			}

			return customerOrderReplicaMap;

		} else {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST,
					"paymentDetails transcation Details are mandatory");
		}

	}

	private static String getMerchantTransactionId() {

		return "OD_" + MerchantTransactionIdGenerator.getRandomString();
	}


	@Override
	public List<CustomerOrderReplica> getCustomerOrderByMoblieNo(String contactNumber,Integer aid) {
		
		Schedule latestschedule = customerOrderReplicaDoa.getlatestschedule();
		
		if (latestschedule != null && latestschedule.getCreationTimestamp()!=null) {
			
	        if (latestschedule.getStatus().equals(UserStatus.ACTIVE)) {
	        	
	        	Customers customer = customerDetailsDao.getByContactNoAndApartment(contactNumber, aid);
	        	if (customer != null) { // Ensure the customer exists
	        		List<CustomerOrder> customerOrderList = customerOrderReplicaDoa.getListCustomerOrderByCustomerId(customer.getCtid());
	        		
	                double totalOrderAmount = 0.0;
	       
                if (customerOrderList != null && !customerOrderList.isEmpty() && customerOrderList.add(customerOrder). {
                    for (CustomerOrder customerOrder : customerOrderList) {
                        Double orderAmount = customerOrder.getAmount();
                        
                        if(orderAmount)
                        if (orderAmount != null) {
                            totalOrderAmount += orderAmount;
                            if(totalOrderAmount>200) {
                            	totalOrderAmount+customerOrder
                            }
                        }
                    }
                    System.out.println("Total Order Amount: " + totalOrderAmount);
                    List<CustomerOrderReplica> customerOrderReplicas = new ArrayList<>();
                    return customerOrderReplicas;
                } else {
                    return Collections.emptyList(); // or return null or an appropriate value
                }
            } else {
              
                return null; // or an appropriate value
            }
        } else {
            // Handle the case when the latest schedule is not active
            return null; // or an appropriate value
        }
    } else {
        // Handle the case when there is no latest schedule or its creation timestamp is null
        return null; // or an appropriate value
    }
	}
}



----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3003)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-09-21 15:03:54.972
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3003)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-09-21 15:03:54.974
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3003)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2023-09-21 15:03:55.050
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.xyram.daydrop.serviceimpl;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.transaction.Transactional;

import org.apache.commons.collections4.map.HashedMap;
import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.server.ResponseStatusException;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.xyram.daydrop.admin.model.CurrentUser;
import com.xyram.daydrop.basemodel.Base64Wrapper;
import com.xyram.daydrop.basemodel.MerchantTransactionIdGenerator;
import com.xyram.daydrop.basemodel.PhonepeSerializer;
import com.xyram.daydrop.dao.ApartmentDao;
import com.xyram.daydrop.dao.CustomerDetailsDao;
import com.xyram.daydrop.dao.CustomerOrderDao;
import com.xyram.daydrop.dao.CustomerOrderReplicaDoa;
import com.xyram.daydrop.dao.SheduleDao;
import com.xyram.daydrop.enumtypes.UserStatus;
import com.xyram.daydrop.model.Apartments;
import com.xyram.daydrop.model.CustomerOrder;
import com.xyram.daydrop.model.CustomerOrderReplica;
import com.xyram.daydrop.model.Customers;
import com.xyram.daydrop.model.Schedule;
import com.xyram.daydrop.modelMapper.PaymentInstrument;
import com.xyram.daydrop.modelMapper.PhonePePayModel;
import com.xyram.daydrop.request.CustomerOrderReplicaRequest;
import com.xyram.daydrop.response.RazorPayRequest;
import com.xyram.daydrop.service.CustomerOrderPriceService;
import com.xyram.daydrop.service.CustomerOrderReplicaService;
import com.xyram.daydrop.util.HashEncoder;
import com.xyram.daydrop.util.RazorPay;
import com.xyram.daydrop.service.ConsumerService;

@Transactional
@Service
public class CustomerOrderReplicaServiceImpl implements CustomerOrderReplicaService {

	@Autowired
	CustomerOrderReplicaDoa customerOrderReplicaDoa;

	@Autowired
	ApartmentDao apartmentDao;

	@Autowired
	SheduleDao scheduleDao;

	@Autowired
	CustomerDetailsDao customerDetailsDao;

	@Autowired
	ConsumerService consumerService;

	@Autowired
	CurrentUser currentUser;

	@Autowired
	PhonepeServiceImpl phonepeServiceImpl;

	@Value("${merchant_id}")
	private String merchantId;

	@Value("${salt_key}")
	private String saltKey;

	@Value("${salt_index}")
	private String saltIndex;

	@Override
	public Map createCustomerOrderReplicaService(CustomerOrderReplicaRequest customerOrderReplicaRequest,
			String contactNumber, Integer aparmentId)

	{

		Map response = new HashedMap<>();

		response.put("message", "success");
		CustomerOrderReplica customerOrderReplica = null;

		if (customerOrderReplicaRequest.getCartId() == null) {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "cartId is mandatory ");
		}
		long razorPayCount = 0;
		if (customerOrderReplicaRequest.getOrderId() != null) {

			razorPayCount = customerOrderReplicaDoa.getRazorPayExistByCartId(customerOrderReplicaRequest.getOrderId());
		}

		if (customerOrderReplicaRequest.getCustomerDetails() == null) {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Order Details  is mandatory ");
		}

		customerOrderReplica = customerOrderReplicaDoa.getCustomerOrderByCartId(customerOrderReplicaRequest.getCartId(),
				contactNumber);

		if (customerOrderReplica != null) {
			customerOrderReplica.setCartId(customerOrderReplica.getCartId());

			if (customerOrderReplica.isOrdered()) {
				throw new ResponseStatusException(HttpStatus.CONFLICT, "Your Order is Placed With cart Details");
			}

//			if (razorPayCount >= 1 && !(customerOrderReplica.getRazorPayOrderId() != null
//					&& customerOrderReplica.getRazorPayOrderId().equals(customerOrderReplicaRequest.getOrderId()))) {
//				throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Razor Pay Id Are already Exist ");
//			}

			customerOrderReplica.setStatusType(customerOrderReplicaRequest.getStatusType());
			customerOrderReplica.setContactNumber(contactNumber);
			customerOrderReplica.setApartmentId(aparmentId);

			customerOrderReplica.setAttempts(customerOrderReplica.getAttempts() + 1);
			customerOrderReplica.setUpdatedTime(new Date());

			customerOrderReplica.setRazorPayOrderId(customerOrderReplicaRequest.getOrderId());

			try {

				JSONObject obj = new JSONObject(customerOrderReplicaRequest.getCustomerDetails());

				customerOrderReplica.setCustomerOrderDetails(obj != null ? obj.toString() : null);

				customerOrderReplicaDoa.updateCustomer(customerOrderReplica);
				return response;

			} catch (Exception e) {
				customerOrderReplica.setCustomerOrderDetails(customerOrderReplicaRequest.getCustomerDetails() != null
						? customerOrderReplicaRequest.getCustomerDetails().toString()
						: null);
				customerOrderReplicaDoa.updateCustomer(customerOrderReplica);
				return response;
			}

		} else {

			customerOrderReplica = new CustomerOrderReplica();
			customerOrderReplica.setContactNumber(contactNumber);
			customerOrderReplica.setApartmentId(aparmentId);
			customerOrderReplica.setCartId(customerOrderReplicaRequest.getCartId());
			customerOrderReplica.setStatusType(customerOrderReplicaRequest.getStatusType());

			if (razorPayCount > 0) {
				throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Razor Pay Id Are already Exist ");
			}

			customerOrderReplica.setRazorPayOrderId(customerOrderReplicaRequest.getOrderId());

			Schedule schedule = scheduleDao.getlatestScheduleCustomers();

			if (schedule != null) {

				try {
					customerOrderReplica.setSchedule(schedule.getsId() != null ? schedule.getsId().toString() : null);
				} catch (Exception e) {
					e.printStackTrace();
				}
			} else {
				throw new ResponseStatusException(HttpStatus.BAD_REQUEST,
						"Sorry We Are Not Accepting Any Order Right now");

			}

			try {

				JSONObject obj = new JSONObject(customerOrderReplicaRequest.getCustomerDetails());

				customerOrderReplica.setCustomerOrderDetails(obj != null ? obj.toString() : null);

				customerOrderReplicaDoa.updateCustomer(customerOrderReplica);
				return response;

			} catch (Exception e) {
				customerOrderReplica.setCustomerOrderDetails(customerOrderReplicaRequest.getCustomerDetails() != null
						? customerOrderReplicaRequest.getCustomerDetails().toString()
						: null);
				customerOrderReplicaDoa.updateCustomer(customerOrderReplica);
				return response;
			}

		}

	}

	@Override
	public List<CustomerOrderReplica> getAllCustomerOrderReplicas(Map<String, Object> request) {

		String statusType = null;
		String searchQuery = null;

		String schedule = null;

		Map filter = request.containsKey("filters") ? (Map) request.get("filters") : null;
		if (filter != null) {
			statusType = filter.containsKey("statusType") ? ((String) filter.get("statusType")).toLowerCase() : null;
			searchQuery = filter.containsKey("searchQuery") ? ((String) filter.get("searchQuery")).toLowerCase() : null;
			schedule = filter.containsKey("schedule") ? (String.valueOf(filter.get("schedule"))) : null;

		}

		List<CustomerOrderReplica> CustomerOrderReplica = customerOrderReplicaDoa
				.getAllcustomerOrderReplica(searchQuery, statusType, schedule);

		ObjectMapper objectMapper = new ObjectMapper();
		CustomerOrderReplica.forEach(customerOrderReplica -> {
			try {

				// convert JSON string to Map
				Map<String, Object> customerOrderReplicaMap = objectMapper
						.readValue(customerOrderReplica.getCustomerOrderDetails(), Map.class);

				Object customerOrder = customerOrderReplicaMap.get("customerOrder");
				Map<String, Object> items = (Map<String, Object>) customerOrderReplicaMap.get("items");

				Object quanityList = items.get("quantity");

				Map customers = customerDetailsDao.getByContactNumberAndApartment(
						customerOrderReplica.getContactNumber(), customerOrderReplica.getApartmentId());

				// Apartments apartments =
				// apartmentDao.getApartmentById(customerOrderReplica.getApartmentId());
				customerOrderReplica.setApartmentName(
						customers.get("apartmentName") != null ? (String) customers.get("apartmentName") : null);

				customerOrderReplica.setStreetName(
						customers.get("streetName") != null ? (String) customers.get("streetName") : null);

				customerOrderReplica.setCustomerDetails(customers);

				customerOrderReplica.setCustomerOrder(customerOrder);
				customerOrderReplica.setQuatityList(quanityList);

			} catch (Exception e) {
				e.printStackTrace();
			}

		});

		return CustomerOrderReplica;

	}

	@Override
	public List<CustomerOrderReplica> getAllCustomerOrderReplicasBySchedule(Map<String, Object> request) {

		String statusType = null;
		String searchQuery = null;

		String scheduleId = null;

		Schedule schedule = scheduleDao.getlatestScheduleCustomers();

		if (schedule != null) {

			try {
				scheduleId = schedule.getsId() != null ? schedule.getsId().toString() : null;
			} catch (Exception e) {
				e.printStackTrace();
			}
		}

		statusType = request.containsKey("statusType") ? ((String) request.get("statusType")).toLowerCase() : "Success";

		List<CustomerOrderReplica> CustomerOrderReplica = customerOrderReplicaDoa
				.getAllcustomerOrderReplicaBySchdeule(statusType, scheduleId);

		ObjectMapper objectMapper = new ObjectMapper();
		CustomerOrderReplica.forEach(customerOrderReplica -> {
			try {

				// convert JSON string to Map
				Map<String, Object> customerOrderReplicaMap = objectMapper
						.readValue(customerOrderReplica.getCustomerOrderDetails(), Map.class);

				Object customerOrder = customerOrderReplicaMap.get("customerOrder");
				Map<String, Object> items = (Map<String, Object>) customerOrderReplicaMap.get("items");

				Object quanityList = items.get("quantity");
				Map customers = customerDetailsDao.getByContactNumberAndApartment(
						customerOrderReplica.getContactNumber(), customerOrderReplica.getApartmentId());

				System.out.println("customers" + customers.get("customerName"));

				// Apartments apartments =
				// apartmentDao.getApartmentById(customerOrderReplica.getApartmentId());
				customerOrderReplica.setApartmentName(
						customers.get("apartmentName") != null ? (String) customers.get("apartmentName") : null);

				customerOrderReplica.setCustomerDetails(customers);

				customerOrderReplica.setCustomerOrder(customerOrder);
				customerOrderReplica.setQuatityList(quanityList);

			} catch (Exception e) {
				e.printStackTrace();
			}

		});

		return CustomerOrderReplica;

	}

	@Override
	public CustomerOrderReplica getCustomerOrderReplicaByCartId(String cartId) {

		CustomerOrderReplica CustomerOrderReplica = customerOrderReplicaDoa.getCustomerOrderByCartId(cartId,
				currentUser.getContactNumber());

		ObjectMapper objectMapper = new ObjectMapper();
		try {

			// convert JSON string to Map
			Map<String, Object> customerOrderReplicaMap = objectMapper
					.readValue(CustomerOrderReplica.getCustomerOrderDetails(), Map.class);

			Object customerOrder = customerOrderReplicaMap.get("customerOrder");
			Map<String, Object> items = (Map<String, Object>) customerOrderReplicaMap.get("items");

			Object quanityList = items.get("quantity");
			Map customers = customerDetailsDao.getByContactNumberAndApartment(CustomerOrderReplica.getContactNumber(),
					CustomerOrderReplica.getApartmentId());

			System.out.println("customers" + customers.get("customerName"));

			// Apartments apartments =
			// apartmentDao.getApartmentById(customerOrderReplica.getApartmentId());
			CustomerOrderReplica.setApartmentName(
					customers.get("apartmentName") != null ? (String) customers.get("apartmentName") : null);

			CustomerOrderReplica.setCustomerDetails(customers);

			CustomerOrderReplica.setCustomerOrder(customerOrder);
			CustomerOrderReplica.setQuatityList(quanityList);

		} catch (Exception e) {
			e.printStackTrace();
		}

		return CustomerOrderReplica;

	}

	@Override
	public Map createCustomerOrderReplica(CustomerOrderReplicaRequest customerOrderReplicaRequest, String contactNumber,
			Integer aparmentId) {

		if (customerOrderReplicaRequest.getRazorPayRequest() != null) {

//			Map razorPay = consumerService.createRazorPayOrder(customerOrderReplicaRequest.getRazorPayRequest());
//			customerOrderReplicaRequest.setOrderId(razorPay.get("order") != null ? (String)((RazorPay) razorPay.get("order")).getId() : null);	
//	
//			createCustomerOrderReplicaService(customerOrderReplicaRequest, contactNumber, aparmentId);
//
//			razorPay.put("cartId", customerOrderReplicaRequest.getCartId());

			Map customerOrderReplicaMap = new HashMap<>();

			Map orderId = new HashMap<>();
			String transactionId = getMerchantTransactionId();
			orderId.put("id", transactionId);

			customerOrderReplicaMap.put("order", orderId);

			customerOrderReplicaRequest.setOrderId(transactionId);
			createCustomerOrderReplicaService(customerOrderReplicaRequest, contactNumber, aparmentId);

			customerOrderReplicaMap.put("cartId", customerOrderReplicaRequest.getCartId());

			try {
				customerOrderReplicaMap.put("phonePeResponse",
						phonepeServiceImpl.initiatePhonepePayment(transactionId,
								Integer.valueOf(customerOrderReplicaRequest.getRazorPayRequest().getAmount()),
								contactNumber, customerOrderReplicaRequest.getRedirectUrl(), customerOrderReplicaRequest.getCallBackUrl()));

			} catch (Exception e) {
				e.printStackTrace();
				customerOrderReplicaMap.put("phonePeResponse", new HashedMap<>());
			}

			return customerOrderReplicaMap;

		} else {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST,
					"paymentDetails transcation Details are mandatory");
		}

	}

	private static String getMerchantTransactionId() {

		return "OD_" + MerchantTransactionIdGenerator.getRandomString();
	}


	@Override
	public List<CustomerOrderReplica> getCustomerOrderByMoblieNo(String contactNumber,Integer aid) {
		
		Schedule latestschedule = customerOrderReplicaDoa.getlatestschedule();
		
		if (latestschedule != null && latestschedule.getCreationTimestamp()!=null) {
			
	        if (latestschedule.getStatus().equals(UserStatus.ACTIVE)) {
	        	
	        	Customers customer = customerDetailsDao.getByContactNoAndApartment(contactNumber, aid);
	        	if (customer != null) { // Ensure the customer exists
	        		List<CustomerOrder> customerOrderList = customerOrderReplicaDoa.getListCustomerOrderByCustomerId(customer.getCtid());
	        		
	                double totalOrderAmount = 0.0;
	       
                if (customerOrderList != null && !customerOrderList.isEmpty() && customerOrderList.add(customerOrder). {
                    for (CustomerOrder customerOrder : customerOrderList) {
                        Double orderAmount = customerOrder.getAmount();
                        
                        if(orderAmount)
                        if (orderAmount != null) {
                            totalOrderAmount += orderAmount;
                            if(totalOrderAmount>200) {
                            	totalOrderAmount+customerOrder
                            }
                        }
                    }
                    System.out.println("Total Order Amount: " + totalOrderAmount);
                    List<CustomerOrderReplica> customerOrderReplicas = new ArrayList<>();
                    return customerOrderReplicas;
                } else {
                    return Collections.emptyList(); // or return null or an appropriate value
                }
            } else {
              
                return null; // or an appropriate value
            }
        } else {
            // Handle the case when the latest schedule is not active
            return null; // or an appropriate value
        }
    } else {
        // Handle the case when there is no latest schedule or its creation timestamp is null
        return null; // or an appropriate value
    }
	}
}



----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3003)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1003)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:799)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:743)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-09-21 15:03:55.052
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3003)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1003)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:799)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:743)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-09-21 15:03:55.054
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3003)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1003)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:799)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:743)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2023-09-21 15:03:58.307
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.xyram.daydrop.serviceimpl;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.transaction.Transactional;

import org.apache.commons.collections4.map.HashedMap;
import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.server.ResponseStatusException;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.xyram.daydrop.admin.model.CurrentUser;
import com.xyram.daydrop.basemodel.Base64Wrapper;
import com.xyram.daydrop.basemodel.MerchantTransactionIdGenerator;
import com.xyram.daydrop.basemodel.PhonepeSerializer;
import com.xyram.daydrop.dao.ApartmentDao;
import com.xyram.daydrop.dao.CustomerDetailsDao;
import com.xyram.daydrop.dao.CustomerOrderDao;
import com.xyram.daydrop.dao.CustomerOrderReplicaDoa;
import com.xyram.daydrop.dao.SheduleDao;
import com.xyram.daydrop.enumtypes.UserStatus;
import com.xyram.daydrop.model.Apartments;
import com.xyram.daydrop.model.CustomerOrder;
import com.xyram.daydrop.model.CustomerOrderReplica;
import com.xyram.daydrop.model.Customers;
import com.xyram.daydrop.model.Schedule;
import com.xyram.daydrop.modelMapper.PaymentInstrument;
import com.xyram.daydrop.modelMapper.PhonePePayModel;
import com.xyram.daydrop.request.CustomerOrderReplicaRequest;
import com.xyram.daydrop.response.RazorPayRequest;
import com.xyram.daydrop.service.CustomerOrderPriceService;
import com.xyram.daydrop.service.CustomerOrderReplicaService;
import com.xyram.daydrop.util.HashEncoder;
import com.xyram.daydrop.util.RazorPay;
import com.xyram.daydrop.service.ConsumerService;

@Transactional
@Service
public class CustomerOrderReplicaServiceImpl implements CustomerOrderReplicaService {

	@Autowired
	CustomerOrderReplicaDoa customerOrderReplicaDoa;

	@Autowired
	ApartmentDao apartmentDao;

	@Autowired
	SheduleDao scheduleDao;

	@Autowired
	CustomerDetailsDao customerDetailsDao;

	@Autowired
	ConsumerService consumerService;

	@Autowired
	CurrentUser currentUser;

	@Autowired
	PhonepeServiceImpl phonepeServiceImpl;

	@Value("${merchant_id}")
	private String merchantId;

	@Value("${salt_key}")
	private String saltKey;

	@Value("${salt_index}")
	private String saltIndex;

	@Override
	public Map createCustomerOrderReplicaService(CustomerOrderReplicaRequest customerOrderReplicaRequest,
			String contactNumber, Integer aparmentId)

	{

		Map response = new HashedMap<>();

		response.put("message", "success");
		CustomerOrderReplica customerOrderReplica = null;

		if (customerOrderReplicaRequest.getCartId() == null) {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "cartId is mandatory ");
		}
		long razorPayCount = 0;
		if (customerOrderReplicaRequest.getOrderId() != null) {

			razorPayCount = customerOrderReplicaDoa.getRazorPayExistByCartId(customerOrderReplicaRequest.getOrderId());
		}

		if (customerOrderReplicaRequest.getCustomerDetails() == null) {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Order Details  is mandatory ");
		}

		customerOrderReplica = customerOrderReplicaDoa.getCustomerOrderByCartId(customerOrderReplicaRequest.getCartId(),
				contactNumber);

		if (customerOrderReplica != null) {
			customerOrderReplica.setCartId(customerOrderReplica.getCartId());

			if (customerOrderReplica.isOrdered()) {
				throw new ResponseStatusException(HttpStatus.CONFLICT, "Your Order is Placed With cart Details");
			}

//			if (razorPayCount >= 1 && !(customerOrderReplica.getRazorPayOrderId() != null
//					&& customerOrderReplica.getRazorPayOrderId().equals(customerOrderReplicaRequest.getOrderId()))) {
//				throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Razor Pay Id Are already Exist ");
//			}

			customerOrderReplica.setStatusType(customerOrderReplicaRequest.getStatusType());
			customerOrderReplica.setContactNumber(contactNumber);
			customerOrderReplica.setApartmentId(aparmentId);

			customerOrderReplica.setAttempts(customerOrderReplica.getAttempts() + 1);
			customerOrderReplica.setUpdatedTime(new Date());

			customerOrderReplica.setRazorPayOrderId(customerOrderReplicaRequest.getOrderId());

			try {

				JSONObject obj = new JSONObject(customerOrderReplicaRequest.getCustomerDetails());

				customerOrderReplica.setCustomerOrderDetails(obj != null ? obj.toString() : null);

				customerOrderReplicaDoa.updateCustomer(customerOrderReplica);
				return response;

			} catch (Exception e) {
				customerOrderReplica.setCustomerOrderDetails(customerOrderReplicaRequest.getCustomerDetails() != null
						? customerOrderReplicaRequest.getCustomerDetails().toString()
						: null);
				customerOrderReplicaDoa.updateCustomer(customerOrderReplica);
				return response;
			}

		} else {

			customerOrderReplica = new CustomerOrderReplica();
			customerOrderReplica.setContactNumber(contactNumber);
			customerOrderReplica.setApartmentId(aparmentId);
			customerOrderReplica.setCartId(customerOrderReplicaRequest.getCartId());
			customerOrderReplica.setStatusType(customerOrderReplicaRequest.getStatusType());

			if (razorPayCount > 0) {
				throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Razor Pay Id Are already Exist ");
			}

			customerOrderReplica.setRazorPayOrderId(customerOrderReplicaRequest.getOrderId());

			Schedule schedule = scheduleDao.getlatestScheduleCustomers();

			if (schedule != null) {

				try {
					customerOrderReplica.setSchedule(schedule.getsId() != null ? schedule.getsId().toString() : null);
				} catch (Exception e) {
					e.printStackTrace();
				}
			} else {
				throw new ResponseStatusException(HttpStatus.BAD_REQUEST,
						"Sorry We Are Not Accepting Any Order Right now");

			}

			try {

				JSONObject obj = new JSONObject(customerOrderReplicaRequest.getCustomerDetails());

				customerOrderReplica.setCustomerOrderDetails(obj != null ? obj.toString() : null);

				customerOrderReplicaDoa.updateCustomer(customerOrderReplica);
				return response;

			} catch (Exception e) {
				customerOrderReplica.setCustomerOrderDetails(customerOrderReplicaRequest.getCustomerDetails() != null
						? customerOrderReplicaRequest.getCustomerDetails().toString()
						: null);
				customerOrderReplicaDoa.updateCustomer(customerOrderReplica);
				return response;
			}

		}

	}

	@Override
	public List<CustomerOrderReplica> getAllCustomerOrderReplicas(Map<String, Object> request) {

		String statusType = null;
		String searchQuery = null;

		String schedule = null;

		Map filter = request.containsKey("filters") ? (Map) request.get("filters") : null;
		if (filter != null) {
			statusType = filter.containsKey("statusType") ? ((String) filter.get("statusType")).toLowerCase() : null;
			searchQuery = filter.containsKey("searchQuery") ? ((String) filter.get("searchQuery")).toLowerCase() : null;
			schedule = filter.containsKey("schedule") ? (String.valueOf(filter.get("schedule"))) : null;

		}

		List<CustomerOrderReplica> CustomerOrderReplica = customerOrderReplicaDoa
				.getAllcustomerOrderReplica(searchQuery, statusType, schedule);

		ObjectMapper objectMapper = new ObjectMapper();
		CustomerOrderReplica.forEach(customerOrderReplica -> {
			try {

				// convert JSON string to Map
				Map<String, Object> customerOrderReplicaMap = objectMapper
						.readValue(customerOrderReplica.getCustomerOrderDetails(), Map.class);

				Object customerOrder = customerOrderReplicaMap.get("customerOrder");
				Map<String, Object> items = (Map<String, Object>) customerOrderReplicaMap.get("items");

				Object quanityList = items.get("quantity");

				Map customers = customerDetailsDao.getByContactNumberAndApartment(
						customerOrderReplica.getContactNumber(), customerOrderReplica.getApartmentId());

				// Apartments apartments =
				// apartmentDao.getApartmentById(customerOrderReplica.getApartmentId());
				customerOrderReplica.setApartmentName(
						customers.get("apartmentName") != null ? (String) customers.get("apartmentName") : null);

				customerOrderReplica.setStreetName(
						customers.get("streetName") != null ? (String) customers.get("streetName") : null);

				customerOrderReplica.setCustomerDetails(customers);

				customerOrderReplica.setCustomerOrder(customerOrder);
				customerOrderReplica.setQuatityList(quanityList);

			} catch (Exception e) {
				e.printStackTrace();
			}

		});

		return CustomerOrderReplica;

	}

	@Override
	public List<CustomerOrderReplica> getAllCustomerOrderReplicasBySchedule(Map<String, Object> request) {

		String statusType = null;
		String searchQuery = null;

		String scheduleId = null;

		Schedule schedule = scheduleDao.getlatestScheduleCustomers();

		if (schedule != null) {

			try {
				scheduleId = schedule.getsId() != null ? schedule.getsId().toString() : null;
			} catch (Exception e) {
				e.printStackTrace();
			}
		}

		statusType = request.containsKey("statusType") ? ((String) request.get("statusType")).toLowerCase() : "Success";

		List<CustomerOrderReplica> CustomerOrderReplica = customerOrderReplicaDoa
				.getAllcustomerOrderReplicaBySchdeule(statusType, scheduleId);

		ObjectMapper objectMapper = new ObjectMapper();
		CustomerOrderReplica.forEach(customerOrderReplica -> {
			try {

				// convert JSON string to Map
				Map<String, Object> customerOrderReplicaMap = objectMapper
						.readValue(customerOrderReplica.getCustomerOrderDetails(), Map.class);

				Object customerOrder = customerOrderReplicaMap.get("customerOrder");
				Map<String, Object> items = (Map<String, Object>) customerOrderReplicaMap.get("items");

				Object quanityList = items.get("quantity");
				Map customers = customerDetailsDao.getByContactNumberAndApartment(
						customerOrderReplica.getContactNumber(), customerOrderReplica.getApartmentId());

				System.out.println("customers" + customers.get("customerName"));

				// Apartments apartments =
				// apartmentDao.getApartmentById(customerOrderReplica.getApartmentId());
				customerOrderReplica.setApartmentName(
						customers.get("apartmentName") != null ? (String) customers.get("apartmentName") : null);

				customerOrderReplica.setCustomerDetails(customers);

				customerOrderReplica.setCustomerOrder(customerOrder);
				customerOrderReplica.setQuatityList(quanityList);

			} catch (Exception e) {
				e.printStackTrace();
			}

		});

		return CustomerOrderReplica;

	}

	@Override
	public CustomerOrderReplica getCustomerOrderReplicaByCartId(String cartId) {

		CustomerOrderReplica CustomerOrderReplica = customerOrderReplicaDoa.getCustomerOrderByCartId(cartId,
				currentUser.getContactNumber());

		ObjectMapper objectMapper = new ObjectMapper();
		try {

			// convert JSON string to Map
			Map<String, Object> customerOrderReplicaMap = objectMapper
					.readValue(CustomerOrderReplica.getCustomerOrderDetails(), Map.class);

			Object customerOrder = customerOrderReplicaMap.get("customerOrder");
			Map<String, Object> items = (Map<String, Object>) customerOrderReplicaMap.get("items");

			Object quanityList = items.get("quantity");
			Map customers = customerDetailsDao.getByContactNumberAndApartment(CustomerOrderReplica.getContactNumber(),
					CustomerOrderReplica.getApartmentId());

			System.out.println("customers" + customers.get("customerName"));

			// Apartments apartments =
			// apartmentDao.getApartmentById(customerOrderReplica.getApartmentId());
			CustomerOrderReplica.setApartmentName(
					customers.get("apartmentName") != null ? (String) customers.get("apartmentName") : null);

			CustomerOrderReplica.setCustomerDetails(customers);

			CustomerOrderReplica.setCustomerOrder(customerOrder);
			CustomerOrderReplica.setQuatityList(quanityList);

		} catch (Exception e) {
			e.printStackTrace();
		}

		return CustomerOrderReplica;

	}

	@Override
	public Map createCustomerOrderReplica(CustomerOrderReplicaRequest customerOrderReplicaRequest, String contactNumber,
			Integer aparmentId) {

		if (customerOrderReplicaRequest.getRazorPayRequest() != null) {

//			Map razorPay = consumerService.createRazorPayOrder(customerOrderReplicaRequest.getRazorPayRequest());
//			customerOrderReplicaRequest.setOrderId(razorPay.get("order") != null ? (String)((RazorPay) razorPay.get("order")).getId() : null);	
//	
//			createCustomerOrderReplicaService(customerOrderReplicaRequest, contactNumber, aparmentId);
//
//			razorPay.put("cartId", customerOrderReplicaRequest.getCartId());

			Map customerOrderReplicaMap = new HashMap<>();

			Map orderId = new HashMap<>();
			String transactionId = getMerchantTransactionId();
			orderId.put("id", transactionId);

			customerOrderReplicaMap.put("order", orderId);

			customerOrderReplicaRequest.setOrderId(transactionId);
			createCustomerOrderReplicaService(customerOrderReplicaRequest, contactNumber, aparmentId);

			customerOrderReplicaMap.put("cartId", customerOrderReplicaRequest.getCartId());

			try {
				customerOrderReplicaMap.put("phonePeResponse",
						phonepeServiceImpl.initiatePhonepePayment(transactionId,
								Integer.valueOf(customerOrderReplicaRequest.getRazorPayRequest().getAmount()),
								contactNumber, customerOrderReplicaRequest.getRedirectUrl(), customerOrderReplicaRequest.getCallBackUrl()));

			} catch (Exception e) {
				e.printStackTrace();
				customerOrderReplicaMap.put("phonePeResponse", new HashedMap<>());
			}

			return customerOrderReplicaMap;

		} else {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST,
					"paymentDetails transcation Details are mandatory");
		}

	}

	private static String getMerchantTransactionId() {

		return "OD_" + MerchantTransactionIdGenerator.getRandomString();
	}


	@Override
	public List<CustomerOrderReplica> getCustomerOrderByMoblieNo(String contactNumber,Integer aid) {
		
		Schedule latestschedule = customerOrderReplicaDoa.getlatestschedule();
		
		if (latestschedule != null && latestschedule.getCreationTimestamp()!=null) {
			
	        if (latestschedule.getStatus().equals(UserStatus.ACTIVE)) {
	        	
	        	Customers customer = customerDetailsDao.getByContactNoAndApartment(contactNumber, aid);
	        	if (customer != null) { // Ensure the customer exists
	        		List<CustomerOrder> customerOrderList = customerOrderReplicaDoa.getListCustomerOrderByCustomerId(customer.getCtid());
	        		
	                double totalOrderAmount = 0.0;
	       
                if (customerOrderList != null && !customerOrderList.isEmpty() && customerOrderList.add(customerOrder). {
                    for (CustomerOrder customerOrder : customerOrderList) {
                        Double orderAmount = customerOrder.getAmount();
                        
                        if(orderAmount>200)
                        if (orderAmount != null) {
                            totalOrderAmount += orderAmount;
                            if(totalOrderAmount>200) {
                            	totalOrderAmount+customerOrder
                            }
                        }
                    }
                    System.out.println("Total Order Amount: " + totalOrderAmount);
                    List<CustomerOrderReplica> customerOrderReplicas = new ArrayList<>();
                    return customerOrderReplicas;
                } else {
                    return Collections.emptyList(); // or return null or an appropriate value
                }
            } else {
              
                return null; // or an appropriate value
            }
        } else {
            // Handle the case when the latest schedule is not active
            return null; // or an appropriate value
        }
    } else {
        // Handle the case when there is no latest schedule or its creation timestamp is null
        return null; // or an appropriate value
    }
	}
}



----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3003)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2023-09-21 15:03:58.309
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3003)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2023-09-21 15:03:58.311
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3003)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2023-09-21 15:03:58.475
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.xyram.daydrop.serviceimpl;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.transaction.Transactional;

import org.apache.commons.collections4.map.HashedMap;
import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.server.ResponseStatusException;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.xyram.daydrop.admin.model.CurrentUser;
import com.xyram.daydrop.basemodel.Base64Wrapper;
import com.xyram.daydrop.basemodel.MerchantTransactionIdGenerator;
import com.xyram.daydrop.basemodel.PhonepeSerializer;
import com.xyram.daydrop.dao.ApartmentDao;
import com.xyram.daydrop.dao.CustomerDetailsDao;
import com.xyram.daydrop.dao.CustomerOrderDao;
import com.xyram.daydrop.dao.CustomerOrderReplicaDoa;
import com.xyram.daydrop.dao.SheduleDao;
import com.xyram.daydrop.enumtypes.UserStatus;
import com.xyram.daydrop.model.Apartments;
import com.xyram.daydrop.model.CustomerOrder;
import com.xyram.daydrop.model.CustomerOrderReplica;
import com.xyram.daydrop.model.Customers;
import com.xyram.daydrop.model.Schedule;
import com.xyram.daydrop.modelMapper.PaymentInstrument;
import com.xyram.daydrop.modelMapper.PhonePePayModel;
import com.xyram.daydrop.request.CustomerOrderReplicaRequest;
import com.xyram.daydrop.response.RazorPayRequest;
import com.xyram.daydrop.service.CustomerOrderPriceService;
import com.xyram.daydrop.service.CustomerOrderReplicaService;
import com.xyram.daydrop.util.HashEncoder;
import com.xyram.daydrop.util.RazorPay;
import com.xyram.daydrop.service.ConsumerService;

@Transactional
@Service
public class CustomerOrderReplicaServiceImpl implements CustomerOrderReplicaService {

	@Autowired
	CustomerOrderReplicaDoa customerOrderReplicaDoa;

	@Autowired
	ApartmentDao apartmentDao;

	@Autowired
	SheduleDao scheduleDao;

	@Autowired
	CustomerDetailsDao customerDetailsDao;

	@Autowired
	ConsumerService consumerService;

	@Autowired
	CurrentUser currentUser;

	@Autowired
	PhonepeServiceImpl phonepeServiceImpl;

	@Value("${merchant_id}")
	private String merchantId;

	@Value("${salt_key}")
	private String saltKey;

	@Value("${salt_index}")
	private String saltIndex;

	@Override
	public Map createCustomerOrderReplicaService(CustomerOrderReplicaRequest customerOrderReplicaRequest,
			String contactNumber, Integer aparmentId)

	{

		Map response = new HashedMap<>();

		response.put("message", "success");
		CustomerOrderReplica customerOrderReplica = null;

		if (customerOrderReplicaRequest.getCartId() == null) {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "cartId is mandatory ");
		}
		long razorPayCount = 0;
		if (customerOrderReplicaRequest.getOrderId() != null) {

			razorPayCount = customerOrderReplicaDoa.getRazorPayExistByCartId(customerOrderReplicaRequest.getOrderId());
		}

		if (customerOrderReplicaRequest.getCustomerDetails() == null) {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Order Details  is mandatory ");
		}

		customerOrderReplica = customerOrderReplicaDoa.getCustomerOrderByCartId(customerOrderReplicaRequest.getCartId(),
				contactNumber);

		if (customerOrderReplica != null) {
			customerOrderReplica.setCartId(customerOrderReplica.getCartId());

			if (customerOrderReplica.isOrdered()) {
				throw new ResponseStatusException(HttpStatus.CONFLICT, "Your Order is Placed With cart Details");
			}

//			if (razorPayCount >= 1 && !(customerOrderReplica.getRazorPayOrderId() != null
//					&& customerOrderReplica.getRazorPayOrderId().equals(customerOrderReplicaRequest.getOrderId()))) {
//				throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Razor Pay Id Are already Exist ");
//			}

			customerOrderReplica.setStatusType(customerOrderReplicaRequest.getStatusType());
			customerOrderReplica.setContactNumber(contactNumber);
			customerOrderReplica.setApartmentId(aparmentId);

			customerOrderReplica.setAttempts(customerOrderReplica.getAttempts() + 1);
			customerOrderReplica.setUpdatedTime(new Date());

			customerOrderReplica.setRazorPayOrderId(customerOrderReplicaRequest.getOrderId());

			try {

				JSONObject obj = new JSONObject(customerOrderReplicaRequest.getCustomerDetails());

				customerOrderReplica.setCustomerOrderDetails(obj != null ? obj.toString() : null);

				customerOrderReplicaDoa.updateCustomer(customerOrderReplica);
				return response;

			} catch (Exception e) {
				customerOrderReplica.setCustomerOrderDetails(customerOrderReplicaRequest.getCustomerDetails() != null
						? customerOrderReplicaRequest.getCustomerDetails().toString()
						: null);
				customerOrderReplicaDoa.updateCustomer(customerOrderReplica);
				return response;
			}

		} else {

			customerOrderReplica = new CustomerOrderReplica();
			customerOrderReplica.setContactNumber(contactNumber);
			customerOrderReplica.setApartmentId(aparmentId);
			customerOrderReplica.setCartId(customerOrderReplicaRequest.getCartId());
			customerOrderReplica.setStatusType(customerOrderReplicaRequest.getStatusType());

			if (razorPayCount > 0) {
				throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Razor Pay Id Are already Exist ");
			}

			customerOrderReplica.setRazorPayOrderId(customerOrderReplicaRequest.getOrderId());

			Schedule schedule = scheduleDao.getlatestScheduleCustomers();

			if (schedule != null) {

				try {
					customerOrderReplica.setSchedule(schedule.getsId() != null ? schedule.getsId().toString() : null);
				} catch (Exception e) {
					e.printStackTrace();
				}
			} else {
				throw new ResponseStatusException(HttpStatus.BAD_REQUEST,
						"Sorry We Are Not Accepting Any Order Right now");

			}

			try {

				JSONObject obj = new JSONObject(customerOrderReplicaRequest.getCustomerDetails());

				customerOrderReplica.setCustomerOrderDetails(obj != null ? obj.toString() : null);

				customerOrderReplicaDoa.updateCustomer(customerOrderReplica);
				return response;

			} catch (Exception e) {
				customerOrderReplica.setCustomerOrderDetails(customerOrderReplicaRequest.getCustomerDetails() != null
						? customerOrderReplicaRequest.getCustomerDetails().toString()
						: null);
				customerOrderReplicaDoa.updateCustomer(customerOrderReplica);
				return response;
			}

		}

	}

	@Override
	public List<CustomerOrderReplica> getAllCustomerOrderReplicas(Map<String, Object> request) {

		String statusType = null;
		String searchQuery = null;

		String schedule = null;

		Map filter = request.containsKey("filters") ? (Map) request.get("filters") : null;
		if (filter != null) {
			statusType = filter.containsKey("statusType") ? ((String) filter.get("statusType")).toLowerCase() : null;
			searchQuery = filter.containsKey("searchQuery") ? ((String) filter.get("searchQuery")).toLowerCase() : null;
			schedule = filter.containsKey("schedule") ? (String.valueOf(filter.get("schedule"))) : null;

		}

		List<CustomerOrderReplica> CustomerOrderReplica = customerOrderReplicaDoa
				.getAllcustomerOrderReplica(searchQuery, statusType, schedule);

		ObjectMapper objectMapper = new ObjectMapper();
		CustomerOrderReplica.forEach(customerOrderReplica -> {
			try {

				// convert JSON string to Map
				Map<String, Object> customerOrderReplicaMap = objectMapper
						.readValue(customerOrderReplica.getCustomerOrderDetails(), Map.class);

				Object customerOrder = customerOrderReplicaMap.get("customerOrder");
				Map<String, Object> items = (Map<String, Object>) customerOrderReplicaMap.get("items");

				Object quanityList = items.get("quantity");

				Map customers = customerDetailsDao.getByContactNumberAndApartment(
						customerOrderReplica.getContactNumber(), customerOrderReplica.getApartmentId());

				// Apartments apartments =
				// apartmentDao.getApartmentById(customerOrderReplica.getApartmentId());
				customerOrderReplica.setApartmentName(
						customers.get("apartmentName") != null ? (String) customers.get("apartmentName") : null);

				customerOrderReplica.setStreetName(
						customers.get("streetName") != null ? (String) customers.get("streetName") : null);

				customerOrderReplica.setCustomerDetails(customers);

				customerOrderReplica.setCustomerOrder(customerOrder);
				customerOrderReplica.setQuatityList(quanityList);

			} catch (Exception e) {
				e.printStackTrace();
			}

		});

		return CustomerOrderReplica;

	}

	@Override
	public List<CustomerOrderReplica> getAllCustomerOrderReplicasBySchedule(Map<String, Object> request) {

		String statusType = null;
		String searchQuery = null;

		String scheduleId = null;

		Schedule schedule = scheduleDao.getlatestScheduleCustomers();

		if (schedule != null) {

			try {
				scheduleId = schedule.getsId() != null ? schedule.getsId().toString() : null;
			} catch (Exception e) {
				e.printStackTrace();
			}
		}

		statusType = request.containsKey("statusType") ? ((String) request.get("statusType")).toLowerCase() : "Success";

		List<CustomerOrderReplica> CustomerOrderReplica = customerOrderReplicaDoa
				.getAllcustomerOrderReplicaBySchdeule(statusType, scheduleId);

		ObjectMapper objectMapper = new ObjectMapper();
		CustomerOrderReplica.forEach(customerOrderReplica -> {
			try {

				// convert JSON string to Map
				Map<String, Object> customerOrderReplicaMap = objectMapper
						.readValue(customerOrderReplica.getCustomerOrderDetails(), Map.class);

				Object customerOrder = customerOrderReplicaMap.get("customerOrder");
				Map<String, Object> items = (Map<String, Object>) customerOrderReplicaMap.get("items");

				Object quanityList = items.get("quantity");
				Map customers = customerDetailsDao.getByContactNumberAndApartment(
						customerOrderReplica.getContactNumber(), customerOrderReplica.getApartmentId());

				System.out.println("customers" + customers.get("customerName"));

				// Apartments apartments =
				// apartmentDao.getApartmentById(customerOrderReplica.getApartmentId());
				customerOrderReplica.setApartmentName(
						customers.get("apartmentName") != null ? (String) customers.get("apartmentName") : null);

				customerOrderReplica.setCustomerDetails(customers);

				customerOrderReplica.setCustomerOrder(customerOrder);
				customerOrderReplica.setQuatityList(quanityList);

			} catch (Exception e) {
				e.printStackTrace();
			}

		});

		return CustomerOrderReplica;

	}

	@Override
	public CustomerOrderReplica getCustomerOrderReplicaByCartId(String cartId) {

		CustomerOrderReplica CustomerOrderReplica = customerOrderReplicaDoa.getCustomerOrderByCartId(cartId,
				currentUser.getContactNumber());

		ObjectMapper objectMapper = new ObjectMapper();
		try {

			// convert JSON string to Map
			Map<String, Object> customerOrderReplicaMap = objectMapper
					.readValue(CustomerOrderReplica.getCustomerOrderDetails(), Map.class);

			Object customerOrder = customerOrderReplicaMap.get("customerOrder");
			Map<String, Object> items = (Map<String, Object>) customerOrderReplicaMap.get("items");

			Object quanityList = items.get("quantity");
			Map customers = customerDetailsDao.getByContactNumberAndApartment(CustomerOrderReplica.getContactNumber(),
					CustomerOrderReplica.getApartmentId());

			System.out.println("customers" + customers.get("customerName"));

			// Apartments apartments =
			// apartmentDao.getApartmentById(customerOrderReplica.getApartmentId());
			CustomerOrderReplica.setApartmentName(
					customers.get("apartmentName") != null ? (String) customers.get("apartmentName") : null);

			CustomerOrderReplica.setCustomerDetails(customers);

			CustomerOrderReplica.setCustomerOrder(customerOrder);
			CustomerOrderReplica.setQuatityList(quanityList);

		} catch (Exception e) {
			e.printStackTrace();
		}

		return CustomerOrderReplica;

	}

	@Override
	public Map createCustomerOrderReplica(CustomerOrderReplicaRequest customerOrderReplicaRequest, String contactNumber,
			Integer aparmentId) {

		if (customerOrderReplicaRequest.getRazorPayRequest() != null) {

//			Map razorPay = consumerService.createRazorPayOrder(customerOrderReplicaRequest.getRazorPayRequest());
//			customerOrderReplicaRequest.setOrderId(razorPay.get("order") != null ? (String)((RazorPay) razorPay.get("order")).getId() : null);	
//	
//			createCustomerOrderReplicaService(customerOrderReplicaRequest, contactNumber, aparmentId);
//
//			razorPay.put("cartId", customerOrderReplicaRequest.getCartId());

			Map customerOrderReplicaMap = new HashMap<>();

			Map orderId = new HashMap<>();
			String transactionId = getMerchantTransactionId();
			orderId.put("id", transactionId);

			customerOrderReplicaMap.put("order", orderId);

			customerOrderReplicaRequest.setOrderId(transactionId);
			createCustomerOrderReplicaService(customerOrderReplicaRequest, contactNumber, aparmentId);

			customerOrderReplicaMap.put("cartId", customerOrderReplicaRequest.getCartId());

			try {
				customerOrderReplicaMap.put("phonePeResponse",
						phonepeServiceImpl.initiatePhonepePayment(transactionId,
								Integer.valueOf(customerOrderReplicaRequest.getRazorPayRequest().getAmount()),
								contactNumber, customerOrderReplicaRequest.getRedirectUrl(), customerOrderReplicaRequest.getCallBackUrl()));

			} catch (Exception e) {
				e.printStackTrace();
				customerOrderReplicaMap.put("phonePeResponse", new HashedMap<>());
			}

			return customerOrderReplicaMap;

		} else {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST,
					"paymentDetails transcation Details are mandatory");
		}

	}

	private static String getMerchantTransactionId() {

		return "OD_" + MerchantTransactionIdGenerator.getRandomString();
	}


	@Override
	public List<CustomerOrderReplica> getCustomerOrderByMoblieNo(String contactNumber,Integer aid) {
		
		Schedule latestschedule = customerOrderReplicaDoa.getlatestschedule();
		
		if (latestschedule != null && latestschedule.getCreationTimestamp()!=null) {
			
	        if (latestschedule.getStatus().equals(UserStatus.ACTIVE)) {
	        	
	        	Customers customer = customerDetailsDao.getByContactNoAndApartment(contactNumber, aid);
	        	if (customer != null) { // Ensure the customer exists
	        		List<CustomerOrder> customerOrderList = customerOrderReplicaDoa.getListCustomerOrderByCustomerId(customer.getCtid());
	        		
	                double totalOrderAmount = 0.0;
	       
                if (customerOrderList != null && !customerOrderList.isEmpty() && customerOrderList.add(customerOrder). {
                    for (CustomerOrder customerOrder : customerOrderList) {
                        Double orderAmount = customerOrder.getAmount();
                        
                        if(orderAmount>200)
                        if (orderAmount != null) {
                            totalOrderAmount += orderAmount;
                            if(totalOrderAmount>200) {
                            	totalOrderAmount+customerOrder
                            }
                        }
                    }
                    System.out.println("Total Order Amount: " + totalOrderAmount);
                    List<CustomerOrderReplica> customerOrderReplicas = new ArrayList<>();
                    return customerOrderReplicas;
                } else {
                    return Collections.emptyList(); // or return null or an appropriate value
                }
            } else {
              
                return null; // or an appropriate value
            }
        } else {
            // Handle the case when the latest schedule is not active
            return null; // or an appropriate value
        }
    } else {
        // Handle the case when there is no latest schedule or its creation timestamp is null
        return null; // or an appropriate value
    }
	}
}



----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3003)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-09-21 15:03:58.482
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3003)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-09-21 15:03:58.484
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3003)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2023-09-21 15:03:59.839
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.xyram.daydrop.serviceimpl;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.transaction.Transactional;

import org.apache.commons.collections4.map.HashedMap;
import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.server.ResponseStatusException;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.xyram.daydrop.admin.model.CurrentUser;
import com.xyram.daydrop.basemodel.Base64Wrapper;
import com.xyram.daydrop.basemodel.MerchantTransactionIdGenerator;
import com.xyram.daydrop.basemodel.PhonepeSerializer;
import com.xyram.daydrop.dao.ApartmentDao;
import com.xyram.daydrop.dao.CustomerDetailsDao;
import com.xyram.daydrop.dao.CustomerOrderDao;
import com.xyram.daydrop.dao.CustomerOrderReplicaDoa;
import com.xyram.daydrop.dao.SheduleDao;
import com.xyram.daydrop.enumtypes.UserStatus;
import com.xyram.daydrop.model.Apartments;
import com.xyram.daydrop.model.CustomerOrder;
import com.xyram.daydrop.model.CustomerOrderReplica;
import com.xyram.daydrop.model.Customers;
import com.xyram.daydrop.model.Schedule;
import com.xyram.daydrop.modelMapper.PaymentInstrument;
import com.xyram.daydrop.modelMapper.PhonePePayModel;
import com.xyram.daydrop.request.CustomerOrderReplicaRequest;
import com.xyram.daydrop.response.RazorPayRequest;
import com.xyram.daydrop.service.CustomerOrderPriceService;
import com.xyram.daydrop.service.CustomerOrderReplicaService;
import com.xyram.daydrop.util.HashEncoder;
import com.xyram.daydrop.util.RazorPay;
import com.xyram.daydrop.service.ConsumerService;

@Transactional
@Service
public class CustomerOrderReplicaServiceImpl implements CustomerOrderReplicaService {

	@Autowired
	CustomerOrderReplicaDoa customerOrderReplicaDoa;

	@Autowired
	ApartmentDao apartmentDao;

	@Autowired
	SheduleDao scheduleDao;

	@Autowired
	CustomerDetailsDao customerDetailsDao;

	@Autowired
	ConsumerService consumerService;

	@Autowired
	CurrentUser currentUser;

	@Autowired
	PhonepeServiceImpl phonepeServiceImpl;

	@Value("${merchant_id}")
	private String merchantId;

	@Value("${salt_key}")
	private String saltKey;

	@Value("${salt_index}")
	private String saltIndex;

	@Override
	public Map createCustomerOrderReplicaService(CustomerOrderReplicaRequest customerOrderReplicaRequest,
			String contactNumber, Integer aparmentId)

	{

		Map response = new HashedMap<>();

		response.put("message", "success");
		CustomerOrderReplica customerOrderReplica = null;

		if (customerOrderReplicaRequest.getCartId() == null) {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "cartId is mandatory ");
		}
		long razorPayCount = 0;
		if (customerOrderReplicaRequest.getOrderId() != null) {

			razorPayCount = customerOrderReplicaDoa.getRazorPayExistByCartId(customerOrderReplicaRequest.getOrderId());
		}

		if (customerOrderReplicaRequest.getCustomerDetails() == null) {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Order Details  is mandatory ");
		}

		customerOrderReplica = customerOrderReplicaDoa.getCustomerOrderByCartId(customerOrderReplicaRequest.getCartId(),
				contactNumber);

		if (customerOrderReplica != null) {
			customerOrderReplica.setCartId(customerOrderReplica.getCartId());

			if (customerOrderReplica.isOrdered()) {
				throw new ResponseStatusException(HttpStatus.CONFLICT, "Your Order is Placed With cart Details");
			}

//			if (razorPayCount >= 1 && !(customerOrderReplica.getRazorPayOrderId() != null
//					&& customerOrderReplica.getRazorPayOrderId().equals(customerOrderReplicaRequest.getOrderId()))) {
//				throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Razor Pay Id Are already Exist ");
//			}

			customerOrderReplica.setStatusType(customerOrderReplicaRequest.getStatusType());
			customerOrderReplica.setContactNumber(contactNumber);
			customerOrderReplica.setApartmentId(aparmentId);

			customerOrderReplica.setAttempts(customerOrderReplica.getAttempts() + 1);
			customerOrderReplica.setUpdatedTime(new Date());

			customerOrderReplica.setRazorPayOrderId(customerOrderReplicaRequest.getOrderId());

			try {

				JSONObject obj = new JSONObject(customerOrderReplicaRequest.getCustomerDetails());

				customerOrderReplica.setCustomerOrderDetails(obj != null ? obj.toString() : null);

				customerOrderReplicaDoa.updateCustomer(customerOrderReplica);
				return response;

			} catch (Exception e) {
				customerOrderReplica.setCustomerOrderDetails(customerOrderReplicaRequest.getCustomerDetails() != null
						? customerOrderReplicaRequest.getCustomerDetails().toString()
						: null);
				customerOrderReplicaDoa.updateCustomer(customerOrderReplica);
				return response;
			}

		} else {

			customerOrderReplica = new CustomerOrderReplica();
			customerOrderReplica.setContactNumber(contactNumber);
			customerOrderReplica.setApartmentId(aparmentId);
			customerOrderReplica.setCartId(customerOrderReplicaRequest.getCartId());
			customerOrderReplica.setStatusType(customerOrderReplicaRequest.getStatusType());

			if (razorPayCount > 0) {
				throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Razor Pay Id Are already Exist ");
			}

			customerOrderReplica.setRazorPayOrderId(customerOrderReplicaRequest.getOrderId());

			Schedule schedule = scheduleDao.getlatestScheduleCustomers();

			if (schedule != null) {

				try {
					customerOrderReplica.setSchedule(schedule.getsId() != null ? schedule.getsId().toString() : null);
				} catch (Exception e) {
					e.printStackTrace();
				}
			} else {
				throw new ResponseStatusException(HttpStatus.BAD_REQUEST,
						"Sorry We Are Not Accepting Any Order Right now");

			}

			try {

				JSONObject obj = new JSONObject(customerOrderReplicaRequest.getCustomerDetails());

				customerOrderReplica.setCustomerOrderDetails(obj != null ? obj.toString() : null);

				customerOrderReplicaDoa.updateCustomer(customerOrderReplica);
				return response;

			} catch (Exception e) {
				customerOrderReplica.setCustomerOrderDetails(customerOrderReplicaRequest.getCustomerDetails() != null
						? customerOrderReplicaRequest.getCustomerDetails().toString()
						: null);
				customerOrderReplicaDoa.updateCustomer(customerOrderReplica);
				return response;
			}

		}

	}

	@Override
	public List<CustomerOrderReplica> getAllCustomerOrderReplicas(Map<String, Object> request) {

		String statusType = null;
		String searchQuery = null;

		String schedule = null;

		Map filter = request.containsKey("filters") ? (Map) request.get("filters") : null;
		if (filter != null) {
			statusType = filter.containsKey("statusType") ? ((String) filter.get("statusType")).toLowerCase() : null;
			searchQuery = filter.containsKey("searchQuery") ? ((String) filter.get("searchQuery")).toLowerCase() : null;
			schedule = filter.containsKey("schedule") ? (String.valueOf(filter.get("schedule"))) : null;

		}

		List<CustomerOrderReplica> CustomerOrderReplica = customerOrderReplicaDoa
				.getAllcustomerOrderReplica(searchQuery, statusType, schedule);

		ObjectMapper objectMapper = new ObjectMapper();
		CustomerOrderReplica.forEach(customerOrderReplica -> {
			try {

				// convert JSON string to Map
				Map<String, Object> customerOrderReplicaMap = objectMapper
						.readValue(customerOrderReplica.getCustomerOrderDetails(), Map.class);

				Object customerOrder = customerOrderReplicaMap.get("customerOrder");
				Map<String, Object> items = (Map<String, Object>) customerOrderReplicaMap.get("items");

				Object quanityList = items.get("quantity");

				Map customers = customerDetailsDao.getByContactNumberAndApartment(
						customerOrderReplica.getContactNumber(), customerOrderReplica.getApartmentId());

				// Apartments apartments =
				// apartmentDao.getApartmentById(customerOrderReplica.getApartmentId());
				customerOrderReplica.setApartmentName(
						customers.get("apartmentName") != null ? (String) customers.get("apartmentName") : null);

				customerOrderReplica.setStreetName(
						customers.get("streetName") != null ? (String) customers.get("streetName") : null);

				customerOrderReplica.setCustomerDetails(customers);

				customerOrderReplica.setCustomerOrder(customerOrder);
				customerOrderReplica.setQuatityList(quanityList);

			} catch (Exception e) {
				e.printStackTrace();
			}

		});

		return CustomerOrderReplica;

	}

	@Override
	public List<CustomerOrderReplica> getAllCustomerOrderReplicasBySchedule(Map<String, Object> request) {

		String statusType = null;
		String searchQuery = null;

		String scheduleId = null;

		Schedule schedule = scheduleDao.getlatestScheduleCustomers();

		if (schedule != null) {

			try {
				scheduleId = schedule.getsId() != null ? schedule.getsId().toString() : null;
			} catch (Exception e) {
				e.printStackTrace();
			}
		}

		statusType = request.containsKey("statusType") ? ((String) request.get("statusType")).toLowerCase() : "Success";

		List<CustomerOrderReplica> CustomerOrderReplica = customerOrderReplicaDoa
				.getAllcustomerOrderReplicaBySchdeule(statusType, scheduleId);

		ObjectMapper objectMapper = new ObjectMapper();
		CustomerOrderReplica.forEach(customerOrderReplica -> {
			try {

				// convert JSON string to Map
				Map<String, Object> customerOrderReplicaMap = objectMapper
						.readValue(customerOrderReplica.getCustomerOrderDetails(), Map.class);

				Object customerOrder = customerOrderReplicaMap.get("customerOrder");
				Map<String, Object> items = (Map<String, Object>) customerOrderReplicaMap.get("items");

				Object quanityList = items.get("quantity");
				Map customers = customerDetailsDao.getByContactNumberAndApartment(
						customerOrderReplica.getContactNumber(), customerOrderReplica.getApartmentId());

				System.out.println("customers" + customers.get("customerName"));

				// Apartments apartments =
				// apartmentDao.getApartmentById(customerOrderReplica.getApartmentId());
				customerOrderReplica.setApartmentName(
						customers.get("apartmentName") != null ? (String) customers.get("apartmentName") : null);

				customerOrderReplica.setCustomerDetails(customers);

				customerOrderReplica.setCustomerOrder(customerOrder);
				customerOrderReplica.setQuatityList(quanityList);

			} catch (Exception e) {
				e.printStackTrace();
			}

		});

		return CustomerOrderReplica;

	}

	@Override
	public CustomerOrderReplica getCustomerOrderReplicaByCartId(String cartId) {

		CustomerOrderReplica CustomerOrderReplica = customerOrderReplicaDoa.getCustomerOrderByCartId(cartId,
				currentUser.getContactNumber());

		ObjectMapper objectMapper = new ObjectMapper();
		try {

			// convert JSON string to Map
			Map<String, Object> customerOrderReplicaMap = objectMapper
					.readValue(CustomerOrderReplica.getCustomerOrderDetails(), Map.class);

			Object customerOrder = customerOrderReplicaMap.get("customerOrder");
			Map<String, Object> items = (Map<String, Object>) customerOrderReplicaMap.get("items");

			Object quanityList = items.get("quantity");
			Map customers = customerDetailsDao.getByContactNumberAndApartment(CustomerOrderReplica.getContactNumber(),
					CustomerOrderReplica.getApartmentId());

			System.out.println("customers" + customers.get("customerName"));

			// Apartments apartments =
			// apartmentDao.getApartmentById(customerOrderReplica.getApartmentId());
			CustomerOrderReplica.setApartmentName(
					customers.get("apartmentName") != null ? (String) customers.get("apartmentName") : null);

			CustomerOrderReplica.setCustomerDetails(customers);

			CustomerOrderReplica.setCustomerOrder(customerOrder);
			CustomerOrderReplica.setQuatityList(quanityList);

		} catch (Exception e) {
			e.printStackTrace();
		}

		return CustomerOrderReplica;

	}

	@Override
	public Map createCustomerOrderReplica(CustomerOrderReplicaRequest customerOrderReplicaRequest, String contactNumber,
			Integer aparmentId) {

		if (customerOrderReplicaRequest.getRazorPayRequest() != null) {

//			Map razorPay = consumerService.createRazorPayOrder(customerOrderReplicaRequest.getRazorPayRequest());
//			customerOrderReplicaRequest.setOrderId(razorPay.get("order") != null ? (String)((RazorPay) razorPay.get("order")).getId() : null);	
//	
//			createCustomerOrderReplicaService(customerOrderReplicaRequest, contactNumber, aparmentId);
//
//			razorPay.put("cartId", customerOrderReplicaRequest.getCartId());

			Map customerOrderReplicaMap = new HashMap<>();

			Map orderId = new HashMap<>();
			String transactionId = getMerchantTransactionId();
			orderId.put("id", transactionId);

			customerOrderReplicaMap.put("order", orderId);

			customerOrderReplicaRequest.setOrderId(transactionId);
			createCustomerOrderReplicaService(customerOrderReplicaRequest, contactNumber, aparmentId);

			customerOrderReplicaMap.put("cartId", customerOrderReplicaRequest.getCartId());

			try {
				customerOrderReplicaMap.put("phonePeResponse",
						phonepeServiceImpl.initiatePhonepePayment(transactionId,
								Integer.valueOf(customerOrderReplicaRequest.getRazorPayRequest().getAmount()),
								contactNumber, customerOrderReplicaRequest.getRedirectUrl(), customerOrderReplicaRequest.getCallBackUrl()));

			} catch (Exception e) {
				e.printStackTrace();
				customerOrderReplicaMap.put("phonePeResponse", new HashedMap<>());
			}

			return customerOrderReplicaMap;

		} else {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST,
					"paymentDetails transcation Details are mandatory");
		}

	}

	private static String getMerchantTransactionId() {

		return "OD_" + MerchantTransactionIdGenerator.getRandomString();
	}


	@Override
	public List<CustomerOrderReplica> getCustomerOrderByMoblieNo(String contactNumber,Integer aid) {
		
		Schedule latestschedule = customerOrderReplicaDoa.getlatestschedule();
		
		if (latestschedule != null && latestschedule.getCreationTimestamp()!=null) {
			
	        if (latestschedule.getStatus().equals(UserStatus.ACTIVE)) {
	        	
	        	Customers customer = customerDetailsDao.getByContactNoAndApartment(contactNumber, aid);
	        	if (customer != null) { // Ensure the customer exists
	        		List<CustomerOrder> customerOrderList = customerOrderReplicaDoa.getListCustomerOrderByCustomerId(customer.getCtid());
	        		
	                double totalOrderAmount = 0.0;
	       
                if (customerOrderList != null && !customerOrderList.isEmpty() && customerOrderList.add(customerOrder). {
                    for (CustomerOrder customerOrder : customerOrderList) {
                        Double orderAmount = customerOrder.getAmount();
                        
                        if(orderAmount>200) {}
                        if (orderAmount != null) {
                            totalOrderAmount += orderAmount;
                            if(totalOrderAmount>200) {
                            	totalOrderAmount+customerOrder
                            }
                        }
                    }
                    System.out.println("Total Order Amount: " + totalOrderAmount);
                    List<CustomerOrderReplica> customerOrderReplicas = new ArrayList<>();
                    return customerOrderReplicas;
                } else {
                    return Collections.emptyList(); // or return null or an appropriate value
                }
            } else {
              
                return null; // or an appropriate value
            }
        } else {
            // Handle the case when the latest schedule is not active
            return null; // or an appropriate value
        }
    } else {
        // Handle the case when there is no latest schedule or its creation timestamp is null
        return null; // or an appropriate value
    }
	}
}



----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3003)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2023-09-21 15:03:59.842
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3003)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2023-09-21 15:03:59.844
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3003)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2023-09-21 15:04:00.438
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.xyram.daydrop.serviceimpl;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.transaction.Transactional;

import org.apache.commons.collections4.map.HashedMap;
import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.server.ResponseStatusException;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.xyram.daydrop.admin.model.CurrentUser;
import com.xyram.daydrop.basemodel.Base64Wrapper;
import com.xyram.daydrop.basemodel.MerchantTransactionIdGenerator;
import com.xyram.daydrop.basemodel.PhonepeSerializer;
import com.xyram.daydrop.dao.ApartmentDao;
import com.xyram.daydrop.dao.CustomerDetailsDao;
import com.xyram.daydrop.dao.CustomerOrderDao;
import com.xyram.daydrop.dao.CustomerOrderReplicaDoa;
import com.xyram.daydrop.dao.SheduleDao;
import com.xyram.daydrop.enumtypes.UserStatus;
import com.xyram.daydrop.model.Apartments;
import com.xyram.daydrop.model.CustomerOrder;
import com.xyram.daydrop.model.CustomerOrderReplica;
import com.xyram.daydrop.model.Customers;
import com.xyram.daydrop.model.Schedule;
import com.xyram.daydrop.modelMapper.PaymentInstrument;
import com.xyram.daydrop.modelMapper.PhonePePayModel;
import com.xyram.daydrop.request.CustomerOrderReplicaRequest;
import com.xyram.daydrop.response.RazorPayRequest;
import com.xyram.daydrop.service.CustomerOrderPriceService;
import com.xyram.daydrop.service.CustomerOrderReplicaService;
import com.xyram.daydrop.util.HashEncoder;
import com.xyram.daydrop.util.RazorPay;
import com.xyram.daydrop.service.ConsumerService;

@Transactional
@Service
public class CustomerOrderReplicaServiceImpl implements CustomerOrderReplicaService {

	@Autowired
	CustomerOrderReplicaDoa customerOrderReplicaDoa;

	@Autowired
	ApartmentDao apartmentDao;

	@Autowired
	SheduleDao scheduleDao;

	@Autowired
	CustomerDetailsDao customerDetailsDao;

	@Autowired
	ConsumerService consumerService;

	@Autowired
	CurrentUser currentUser;

	@Autowired
	PhonepeServiceImpl phonepeServiceImpl;

	@Value("${merchant_id}")
	private String merchantId;

	@Value("${salt_key}")
	private String saltKey;

	@Value("${salt_index}")
	private String saltIndex;

	@Override
	public Map createCustomerOrderReplicaService(CustomerOrderReplicaRequest customerOrderReplicaRequest,
			String contactNumber, Integer aparmentId)

	{

		Map response = new HashedMap<>();

		response.put("message", "success");
		CustomerOrderReplica customerOrderReplica = null;

		if (customerOrderReplicaRequest.getCartId() == null) {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "cartId is mandatory ");
		}
		long razorPayCount = 0;
		if (customerOrderReplicaRequest.getOrderId() != null) {

			razorPayCount = customerOrderReplicaDoa.getRazorPayExistByCartId(customerOrderReplicaRequest.getOrderId());
		}

		if (customerOrderReplicaRequest.getCustomerDetails() == null) {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Order Details  is mandatory ");
		}

		customerOrderReplica = customerOrderReplicaDoa.getCustomerOrderByCartId(customerOrderReplicaRequest.getCartId(),
				contactNumber);

		if (customerOrderReplica != null) {
			customerOrderReplica.setCartId(customerOrderReplica.getCartId());

			if (customerOrderReplica.isOrdered()) {
				throw new ResponseStatusException(HttpStatus.CONFLICT, "Your Order is Placed With cart Details");
			}

//			if (razorPayCount >= 1 && !(customerOrderReplica.getRazorPayOrderId() != null
//					&& customerOrderReplica.getRazorPayOrderId().equals(customerOrderReplicaRequest.getOrderId()))) {
//				throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Razor Pay Id Are already Exist ");
//			}

			customerOrderReplica.setStatusType(customerOrderReplicaRequest.getStatusType());
			customerOrderReplica.setContactNumber(contactNumber);
			customerOrderReplica.setApartmentId(aparmentId);

			customerOrderReplica.setAttempts(customerOrderReplica.getAttempts() + 1);
			customerOrderReplica.setUpdatedTime(new Date());

			customerOrderReplica.setRazorPayOrderId(customerOrderReplicaRequest.getOrderId());

			try {

				JSONObject obj = new JSONObject(customerOrderReplicaRequest.getCustomerDetails());

				customerOrderReplica.setCustomerOrderDetails(obj != null ? obj.toString() : null);

				customerOrderReplicaDoa.updateCustomer(customerOrderReplica);
				return response;

			} catch (Exception e) {
				customerOrderReplica.setCustomerOrderDetails(customerOrderReplicaRequest.getCustomerDetails() != null
						? customerOrderReplicaRequest.getCustomerDetails().toString()
						: null);
				customerOrderReplicaDoa.updateCustomer(customerOrderReplica);
				return response;
			}

		} else {

			customerOrderReplica = new CustomerOrderReplica();
			customerOrderReplica.setContactNumber(contactNumber);
			customerOrderReplica.setApartmentId(aparmentId);
			customerOrderReplica.setCartId(customerOrderReplicaRequest.getCartId());
			customerOrderReplica.setStatusType(customerOrderReplicaRequest.getStatusType());

			if (razorPayCount > 0) {
				throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Razor Pay Id Are already Exist ");
			}

			customerOrderReplica.setRazorPayOrderId(customerOrderReplicaRequest.getOrderId());

			Schedule schedule = scheduleDao.getlatestScheduleCustomers();

			if (schedule != null) {

				try {
					customerOrderReplica.setSchedule(schedule.getsId() != null ? schedule.getsId().toString() : null);
				} catch (Exception e) {
					e.printStackTrace();
				}
			} else {
				throw new ResponseStatusException(HttpStatus.BAD_REQUEST,
						"Sorry We Are Not Accepting Any Order Right now");

			}

			try {

				JSONObject obj = new JSONObject(customerOrderReplicaRequest.getCustomerDetails());

				customerOrderReplica.setCustomerOrderDetails(obj != null ? obj.toString() : null);

				customerOrderReplicaDoa.updateCustomer(customerOrderReplica);
				return response;

			} catch (Exception e) {
				customerOrderReplica.setCustomerOrderDetails(customerOrderReplicaRequest.getCustomerDetails() != null
						? customerOrderReplicaRequest.getCustomerDetails().toString()
						: null);
				customerOrderReplicaDoa.updateCustomer(customerOrderReplica);
				return response;
			}

		}

	}

	@Override
	public List<CustomerOrderReplica> getAllCustomerOrderReplicas(Map<String, Object> request) {

		String statusType = null;
		String searchQuery = null;

		String schedule = null;

		Map filter = request.containsKey("filters") ? (Map) request.get("filters") : null;
		if (filter != null) {
			statusType = filter.containsKey("statusType") ? ((String) filter.get("statusType")).toLowerCase() : null;
			searchQuery = filter.containsKey("searchQuery") ? ((String) filter.get("searchQuery")).toLowerCase() : null;
			schedule = filter.containsKey("schedule") ? (String.valueOf(filter.get("schedule"))) : null;

		}

		List<CustomerOrderReplica> CustomerOrderReplica = customerOrderReplicaDoa
				.getAllcustomerOrderReplica(searchQuery, statusType, schedule);

		ObjectMapper objectMapper = new ObjectMapper();
		CustomerOrderReplica.forEach(customerOrderReplica -> {
			try {

				// convert JSON string to Map
				Map<String, Object> customerOrderReplicaMap = objectMapper
						.readValue(customerOrderReplica.getCustomerOrderDetails(), Map.class);

				Object customerOrder = customerOrderReplicaMap.get("customerOrder");
				Map<String, Object> items = (Map<String, Object>) customerOrderReplicaMap.get("items");

				Object quanityList = items.get("quantity");

				Map customers = customerDetailsDao.getByContactNumberAndApartment(
						customerOrderReplica.getContactNumber(), customerOrderReplica.getApartmentId());

				// Apartments apartments =
				// apartmentDao.getApartmentById(customerOrderReplica.getApartmentId());
				customerOrderReplica.setApartmentName(
						customers.get("apartmentName") != null ? (String) customers.get("apartmentName") : null);

				customerOrderReplica.setStreetName(
						customers.get("streetName") != null ? (String) customers.get("streetName") : null);

				customerOrderReplica.setCustomerDetails(customers);

				customerOrderReplica.setCustomerOrder(customerOrder);
				customerOrderReplica.setQuatityList(quanityList);

			} catch (Exception e) {
				e.printStackTrace();
			}

		});

		return CustomerOrderReplica;

	}

	@Override
	public List<CustomerOrderReplica> getAllCustomerOrderReplicasBySchedule(Map<String, Object> request) {

		String statusType = null;
		String searchQuery = null;

		String scheduleId = null;

		Schedule schedule = scheduleDao.getlatestScheduleCustomers();

		if (schedule != null) {

			try {
				scheduleId = schedule.getsId() != null ? schedule.getsId().toString() : null;
			} catch (Exception e) {
				e.printStackTrace();
			}
		}

		statusType = request.containsKey("statusType") ? ((String) request.get("statusType")).toLowerCase() : "Success";

		List<CustomerOrderReplica> CustomerOrderReplica = customerOrderReplicaDoa
				.getAllcustomerOrderReplicaBySchdeule(statusType, scheduleId);

		ObjectMapper objectMapper = new ObjectMapper();
		CustomerOrderReplica.forEach(customerOrderReplica -> {
			try {

				// convert JSON string to Map
				Map<String, Object> customerOrderReplicaMap = objectMapper
						.readValue(customerOrderReplica.getCustomerOrderDetails(), Map.class);

				Object customerOrder = customerOrderReplicaMap.get("customerOrder");
				Map<String, Object> items = (Map<String, Object>) customerOrderReplicaMap.get("items");

				Object quanityList = items.get("quantity");
				Map customers = customerDetailsDao.getByContactNumberAndApartment(
						customerOrderReplica.getContactNumber(), customerOrderReplica.getApartmentId());

				System.out.println("customers" + customers.get("customerName"));

				// Apartments apartments =
				// apartmentDao.getApartmentById(customerOrderReplica.getApartmentId());
				customerOrderReplica.setApartmentName(
						customers.get("apartmentName") != null ? (String) customers.get("apartmentName") : null);

				customerOrderReplica.setCustomerDetails(customers);

				customerOrderReplica.setCustomerOrder(customerOrder);
				customerOrderReplica.setQuatityList(quanityList);

			} catch (Exception e) {
				e.printStackTrace();
			}

		});

		return CustomerOrderReplica;

	}

	@Override
	public CustomerOrderReplica getCustomerOrderReplicaByCartId(String cartId) {

		CustomerOrderReplica CustomerOrderReplica = customerOrderReplicaDoa.getCustomerOrderByCartId(cartId,
				currentUser.getContactNumber());

		ObjectMapper objectMapper = new ObjectMapper();
		try {

			// convert JSON string to Map
			Map<String, Object> customerOrderReplicaMap = objectMapper
					.readValue(CustomerOrderReplica.getCustomerOrderDetails(), Map.class);

			Object customerOrder = customerOrderReplicaMap.get("customerOrder");
			Map<String, Object> items = (Map<String, Object>) customerOrderReplicaMap.get("items");

			Object quanityList = items.get("quantity");
			Map customers = customerDetailsDao.getByContactNumberAndApartment(CustomerOrderReplica.getContactNumber(),
					CustomerOrderReplica.getApartmentId());

			System.out.println("customers" + customers.get("customerName"));

			// Apartments apartments =
			// apartmentDao.getApartmentById(customerOrderReplica.getApartmentId());
			CustomerOrderReplica.setApartmentName(
					customers.get("apartmentName") != null ? (String) customers.get("apartmentName") : null);

			CustomerOrderReplica.setCustomerDetails(customers);

			CustomerOrderReplica.setCustomerOrder(customerOrder);
			CustomerOrderReplica.setQuatityList(quanityList);

		} catch (Exception e) {
			e.printStackTrace();
		}

		return CustomerOrderReplica;

	}

	@Override
	public Map createCustomerOrderReplica(CustomerOrderReplicaRequest customerOrderReplicaRequest, String contactNumber,
			Integer aparmentId) {

		if (customerOrderReplicaRequest.getRazorPayRequest() != null) {

//			Map razorPay = consumerService.createRazorPayOrder(customerOrderReplicaRequest.getRazorPayRequest());
//			customerOrderReplicaRequest.setOrderId(razorPay.get("order") != null ? (String)((RazorPay) razorPay.get("order")).getId() : null);	
//	
//			createCustomerOrderReplicaService(customerOrderReplicaRequest, contactNumber, aparmentId);
//
//			razorPay.put("cartId", customerOrderReplicaRequest.getCartId());

			Map customerOrderReplicaMap = new HashMap<>();

			Map orderId = new HashMap<>();
			String transactionId = getMerchantTransactionId();
			orderId.put("id", transactionId);

			customerOrderReplicaMap.put("order", orderId);

			customerOrderReplicaRequest.setOrderId(transactionId);
			createCustomerOrderReplicaService(customerOrderReplicaRequest, contactNumber, aparmentId);

			customerOrderReplicaMap.put("cartId", customerOrderReplicaRequest.getCartId());

			try {
				customerOrderReplicaMap.put("phonePeResponse",
						phonepeServiceImpl.initiatePhonepePayment(transactionId,
								Integer.valueOf(customerOrderReplicaRequest.getRazorPayRequest().getAmount()),
								contactNumber, customerOrderReplicaRequest.getRedirectUrl(), customerOrderReplicaRequest.getCallBackUrl()));

			} catch (Exception e) {
				e.printStackTrace();
				customerOrderReplicaMap.put("phonePeResponse", new HashedMap<>());
			}

			return customerOrderReplicaMap;

		} else {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST,
					"paymentDetails transcation Details are mandatory");
		}

	}

	private static String getMerchantTransactionId() {

		return "OD_" + MerchantTransactionIdGenerator.getRandomString();
	}


	@Override
	public List<CustomerOrderReplica> getCustomerOrderByMoblieNo(String contactNumber,Integer aid) {
		
		Schedule latestschedule = customerOrderReplicaDoa.getlatestschedule();
		
		if (latestschedule != null && latestschedule.getCreationTimestamp()!=null) {
			
	        if (latestschedule.getStatus().equals(UserStatus.ACTIVE)) {
	        	
	        	Customers customer = customerDetailsDao.getByContactNoAndApartment(contactNumber, aid);
	        	if (customer != null) { // Ensure the customer exists
	        		List<CustomerOrder> customerOrderList = customerOrderReplicaDoa.getListCustomerOrderByCustomerId(customer.getCtid());
	        		
	                double totalOrderAmount = 0.0;
	       
                if (customerOrderList != null && !customerOrderList.isEmpty() && customerOrderList.add(customerOrder). {
                    for (CustomerOrder customerOrder : customerOrderList) {
                        Double orderAmount = customerOrder.getAmount();
                        
                        if(orderAmount>200) {
                        	
                        }
                        if (orderAmount != null) {
                            totalOrderAmount += orderAmount;
                            if(totalOrderAmount>200) {
                            	totalOrderAmount+customerOrder
                            }
                        }
                    }
                    System.out.println("Total Order Amount: " + totalOrderAmount);
                    List<CustomerOrderReplica> customerOrderReplicas = new ArrayList<>();
                    return customerOrderReplicas;
                } else {
                    return Collections.emptyList(); // or return null or an appropriate value
                }
            } else {
              
                return null; // or an appropriate value
            }
        } else {
            // Handle the case when the latest schedule is not active
            return null; // or an appropriate value
        }
    } else {
        // Handle the case when there is no latest schedule or its creation timestamp is null
        return null; // or an appropriate value
    }
	}
}



----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3003)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2023-09-21 15:04:00.440
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3003)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2023-09-21 15:04:00.442
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3003)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2023-09-21 15:04:00.546
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.xyram.daydrop.serviceimpl;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.transaction.Transactional;

import org.apache.commons.collections4.map.HashedMap;
import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.server.ResponseStatusException;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.xyram.daydrop.admin.model.CurrentUser;
import com.xyram.daydrop.basemodel.Base64Wrapper;
import com.xyram.daydrop.basemodel.MerchantTransactionIdGenerator;
import com.xyram.daydrop.basemodel.PhonepeSerializer;
import com.xyram.daydrop.dao.ApartmentDao;
import com.xyram.daydrop.dao.CustomerDetailsDao;
import com.xyram.daydrop.dao.CustomerOrderDao;
import com.xyram.daydrop.dao.CustomerOrderReplicaDoa;
import com.xyram.daydrop.dao.SheduleDao;
import com.xyram.daydrop.enumtypes.UserStatus;
import com.xyram.daydrop.model.Apartments;
import com.xyram.daydrop.model.CustomerOrder;
import com.xyram.daydrop.model.CustomerOrderReplica;
import com.xyram.daydrop.model.Customers;
import com.xyram.daydrop.model.Schedule;
import com.xyram.daydrop.modelMapper.PaymentInstrument;
import com.xyram.daydrop.modelMapper.PhonePePayModel;
import com.xyram.daydrop.request.CustomerOrderReplicaRequest;
import com.xyram.daydrop.response.RazorPayRequest;
import com.xyram.daydrop.service.CustomerOrderPriceService;
import com.xyram.daydrop.service.CustomerOrderReplicaService;
import com.xyram.daydrop.util.HashEncoder;
import com.xyram.daydrop.util.RazorPay;
import com.xyram.daydrop.service.ConsumerService;

@Transactional
@Service
public class CustomerOrderReplicaServiceImpl implements CustomerOrderReplicaService {

	@Autowired
	CustomerOrderReplicaDoa customerOrderReplicaDoa;

	@Autowired
	ApartmentDao apartmentDao;

	@Autowired
	SheduleDao scheduleDao;

	@Autowired
	CustomerDetailsDao customerDetailsDao;

	@Autowired
	ConsumerService consumerService;

	@Autowired
	CurrentUser currentUser;

	@Autowired
	PhonepeServiceImpl phonepeServiceImpl;

	@Value("${merchant_id}")
	private String merchantId;

	@Value("${salt_key}")
	private String saltKey;

	@Value("${salt_index}")
	private String saltIndex;

	@Override
	public Map createCustomerOrderReplicaService(CustomerOrderReplicaRequest customerOrderReplicaRequest,
			String contactNumber, Integer aparmentId)

	{

		Map response = new HashedMap<>();

		response.put("message", "success");
		CustomerOrderReplica customerOrderReplica = null;

		if (customerOrderReplicaRequest.getCartId() == null) {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "cartId is mandatory ");
		}
		long razorPayCount = 0;
		if (customerOrderReplicaRequest.getOrderId() != null) {

			razorPayCount = customerOrderReplicaDoa.getRazorPayExistByCartId(customerOrderReplicaRequest.getOrderId());
		}

		if (customerOrderReplicaRequest.getCustomerDetails() == null) {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Order Details  is mandatory ");
		}

		customerOrderReplica = customerOrderReplicaDoa.getCustomerOrderByCartId(customerOrderReplicaRequest.getCartId(),
				contactNumber);

		if (customerOrderReplica != null) {
			customerOrderReplica.setCartId(customerOrderReplica.getCartId());

			if (customerOrderReplica.isOrdered()) {
				throw new ResponseStatusException(HttpStatus.CONFLICT, "Your Order is Placed With cart Details");
			}

//			if (razorPayCount >= 1 && !(customerOrderReplica.getRazorPayOrderId() != null
//					&& customerOrderReplica.getRazorPayOrderId().equals(customerOrderReplicaRequest.getOrderId()))) {
//				throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Razor Pay Id Are already Exist ");
//			}

			customerOrderReplica.setStatusType(customerOrderReplicaRequest.getStatusType());
			customerOrderReplica.setContactNumber(contactNumber);
			customerOrderReplica.setApartmentId(aparmentId);

			customerOrderReplica.setAttempts(customerOrderReplica.getAttempts() + 1);
			customerOrderReplica.setUpdatedTime(new Date());

			customerOrderReplica.setRazorPayOrderId(customerOrderReplicaRequest.getOrderId());

			try {

				JSONObject obj = new JSONObject(customerOrderReplicaRequest.getCustomerDetails());

				customerOrderReplica.setCustomerOrderDetails(obj != null ? obj.toString() : null);

				customerOrderReplicaDoa.updateCustomer(customerOrderReplica);
				return response;

			} catch (Exception e) {
				customerOrderReplica.setCustomerOrderDetails(customerOrderReplicaRequest.getCustomerDetails() != null
						? customerOrderReplicaRequest.getCustomerDetails().toString()
						: null);
				customerOrderReplicaDoa.updateCustomer(customerOrderReplica);
				return response;
			}

		} else {

			customerOrderReplica = new CustomerOrderReplica();
			customerOrderReplica.setContactNumber(contactNumber);
			customerOrderReplica.setApartmentId(aparmentId);
			customerOrderReplica.setCartId(customerOrderReplicaRequest.getCartId());
			customerOrderReplica.setStatusType(customerOrderReplicaRequest.getStatusType());

			if (razorPayCount > 0) {
				throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Razor Pay Id Are already Exist ");
			}

			customerOrderReplica.setRazorPayOrderId(customerOrderReplicaRequest.getOrderId());

			Schedule schedule = scheduleDao.getlatestScheduleCustomers();

			if (schedule != null) {

				try {
					customerOrderReplica.setSchedule(schedule.getsId() != null ? schedule.getsId().toString() : null);
				} catch (Exception e) {
					e.printStackTrace();
				}
			} else {
				throw new ResponseStatusException(HttpStatus.BAD_REQUEST,
						"Sorry We Are Not Accepting Any Order Right now");

			}

			try {

				JSONObject obj = new JSONObject(customerOrderReplicaRequest.getCustomerDetails());

				customerOrderReplica.setCustomerOrderDetails(obj != null ? obj.toString() : null);

				customerOrderReplicaDoa.updateCustomer(customerOrderReplica);
				return response;

			} catch (Exception e) {
				customerOrderReplica.setCustomerOrderDetails(customerOrderReplicaRequest.getCustomerDetails() != null
						? customerOrderReplicaRequest.getCustomerDetails().toString()
						: null);
				customerOrderReplicaDoa.updateCustomer(customerOrderReplica);
				return response;
			}

		}

	}

	@Override
	public List<CustomerOrderReplica> getAllCustomerOrderReplicas(Map<String, Object> request) {

		String statusType = null;
		String searchQuery = null;

		String schedule = null;

		Map filter = request.containsKey("filters") ? (Map) request.get("filters") : null;
		if (filter != null) {
			statusType = filter.containsKey("statusType") ? ((String) filter.get("statusType")).toLowerCase() : null;
			searchQuery = filter.containsKey("searchQuery") ? ((String) filter.get("searchQuery")).toLowerCase() : null;
			schedule = filter.containsKey("schedule") ? (String.valueOf(filter.get("schedule"))) : null;

		}

		List<CustomerOrderReplica> CustomerOrderReplica = customerOrderReplicaDoa
				.getAllcustomerOrderReplica(searchQuery, statusType, schedule);

		ObjectMapper objectMapper = new ObjectMapper();
		CustomerOrderReplica.forEach(customerOrderReplica -> {
			try {

				// convert JSON string to Map
				Map<String, Object> customerOrderReplicaMap = objectMapper
						.readValue(customerOrderReplica.getCustomerOrderDetails(), Map.class);

				Object customerOrder = customerOrderReplicaMap.get("customerOrder");
				Map<String, Object> items = (Map<String, Object>) customerOrderReplicaMap.get("items");

				Object quanityList = items.get("quantity");

				Map customers = customerDetailsDao.getByContactNumberAndApartment(
						customerOrderReplica.getContactNumber(), customerOrderReplica.getApartmentId());

				// Apartments apartments =
				// apartmentDao.getApartmentById(customerOrderReplica.getApartmentId());
				customerOrderReplica.setApartmentName(
						customers.get("apartmentName") != null ? (String) customers.get("apartmentName") : null);

				customerOrderReplica.setStreetName(
						customers.get("streetName") != null ? (String) customers.get("streetName") : null);

				customerOrderReplica.setCustomerDetails(customers);

				customerOrderReplica.setCustomerOrder(customerOrder);
				customerOrderReplica.setQuatityList(quanityList);

			} catch (Exception e) {
				e.printStackTrace();
			}

		});

		return CustomerOrderReplica;

	}

	@Override
	public List<CustomerOrderReplica> getAllCustomerOrderReplicasBySchedule(Map<String, Object> request) {

		String statusType = null;
		String searchQuery = null;

		String scheduleId = null;

		Schedule schedule = scheduleDao.getlatestScheduleCustomers();

		if (schedule != null) {

			try {
				scheduleId = schedule.getsId() != null ? schedule.getsId().toString() : null;
			} catch (Exception e) {
				e.printStackTrace();
			}
		}

		statusType = request.containsKey("statusType") ? ((String) request.get("statusType")).toLowerCase() : "Success";

		List<CustomerOrderReplica> CustomerOrderReplica = customerOrderReplicaDoa
				.getAllcustomerOrderReplicaBySchdeule(statusType, scheduleId);

		ObjectMapper objectMapper = new ObjectMapper();
		CustomerOrderReplica.forEach(customerOrderReplica -> {
			try {

				// convert JSON string to Map
				Map<String, Object> customerOrderReplicaMap = objectMapper
						.readValue(customerOrderReplica.getCustomerOrderDetails(), Map.class);

				Object customerOrder = customerOrderReplicaMap.get("customerOrder");
				Map<String, Object> items = (Map<String, Object>) customerOrderReplicaMap.get("items");

				Object quanityList = items.get("quantity");
				Map customers = customerDetailsDao.getByContactNumberAndApartment(
						customerOrderReplica.getContactNumber(), customerOrderReplica.getApartmentId());

				System.out.println("customers" + customers.get("customerName"));

				// Apartments apartments =
				// apartmentDao.getApartmentById(customerOrderReplica.getApartmentId());
				customerOrderReplica.setApartmentName(
						customers.get("apartmentName") != null ? (String) customers.get("apartmentName") : null);

				customerOrderReplica.setCustomerDetails(customers);

				customerOrderReplica.setCustomerOrder(customerOrder);
				customerOrderReplica.setQuatityList(quanityList);

			} catch (Exception e) {
				e.printStackTrace();
			}

		});

		return CustomerOrderReplica;

	}

	@Override
	public CustomerOrderReplica getCustomerOrderReplicaByCartId(String cartId) {

		CustomerOrderReplica CustomerOrderReplica = customerOrderReplicaDoa.getCustomerOrderByCartId(cartId,
				currentUser.getContactNumber());

		ObjectMapper objectMapper = new ObjectMapper();
		try {

			// convert JSON string to Map
			Map<String, Object> customerOrderReplicaMap = objectMapper
					.readValue(CustomerOrderReplica.getCustomerOrderDetails(), Map.class);

			Object customerOrder = customerOrderReplicaMap.get("customerOrder");
			Map<String, Object> items = (Map<String, Object>) customerOrderReplicaMap.get("items");

			Object quanityList = items.get("quantity");
			Map customers = customerDetailsDao.getByContactNumberAndApartment(CustomerOrderReplica.getContactNumber(),
					CustomerOrderReplica.getApartmentId());

			System.out.println("customers" + customers.get("customerName"));

			// Apartments apartments =
			// apartmentDao.getApartmentById(customerOrderReplica.getApartmentId());
			CustomerOrderReplica.setApartmentName(
					customers.get("apartmentName") != null ? (String) customers.get("apartmentName") : null);

			CustomerOrderReplica.setCustomerDetails(customers);

			CustomerOrderReplica.setCustomerOrder(customerOrder);
			CustomerOrderReplica.setQuatityList(quanityList);

		} catch (Exception e) {
			e.printStackTrace();
		}

		return CustomerOrderReplica;

	}

	@Override
	public Map createCustomerOrderReplica(CustomerOrderReplicaRequest customerOrderReplicaRequest, String contactNumber,
			Integer aparmentId) {

		if (customerOrderReplicaRequest.getRazorPayRequest() != null) {

//			Map razorPay = consumerService.createRazorPayOrder(customerOrderReplicaRequest.getRazorPayRequest());
//			customerOrderReplicaRequest.setOrderId(razorPay.get("order") != null ? (String)((RazorPay) razorPay.get("order")).getId() : null);	
//	
//			createCustomerOrderReplicaService(customerOrderReplicaRequest, contactNumber, aparmentId);
//
//			razorPay.put("cartId", customerOrderReplicaRequest.getCartId());

			Map customerOrderReplicaMap = new HashMap<>();

			Map orderId = new HashMap<>();
			String transactionId = getMerchantTransactionId();
			orderId.put("id", transactionId);

			customerOrderReplicaMap.put("order", orderId);

			customerOrderReplicaRequest.setOrderId(transactionId);
			createCustomerOrderReplicaService(customerOrderReplicaRequest, contactNumber, aparmentId);

			customerOrderReplicaMap.put("cartId", customerOrderReplicaRequest.getCartId());

			try {
				customerOrderReplicaMap.put("phonePeResponse",
						phonepeServiceImpl.initiatePhonepePayment(transactionId,
								Integer.valueOf(customerOrderReplicaRequest.getRazorPayRequest().getAmount()),
								contactNumber, customerOrderReplicaRequest.getRedirectUrl(), customerOrderReplicaRequest.getCallBackUrl()));

			} catch (Exception e) {
				e.printStackTrace();
				customerOrderReplicaMap.put("phonePeResponse", new HashedMap<>());
			}

			return customerOrderReplicaMap;

		} else {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST,
					"paymentDetails transcation Details are mandatory");
		}

	}

	private static String getMerchantTransactionId() {

		return "OD_" + MerchantTransactionIdGenerator.getRandomString();
	}


	@Override
	public List<CustomerOrderReplica> getCustomerOrderByMoblieNo(String contactNumber,Integer aid) {
		
		Schedule latestschedule = customerOrderReplicaDoa.getlatestschedule();
		
		if (latestschedule != null && latestschedule.getCreationTimestamp()!=null) {
			
	        if (latestschedule.getStatus().equals(UserStatus.ACTIVE)) {
	        	
	        	Customers customer = customerDetailsDao.getByContactNoAndApartment(contactNumber, aid);
	        	if (customer != null) { // Ensure the customer exists
	        		List<CustomerOrder> customerOrderList = customerOrderReplicaDoa.getListCustomerOrderByCustomerId(customer.getCtid());
	        		
	                double totalOrderAmount = 0.0;
	       
                if (customerOrderList != null && !customerOrderList.isEmpty() && customerOrderList.add(customerOrder). {
                    for (CustomerOrder customerOrder : customerOrderList) {
                        Double orderAmount = customerOrder.getAmount();
                        
                        if(orderAmount>200) {
                        	
                        }
                        if (orderAmount != null) {
                            totalOrderAmount += orderAmount;
                            if(totalOrderAmount>200) {
                            	totalOrderAmount+customerOrder
                            }
                        }
                    }
                    System.out.println("Total Order Amount: " + totalOrderAmount);
                    List<CustomerOrderReplica> customerOrderReplicas = new ArrayList<>();
                    return customerOrderReplicas;
                } else {
                    return Collections.emptyList(); // or return null or an appropriate value
                }
            } else {
              
                return null; // or an appropriate value
            }
        } else {
            // Handle the case when the latest schedule is not active
            return null; // or an appropriate value
        }
    } else {
        // Handle the case when there is no latest schedule or its creation timestamp is null
        return null; // or an appropriate value
    }
	}
}



----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3003)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-09-21 15:04:00.549
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3003)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-09-21 15:04:00.551
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3003)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2023-09-21 15:04:05.647
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.xyram.daydrop.serviceimpl;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.transaction.Transactional;

import org.apache.commons.collections4.map.HashedMap;
import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.server.ResponseStatusException;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.xyram.daydrop.admin.model.CurrentUser;
import com.xyram.daydrop.basemodel.Base64Wrapper;
import com.xyram.daydrop.basemodel.MerchantTransactionIdGenerator;
import com.xyram.daydrop.basemodel.PhonepeSerializer;
import com.xyram.daydrop.dao.ApartmentDao;
import com.xyram.daydrop.dao.CustomerDetailsDao;
import com.xyram.daydrop.dao.CustomerOrderDao;
import com.xyram.daydrop.dao.CustomerOrderReplicaDoa;
import com.xyram.daydrop.dao.SheduleDao;
import com.xyram.daydrop.enumtypes.UserStatus;
import com.xyram.daydrop.model.Apartments;
import com.xyram.daydrop.model.CustomerOrder;
import com.xyram.daydrop.model.CustomerOrderReplica;
import com.xyram.daydrop.model.Customers;
import com.xyram.daydrop.model.Schedule;
import com.xyram.daydrop.modelMapper.PaymentInstrument;
import com.xyram.daydrop.modelMapper.PhonePePayModel;
import com.xyram.daydrop.request.CustomerOrderReplicaRequest;
import com.xyram.daydrop.response.RazorPayRequest;
import com.xyram.daydrop.service.CustomerOrderPriceService;
import com.xyram.daydrop.service.CustomerOrderReplicaService;
import com.xyram.daydrop.util.HashEncoder;
import com.xyram.daydrop.util.RazorPay;
import com.xyram.daydrop.service.ConsumerService;

@Transactional
@Service
public class CustomerOrderReplicaServiceImpl implements CustomerOrderReplicaService {

	@Autowired
	CustomerOrderReplicaDoa customerOrderReplicaDoa;

	@Autowired
	ApartmentDao apartmentDao;

	@Autowired
	SheduleDao scheduleDao;

	@Autowired
	CustomerDetailsDao customerDetailsDao;

	@Autowired
	ConsumerService consumerService;

	@Autowired
	CurrentUser currentUser;

	@Autowired
	PhonepeServiceImpl phonepeServiceImpl;

	@Value("${merchant_id}")
	private String merchantId;

	@Value("${salt_key}")
	private String saltKey;

	@Value("${salt_index}")
	private String saltIndex;

	@Override
	public Map createCustomerOrderReplicaService(CustomerOrderReplicaRequest customerOrderReplicaRequest,
			String contactNumber, Integer aparmentId)

	{

		Map response = new HashedMap<>();

		response.put("message", "success");
		CustomerOrderReplica customerOrderReplica = null;

		if (customerOrderReplicaRequest.getCartId() == null) {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "cartId is mandatory ");
		}
		long razorPayCount = 0;
		if (customerOrderReplicaRequest.getOrderId() != null) {

			razorPayCount = customerOrderReplicaDoa.getRazorPayExistByCartId(customerOrderReplicaRequest.getOrderId());
		}

		if (customerOrderReplicaRequest.getCustomerDetails() == null) {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Order Details  is mandatory ");
		}

		customerOrderReplica = customerOrderReplicaDoa.getCustomerOrderByCartId(customerOrderReplicaRequest.getCartId(),
				contactNumber);

		if (customerOrderReplica != null) {
			customerOrderReplica.setCartId(customerOrderReplica.getCartId());

			if (customerOrderReplica.isOrdered()) {
				throw new ResponseStatusException(HttpStatus.CONFLICT, "Your Order is Placed With cart Details");
			}

//			if (razorPayCount >= 1 && !(customerOrderReplica.getRazorPayOrderId() != null
//					&& customerOrderReplica.getRazorPayOrderId().equals(customerOrderReplicaRequest.getOrderId()))) {
//				throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Razor Pay Id Are already Exist ");
//			}

			customerOrderReplica.setStatusType(customerOrderReplicaRequest.getStatusType());
			customerOrderReplica.setContactNumber(contactNumber);
			customerOrderReplica.setApartmentId(aparmentId);

			customerOrderReplica.setAttempts(customerOrderReplica.getAttempts() + 1);
			customerOrderReplica.setUpdatedTime(new Date());

			customerOrderReplica.setRazorPayOrderId(customerOrderReplicaRequest.getOrderId());

			try {

				JSONObject obj = new JSONObject(customerOrderReplicaRequest.getCustomerDetails());

				customerOrderReplica.setCustomerOrderDetails(obj != null ? obj.toString() : null);

				customerOrderReplicaDoa.updateCustomer(customerOrderReplica);
				return response;

			} catch (Exception e) {
				customerOrderReplica.setCustomerOrderDetails(customerOrderReplicaRequest.getCustomerDetails() != null
						? customerOrderReplicaRequest.getCustomerDetails().toString()
						: null);
				customerOrderReplicaDoa.updateCustomer(customerOrderReplica);
				return response;
			}

		} else {

			customerOrderReplica = new CustomerOrderReplica();
			customerOrderReplica.setContactNumber(contactNumber);
			customerOrderReplica.setApartmentId(aparmentId);
			customerOrderReplica.setCartId(customerOrderReplicaRequest.getCartId());
			customerOrderReplica.setStatusType(customerOrderReplicaRequest.getStatusType());

			if (razorPayCount > 0) {
				throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Razor Pay Id Are already Exist ");
			}

			customerOrderReplica.setRazorPayOrderId(customerOrderReplicaRequest.getOrderId());

			Schedule schedule = scheduleDao.getlatestScheduleCustomers();

			if (schedule != null) {

				try {
					customerOrderReplica.setSchedule(schedule.getsId() != null ? schedule.getsId().toString() : null);
				} catch (Exception e) {
					e.printStackTrace();
				}
			} else {
				throw new ResponseStatusException(HttpStatus.BAD_REQUEST,
						"Sorry We Are Not Accepting Any Order Right now");

			}

			try {

				JSONObject obj = new JSONObject(customerOrderReplicaRequest.getCustomerDetails());

				customerOrderReplica.setCustomerOrderDetails(obj != null ? obj.toString() : null);

				customerOrderReplicaDoa.updateCustomer(customerOrderReplica);
				return response;

			} catch (Exception e) {
				customerOrderReplica.setCustomerOrderDetails(customerOrderReplicaRequest.getCustomerDetails() != null
						? customerOrderReplicaRequest.getCustomerDetails().toString()
						: null);
				customerOrderReplicaDoa.updateCustomer(customerOrderReplica);
				return response;
			}

		}

	}

	@Override
	public List<CustomerOrderReplica> getAllCustomerOrderReplicas(Map<String, Object> request) {

		String statusType = null;
		String searchQuery = null;

		String schedule = null;

		Map filter = request.containsKey("filters") ? (Map) request.get("filters") : null;
		if (filter != null) {
			statusType = filter.containsKey("statusType") ? ((String) filter.get("statusType")).toLowerCase() : null;
			searchQuery = filter.containsKey("searchQuery") ? ((String) filter.get("searchQuery")).toLowerCase() : null;
			schedule = filter.containsKey("schedule") ? (String.valueOf(filter.get("schedule"))) : null;

		}

		List<CustomerOrderReplica> CustomerOrderReplica = customerOrderReplicaDoa
				.getAllcustomerOrderReplica(searchQuery, statusType, schedule);

		ObjectMapper objectMapper = new ObjectMapper();
		CustomerOrderReplica.forEach(customerOrderReplica -> {
			try {

				// convert JSON string to Map
				Map<String, Object> customerOrderReplicaMap = objectMapper
						.readValue(customerOrderReplica.getCustomerOrderDetails(), Map.class);

				Object customerOrder = customerOrderReplicaMap.get("customerOrder");
				Map<String, Object> items = (Map<String, Object>) customerOrderReplicaMap.get("items");

				Object quanityList = items.get("quantity");

				Map customers = customerDetailsDao.getByContactNumberAndApartment(
						customerOrderReplica.getContactNumber(), customerOrderReplica.getApartmentId());

				// Apartments apartments =
				// apartmentDao.getApartmentById(customerOrderReplica.getApartmentId());
				customerOrderReplica.setApartmentName(
						customers.get("apartmentName") != null ? (String) customers.get("apartmentName") : null);

				customerOrderReplica.setStreetName(
						customers.get("streetName") != null ? (String) customers.get("streetName") : null);

				customerOrderReplica.setCustomerDetails(customers);

				customerOrderReplica.setCustomerOrder(customerOrder);
				customerOrderReplica.setQuatityList(quanityList);

			} catch (Exception e) {
				e.printStackTrace();
			}

		});

		return CustomerOrderReplica;

	}

	@Override
	public List<CustomerOrderReplica> getAllCustomerOrderReplicasBySchedule(Map<String, Object> request) {

		String statusType = null;
		String searchQuery = null;

		String scheduleId = null;

		Schedule schedule = scheduleDao.getlatestScheduleCustomers();

		if (schedule != null) {

			try {
				scheduleId = schedule.getsId() != null ? schedule.getsId().toString() : null;
			} catch (Exception e) {
				e.printStackTrace();
			}
		}

		statusType = request.containsKey("statusType") ? ((String) request.get("statusType")).toLowerCase() : "Success";

		List<CustomerOrderReplica> CustomerOrderReplica = customerOrderReplicaDoa
				.getAllcustomerOrderReplicaBySchdeule(statusType, scheduleId);

		ObjectMapper objectMapper = new ObjectMapper();
		CustomerOrderReplica.forEach(customerOrderReplica -> {
			try {

				// convert JSON string to Map
				Map<String, Object> customerOrderReplicaMap = objectMapper
						.readValue(customerOrderReplica.getCustomerOrderDetails(), Map.class);

				Object customerOrder = customerOrderReplicaMap.get("customerOrder");
				Map<String, Object> items = (Map<String, Object>) customerOrderReplicaMap.get("items");

				Object quanityList = items.get("quantity");
				Map customers = customerDetailsDao.getByContactNumberAndApartment(
						customerOrderReplica.getContactNumber(), customerOrderReplica.getApartmentId());

				System.out.println("customers" + customers.get("customerName"));

				// Apartments apartments =
				// apartmentDao.getApartmentById(customerOrderReplica.getApartmentId());
				customerOrderReplica.setApartmentName(
						customers.get("apartmentName") != null ? (String) customers.get("apartmentName") : null);

				customerOrderReplica.setCustomerDetails(customers);

				customerOrderReplica.setCustomerOrder(customerOrder);
				customerOrderReplica.setQuatityList(quanityList);

			} catch (Exception e) {
				e.printStackTrace();
			}

		});

		return CustomerOrderReplica;

	}

	@Override
	public CustomerOrderReplica getCustomerOrderReplicaByCartId(String cartId) {

		CustomerOrderReplica CustomerOrderReplica = customerOrderReplicaDoa.getCustomerOrderByCartId(cartId,
				currentUser.getContactNumber());

		ObjectMapper objectMapper = new ObjectMapper();
		try {

			// convert JSON string to Map
			Map<String, Object> customerOrderReplicaMap = objectMapper
					.readValue(CustomerOrderReplica.getCustomerOrderDetails(), Map.class);

			Object customerOrder = customerOrderReplicaMap.get("customerOrder");
			Map<String, Object> items = (Map<String, Object>) customerOrderReplicaMap.get("items");

			Object quanityList = items.get("quantity");
			Map customers = customerDetailsDao.getByContactNumberAndApartment(CustomerOrderReplica.getContactNumber(),
					CustomerOrderReplica.getApartmentId());

			System.out.println("customers" + customers.get("customerName"));

			// Apartments apartments =
			// apartmentDao.getApartmentById(customerOrderReplica.getApartmentId());
			CustomerOrderReplica.setApartmentName(
					customers.get("apartmentName") != null ? (String) customers.get("apartmentName") : null);

			CustomerOrderReplica.setCustomerDetails(customers);

			CustomerOrderReplica.setCustomerOrder(customerOrder);
			CustomerOrderReplica.setQuatityList(quanityList);

		} catch (Exception e) {
			e.printStackTrace();
		}

		return CustomerOrderReplica;

	}

	@Override
	public Map createCustomerOrderReplica(CustomerOrderReplicaRequest customerOrderReplicaRequest, String contactNumber,
			Integer aparmentId) {

		if (customerOrderReplicaRequest.getRazorPayRequest() != null) {

//			Map razorPay = consumerService.createRazorPayOrder(customerOrderReplicaRequest.getRazorPayRequest());
//			customerOrderReplicaRequest.setOrderId(razorPay.get("order") != null ? (String)((RazorPay) razorPay.get("order")).getId() : null);	
//	
//			createCustomerOrderReplicaService(customerOrderReplicaRequest, contactNumber, aparmentId);
//
//			razorPay.put("cartId", customerOrderReplicaRequest.getCartId());

			Map customerOrderReplicaMap = new HashMap<>();

			Map orderId = new HashMap<>();
			String transactionId = getMerchantTransactionId();
			orderId.put("id", transactionId);

			customerOrderReplicaMap.put("order", orderId);

			customerOrderReplicaRequest.setOrderId(transactionId);
			createCustomerOrderReplicaService(customerOrderReplicaRequest, contactNumber, aparmentId);

			customerOrderReplicaMap.put("cartId", customerOrderReplicaRequest.getCartId());

			try {
				customerOrderReplicaMap.put("phonePeResponse",
						phonepeServiceImpl.initiatePhonepePayment(transactionId,
								Integer.valueOf(customerOrderReplicaRequest.getRazorPayRequest().getAmount()),
								contactNumber, customerOrderReplicaRequest.getRedirectUrl(), customerOrderReplicaRequest.getCallBackUrl()));

			} catch (Exception e) {
				e.printStackTrace();
				customerOrderReplicaMap.put("phonePeResponse", new HashedMap<>());
			}

			return customerOrderReplicaMap;

		} else {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST,
					"paymentDetails transcation Details are mandatory");
		}

	}

	private static String getMerchantTransactionId() {

		return "OD_" + MerchantTransactionIdGenerator.getRandomString();
	}


	@Override
	public List<CustomerOrderReplica> getCustomerOrderByMoblieNo(String contactNumber,Integer aid) {
		
		Schedule latestschedule = customerOrderReplicaDoa.getlatestschedule();
		
		if (latestschedule != null && latestschedule.getCreationTimestamp()!=null) {
			
	        if (latestschedule.getStatus().equals(UserStatus.ACTIVE)) {
	        	
	        	Customers customer = customerDetailsDao.getByContactNoAndApartment(contactNumber, aid);
	        	if (customer != null) { // Ensure the customer exists
	        		List<CustomerOrder> customerOrderList = customerOrderReplicaDoa.getListCustomerOrderByCustomerId(customer.getCtid());
	        		
	                double totalOrderAmount = 0.0;
	       
                if (customerOrderList != null && !customerOrderList.isEmpty() && customerOrderList.add(customerOrder). {
                    for (CustomerOrder customerOrder : customerOrderList) {
                        Double orderAmount = customerOrder.getAmount();
                        
                        if(orderAmount>200) {
                        	
                        }
                        if (orderAmount != null) {
                            totalOrderAmount += orderAmount;
                            if(totalOrderAmount>200) {
                            	totalOrderAmount+customerOrder
                            }
                        }
                    }
                    System.out.println("Total Order Amount: " + totalOrderAmount);
                    List<CustomerOrderReplica> customerOrderReplicas = new ArrayList<>();
                    return customerOrderReplicas;
                } else {
                    return Collections.emptyList(); // or return null or an appropriate value
                }
            } else {
              
                return null; // or an appropriate value
            }
        } else {
            // Handle the case when the latest schedule is not active
            return null; // or an appropriate value
        }
    } else {
        // Handle the case when there is no latest schedule or its creation timestamp is null
        return null; // or an appropriate value
    }
	}
}



----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3003)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-09-21 15:04:05.648
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3003)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-09-21 15:04:05.650
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3003)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2023-09-21 15:04:10.032
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.xyram.daydrop.serviceimpl;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.transaction.Transactional;

import org.apache.commons.collections4.map.HashedMap;
import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.server.ResponseStatusException;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.xyram.daydrop.admin.model.CurrentUser;
import com.xyram.daydrop.basemodel.Base64Wrapper;
import com.xyram.daydrop.basemodel.MerchantTransactionIdGenerator;
import com.xyram.daydrop.basemodel.PhonepeSerializer;
import com.xyram.daydrop.dao.ApartmentDao;
import com.xyram.daydrop.dao.CustomerDetailsDao;
import com.xyram.daydrop.dao.CustomerOrderDao;
import com.xyram.daydrop.dao.CustomerOrderReplicaDoa;
import com.xyram.daydrop.dao.SheduleDao;
import com.xyram.daydrop.enumtypes.UserStatus;
import com.xyram.daydrop.model.Apartments;
import com.xyram.daydrop.model.CustomerOrder;
import com.xyram.daydrop.model.CustomerOrderReplica;
import com.xyram.daydrop.model.Customers;
import com.xyram.daydrop.model.Schedule;
import com.xyram.daydrop.modelMapper.PaymentInstrument;
import com.xyram.daydrop.modelMapper.PhonePePayModel;
import com.xyram.daydrop.request.CustomerOrderReplicaRequest;
import com.xyram.daydrop.response.RazorPayRequest;
import com.xyram.daydrop.service.CustomerOrderPriceService;
import com.xyram.daydrop.service.CustomerOrderReplicaService;
import com.xyram.daydrop.util.HashEncoder;
import com.xyram.daydrop.util.RazorPay;
import com.xyram.daydrop.service.ConsumerService;

@Transactional
@Service
public class CustomerOrderReplicaServiceImpl implements CustomerOrderReplicaService {

	@Autowired
	CustomerOrderReplicaDoa customerOrderReplicaDoa;

	@Autowired
	ApartmentDao apartmentDao;

	@Autowired
	SheduleDao scheduleDao;

	@Autowired
	CustomerDetailsDao customerDetailsDao;

	@Autowired
	ConsumerService consumerService;

	@Autowired
	CurrentUser currentUser;

	@Autowired
	PhonepeServiceImpl phonepeServiceImpl;

	@Value("${merchant_id}")
	private String merchantId;

	@Value("${salt_key}")
	private String saltKey;

	@Value("${salt_index}")
	private String saltIndex;

	@Override
	public Map createCustomerOrderReplicaService(CustomerOrderReplicaRequest customerOrderReplicaRequest,
			String contactNumber, Integer aparmentId)

	{

		Map response = new HashedMap<>();

		response.put("message", "success");
		CustomerOrderReplica customerOrderReplica = null;

		if (customerOrderReplicaRequest.getCartId() == null) {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "cartId is mandatory ");
		}
		long razorPayCount = 0;
		if (customerOrderReplicaRequest.getOrderId() != null) {

			razorPayCount = customerOrderReplicaDoa.getRazorPayExistByCartId(customerOrderReplicaRequest.getOrderId());
		}

		if (customerOrderReplicaRequest.getCustomerDetails() == null) {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Order Details  is mandatory ");
		}

		customerOrderReplica = customerOrderReplicaDoa.getCustomerOrderByCartId(customerOrderReplicaRequest.getCartId(),
				contactNumber);

		if (customerOrderReplica != null) {
			customerOrderReplica.setCartId(customerOrderReplica.getCartId());

			if (customerOrderReplica.isOrdered()) {
				throw new ResponseStatusException(HttpStatus.CONFLICT, "Your Order is Placed With cart Details");
			}

//			if (razorPayCount >= 1 && !(customerOrderReplica.getRazorPayOrderId() != null
//					&& customerOrderReplica.getRazorPayOrderId().equals(customerOrderReplicaRequest.getOrderId()))) {
//				throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Razor Pay Id Are already Exist ");
//			}

			customerOrderReplica.setStatusType(customerOrderReplicaRequest.getStatusType());
			customerOrderReplica.setContactNumber(contactNumber);
			customerOrderReplica.setApartmentId(aparmentId);

			customerOrderReplica.setAttempts(customerOrderReplica.getAttempts() + 1);
			customerOrderReplica.setUpdatedTime(new Date());

			customerOrderReplica.setRazorPayOrderId(customerOrderReplicaRequest.getOrderId());

			try {

				JSONObject obj = new JSONObject(customerOrderReplicaRequest.getCustomerDetails());

				customerOrderReplica.setCustomerOrderDetails(obj != null ? obj.toString() : null);

				customerOrderReplicaDoa.updateCustomer(customerOrderReplica);
				return response;

			} catch (Exception e) {
				customerOrderReplica.setCustomerOrderDetails(customerOrderReplicaRequest.getCustomerDetails() != null
						? customerOrderReplicaRequest.getCustomerDetails().toString()
						: null);
				customerOrderReplicaDoa.updateCustomer(customerOrderReplica);
				return response;
			}

		} else {

			customerOrderReplica = new CustomerOrderReplica();
			customerOrderReplica.setContactNumber(contactNumber);
			customerOrderReplica.setApartmentId(aparmentId);
			customerOrderReplica.setCartId(customerOrderReplicaRequest.getCartId());
			customerOrderReplica.setStatusType(customerOrderReplicaRequest.getStatusType());

			if (razorPayCount > 0) {
				throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Razor Pay Id Are already Exist ");
			}

			customerOrderReplica.setRazorPayOrderId(customerOrderReplicaRequest.getOrderId());

			Schedule schedule = scheduleDao.getlatestScheduleCustomers();

			if (schedule != null) {

				try {
					customerOrderReplica.setSchedule(schedule.getsId() != null ? schedule.getsId().toString() : null);
				} catch (Exception e) {
					e.printStackTrace();
				}
			} else {
				throw new ResponseStatusException(HttpStatus.BAD_REQUEST,
						"Sorry We Are Not Accepting Any Order Right now");

			}

			try {

				JSONObject obj = new JSONObject(customerOrderReplicaRequest.getCustomerDetails());

				customerOrderReplica.setCustomerOrderDetails(obj != null ? obj.toString() : null);

				customerOrderReplicaDoa.updateCustomer(customerOrderReplica);
				return response;

			} catch (Exception e) {
				customerOrderReplica.setCustomerOrderDetails(customerOrderReplicaRequest.getCustomerDetails() != null
						? customerOrderReplicaRequest.getCustomerDetails().toString()
						: null);
				customerOrderReplicaDoa.updateCustomer(customerOrderReplica);
				return response;
			}

		}

	}

	@Override
	public List<CustomerOrderReplica> getAllCustomerOrderReplicas(Map<String, Object> request) {

		String statusType = null;
		String searchQuery = null;

		String schedule = null;

		Map filter = request.containsKey("filters") ? (Map) request.get("filters") : null;
		if (filter != null) {
			statusType = filter.containsKey("statusType") ? ((String) filter.get("statusType")).toLowerCase() : null;
			searchQuery = filter.containsKey("searchQuery") ? ((String) filter.get("searchQuery")).toLowerCase() : null;
			schedule = filter.containsKey("schedule") ? (String.valueOf(filter.get("schedule"))) : null;

		}

		List<CustomerOrderReplica> CustomerOrderReplica = customerOrderReplicaDoa
				.getAllcustomerOrderReplica(searchQuery, statusType, schedule);

		ObjectMapper objectMapper = new ObjectMapper();
		CustomerOrderReplica.forEach(customerOrderReplica -> {
			try {

				// convert JSON string to Map
				Map<String, Object> customerOrderReplicaMap = objectMapper
						.readValue(customerOrderReplica.getCustomerOrderDetails(), Map.class);

				Object customerOrder = customerOrderReplicaMap.get("customerOrder");
				Map<String, Object> items = (Map<String, Object>) customerOrderReplicaMap.get("items");

				Object quanityList = items.get("quantity");

				Map customers = customerDetailsDao.getByContactNumberAndApartment(
						customerOrderReplica.getContactNumber(), customerOrderReplica.getApartmentId());

				// Apartments apartments =
				// apartmentDao.getApartmentById(customerOrderReplica.getApartmentId());
				customerOrderReplica.setApartmentName(
						customers.get("apartmentName") != null ? (String) customers.get("apartmentName") : null);

				customerOrderReplica.setStreetName(
						customers.get("streetName") != null ? (String) customers.get("streetName") : null);

				customerOrderReplica.setCustomerDetails(customers);

				customerOrderReplica.setCustomerOrder(customerOrder);
				customerOrderReplica.setQuatityList(quanityList);

			} catch (Exception e) {
				e.printStackTrace();
			}

		});

		return CustomerOrderReplica;

	}

	@Override
	public List<CustomerOrderReplica> getAllCustomerOrderReplicasBySchedule(Map<String, Object> request) {

		String statusType = null;
		String searchQuery = null;

		String scheduleId = null;

		Schedule schedule = scheduleDao.getlatestScheduleCustomers();

		if (schedule != null) {

			try {
				scheduleId = schedule.getsId() != null ? schedule.getsId().toString() : null;
			} catch (Exception e) {
				e.printStackTrace();
			}
		}

		statusType = request.containsKey("statusType") ? ((String) request.get("statusType")).toLowerCase() : "Success";

		List<CustomerOrderReplica> CustomerOrderReplica = customerOrderReplicaDoa
				.getAllcustomerOrderReplicaBySchdeule(statusType, scheduleId);

		ObjectMapper objectMapper = new ObjectMapper();
		CustomerOrderReplica.forEach(customerOrderReplica -> {
			try {

				// convert JSON string to Map
				Map<String, Object> customerOrderReplicaMap = objectMapper
						.readValue(customerOrderReplica.getCustomerOrderDetails(), Map.class);

				Object customerOrder = customerOrderReplicaMap.get("customerOrder");
				Map<String, Object> items = (Map<String, Object>) customerOrderReplicaMap.get("items");

				Object quanityList = items.get("quantity");
				Map customers = customerDetailsDao.getByContactNumberAndApartment(
						customerOrderReplica.getContactNumber(), customerOrderReplica.getApartmentId());

				System.out.println("customers" + customers.get("customerName"));

				// Apartments apartments =
				// apartmentDao.getApartmentById(customerOrderReplica.getApartmentId());
				customerOrderReplica.setApartmentName(
						customers.get("apartmentName") != null ? (String) customers.get("apartmentName") : null);

				customerOrderReplica.setCustomerDetails(customers);

				customerOrderReplica.setCustomerOrder(customerOrder);
				customerOrderReplica.setQuatityList(quanityList);

			} catch (Exception e) {
				e.printStackTrace();
			}

		});

		return CustomerOrderReplica;

	}

	@Override
	public CustomerOrderReplica getCustomerOrderReplicaByCartId(String cartId) {

		CustomerOrderReplica CustomerOrderReplica = customerOrderReplicaDoa.getCustomerOrderByCartId(cartId,
				currentUser.getContactNumber());

		ObjectMapper objectMapper = new ObjectMapper();
		try {

			// convert JSON string to Map
			Map<String, Object> customerOrderReplicaMap = objectMapper
					.readValue(CustomerOrderReplica.getCustomerOrderDetails(), Map.class);

			Object customerOrder = customerOrderReplicaMap.get("customerOrder");
			Map<String, Object> items = (Map<String, Object>) customerOrderReplicaMap.get("items");

			Object quanityList = items.get("quantity");
			Map customers = customerDetailsDao.getByContactNumberAndApartment(CustomerOrderReplica.getContactNumber(),
					CustomerOrderReplica.getApartmentId());

			System.out.println("customers" + customers.get("customerName"));

			// Apartments apartments =
			// apartmentDao.getApartmentById(customerOrderReplica.getApartmentId());
			CustomerOrderReplica.setApartmentName(
					customers.get("apartmentName") != null ? (String) customers.get("apartmentName") : null);

			CustomerOrderReplica.setCustomerDetails(customers);

			CustomerOrderReplica.setCustomerOrder(customerOrder);
			CustomerOrderReplica.setQuatityList(quanityList);

		} catch (Exception e) {
			e.printStackTrace();
		}

		return CustomerOrderReplica;

	}

	@Override
	public Map createCustomerOrderReplica(CustomerOrderReplicaRequest customerOrderReplicaRequest, String contactNumber,
			Integer aparmentId) {

		if (customerOrderReplicaRequest.getRazorPayRequest() != null) {

//			Map razorPay = consumerService.createRazorPayOrder(customerOrderReplicaRequest.getRazorPayRequest());
//			customerOrderReplicaRequest.setOrderId(razorPay.get("order") != null ? (String)((RazorPay) razorPay.get("order")).getId() : null);	
//	
//			createCustomerOrderReplicaService(customerOrderReplicaRequest, contactNumber, aparmentId);
//
//			razorPay.put("cartId", customerOrderReplicaRequest.getCartId());

			Map customerOrderReplicaMap = new HashMap<>();

			Map orderId = new HashMap<>();
			String transactionId = getMerchantTransactionId();
			orderId.put("id", transactionId);

			customerOrderReplicaMap.put("order", orderId);

			customerOrderReplicaRequest.setOrderId(transactionId);
			createCustomerOrderReplicaService(customerOrderReplicaRequest, contactNumber, aparmentId);

			customerOrderReplicaMap.put("cartId", customerOrderReplicaRequest.getCartId());

			try {
				customerOrderReplicaMap.put("phonePeResponse",
						phonepeServiceImpl.initiatePhonepePayment(transactionId,
								Integer.valueOf(customerOrderReplicaRequest.getRazorPayRequest().getAmount()),
								contactNumber, customerOrderReplicaRequest.getRedirectUrl(), customerOrderReplicaRequest.getCallBackUrl()));

			} catch (Exception e) {
				e.printStackTrace();
				customerOrderReplicaMap.put("phonePeResponse", new HashedMap<>());
			}

			return customerOrderReplicaMap;

		} else {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST,
					"paymentDetails transcation Details are mandatory");
		}

	}

	private static String getMerchantTransactionId() {

		return "OD_" + MerchantTransactionIdGenerator.getRandomString();
	}


	@Override
	public List<CustomerOrderReplica> getCustomerOrderByMoblieNo(String contactNumber,Integer aid) {
		
		Schedule latestschedule = customerOrderReplicaDoa.getlatestschedule();
		
		if (latestschedule != null && latestschedule.getCreationTimestamp()!=null) {
			
	        if (latestschedule.getStatus().equals(UserStatus.ACTIVE)) {
	        	
	        	Customers customer = customerDetailsDao.getByContactNoAndApartment(contactNumber, aid);
	        	if (customer != null) { // Ensure the customer exists
	        		List<CustomerOrder> customerOrderList = customerOrderReplicaDoa.getListCustomerOrderByCustomerId(customer.getCtid());
	        		
	                double totalOrderAmount = 0.0;
	       
                if (customerOrderList != null && !customerOrderList.isEmpty() && customerOrderList.add(customerOrder). {
                    for (CustomerOrder customerOrder : customerOrderList) {
                        Double orderAmount = customerOrder.getAmount();
                        
                        if(orderAmount>200) {
                        	
                        }
                        if (orderAmount != null) {
                            totalOrderAmount += orderAmount;
                            if(totalOrderAmount>200) {
                            	totalOrderAmount+customerOrder
                            }
                        }
                    }
                    System.out.println("Total Order Amount: " + totalOrderAmount);
                    List<CustomerOrderReplica> customerOrderReplicas = new ArrayList<>();
                    return customerOrderReplicas;
                } else {
                    return Collections.emptyList(); // or return null or an appropriate value
                }
            } else {
              
                return null; // or an appropriate value
            }
        } else {
            // Handle the case when the latest schedule is not active
            return null; // or an appropriate value
        }
    } else {
        // Handle the case when there is no latest schedule or its creation timestamp is null
        return null; // or an appropriate value
    }
	}
}



----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3003)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-09-21 15:04:10.035
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3003)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-09-21 15:04:10.036
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3003)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2023-09-21 15:04:10.169
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.xyram.daydrop.serviceimpl;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.transaction.Transactional;

import org.apache.commons.collections4.map.HashedMap;
import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.server.ResponseStatusException;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.xyram.daydrop.admin.model.CurrentUser;
import com.xyram.daydrop.basemodel.Base64Wrapper;
import com.xyram.daydrop.basemodel.MerchantTransactionIdGenerator;
import com.xyram.daydrop.basemodel.PhonepeSerializer;
import com.xyram.daydrop.dao.ApartmentDao;
import com.xyram.daydrop.dao.CustomerDetailsDao;
import com.xyram.daydrop.dao.CustomerOrderDao;
import com.xyram.daydrop.dao.CustomerOrderReplicaDoa;
import com.xyram.daydrop.dao.SheduleDao;
import com.xyram.daydrop.enumtypes.UserStatus;
import com.xyram.daydrop.model.Apartments;
import com.xyram.daydrop.model.CustomerOrder;
import com.xyram.daydrop.model.CustomerOrderReplica;
import com.xyram.daydrop.model.Customers;
import com.xyram.daydrop.model.Schedule;
import com.xyram.daydrop.modelMapper.PaymentInstrument;
import com.xyram.daydrop.modelMapper.PhonePePayModel;
import com.xyram.daydrop.request.CustomerOrderReplicaRequest;
import com.xyram.daydrop.response.RazorPayRequest;
import com.xyram.daydrop.service.CustomerOrderPriceService;
import com.xyram.daydrop.service.CustomerOrderReplicaService;
import com.xyram.daydrop.util.HashEncoder;
import com.xyram.daydrop.util.RazorPay;
import com.xyram.daydrop.service.ConsumerService;

@Transactional
@Service
public class CustomerOrderReplicaServiceImpl implements CustomerOrderReplicaService {

	@Autowired
	CustomerOrderReplicaDoa customerOrderReplicaDoa;

	@Autowired
	ApartmentDao apartmentDao;

	@Autowired
	SheduleDao scheduleDao;

	@Autowired
	CustomerDetailsDao customerDetailsDao;

	@Autowired
	ConsumerService consumerService;

	@Autowired
	CurrentUser currentUser;

	@Autowired
	PhonepeServiceImpl phonepeServiceImpl;

	@Value("${merchant_id}")
	private String merchantId;

	@Value("${salt_key}")
	private String saltKey;

	@Value("${salt_index}")
	private String saltIndex;

	@Override
	public Map createCustomerOrderReplicaService(CustomerOrderReplicaRequest customerOrderReplicaRequest,
			String contactNumber, Integer aparmentId)

	{

		Map response = new HashedMap<>();

		response.put("message", "success");
		CustomerOrderReplica customerOrderReplica = null;

		if (customerOrderReplicaRequest.getCartId() == null) {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "cartId is mandatory ");
		}
		long razorPayCount = 0;
		if (customerOrderReplicaRequest.getOrderId() != null) {

			razorPayCount = customerOrderReplicaDoa.getRazorPayExistByCartId(customerOrderReplicaRequest.getOrderId());
		}

		if (customerOrderReplicaRequest.getCustomerDetails() == null) {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Order Details  is mandatory ");
		}

		customerOrderReplica = customerOrderReplicaDoa.getCustomerOrderByCartId(customerOrderReplicaRequest.getCartId(),
				contactNumber);

		if (customerOrderReplica != null) {
			customerOrderReplica.setCartId(customerOrderReplica.getCartId());

			if (customerOrderReplica.isOrdered()) {
				throw new ResponseStatusException(HttpStatus.CONFLICT, "Your Order is Placed With cart Details");
			}

//			if (razorPayCount >= 1 && !(customerOrderReplica.getRazorPayOrderId() != null
//					&& customerOrderReplica.getRazorPayOrderId().equals(customerOrderReplicaRequest.getOrderId()))) {
//				throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Razor Pay Id Are already Exist ");
//			}

			customerOrderReplica.setStatusType(customerOrderReplicaRequest.getStatusType());
			customerOrderReplica.setContactNumber(contactNumber);
			customerOrderReplica.setApartmentId(aparmentId);

			customerOrderReplica.setAttempts(customerOrderReplica.getAttempts() + 1);
			customerOrderReplica.setUpdatedTime(new Date());

			customerOrderReplica.setRazorPayOrderId(customerOrderReplicaRequest.getOrderId());

			try {

				JSONObject obj = new JSONObject(customerOrderReplicaRequest.getCustomerDetails());

				customerOrderReplica.setCustomerOrderDetails(obj != null ? obj.toString() : null);

				customerOrderReplicaDoa.updateCustomer(customerOrderReplica);
				return response;

			} catch (Exception e) {
				customerOrderReplica.setCustomerOrderDetails(customerOrderReplicaRequest.getCustomerDetails() != null
						? customerOrderReplicaRequest.getCustomerDetails().toString()
						: null);
				customerOrderReplicaDoa.updateCustomer(customerOrderReplica);
				return response;
			}

		} else {

			customerOrderReplica = new CustomerOrderReplica();
			customerOrderReplica.setContactNumber(contactNumber);
			customerOrderReplica.setApartmentId(aparmentId);
			customerOrderReplica.setCartId(customerOrderReplicaRequest.getCartId());
			customerOrderReplica.setStatusType(customerOrderReplicaRequest.getStatusType());

			if (razorPayCount > 0) {
				throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Razor Pay Id Are already Exist ");
			}

			customerOrderReplica.setRazorPayOrderId(customerOrderReplicaRequest.getOrderId());

			Schedule schedule = scheduleDao.getlatestScheduleCustomers();

			if (schedule != null) {

				try {
					customerOrderReplica.setSchedule(schedule.getsId() != null ? schedule.getsId().toString() : null);
				} catch (Exception e) {
					e.printStackTrace();
				}
			} else {
				throw new ResponseStatusException(HttpStatus.BAD_REQUEST,
						"Sorry We Are Not Accepting Any Order Right now");

			}

			try {

				JSONObject obj = new JSONObject(customerOrderReplicaRequest.getCustomerDetails());

				customerOrderReplica.setCustomerOrderDetails(obj != null ? obj.toString() : null);

				customerOrderReplicaDoa.updateCustomer(customerOrderReplica);
				return response;

			} catch (Exception e) {
				customerOrderReplica.setCustomerOrderDetails(customerOrderReplicaRequest.getCustomerDetails() != null
						? customerOrderReplicaRequest.getCustomerDetails().toString()
						: null);
				customerOrderReplicaDoa.updateCustomer(customerOrderReplica);
				return response;
			}

		}

	}

	@Override
	public List<CustomerOrderReplica> getAllCustomerOrderReplicas(Map<String, Object> request) {

		String statusType = null;
		String searchQuery = null;

		String schedule = null;

		Map filter = request.containsKey("filters") ? (Map) request.get("filters") : null;
		if (filter != null) {
			statusType = filter.containsKey("statusType") ? ((String) filter.get("statusType")).toLowerCase() : null;
			searchQuery = filter.containsKey("searchQuery") ? ((String) filter.get("searchQuery")).toLowerCase() : null;
			schedule = filter.containsKey("schedule") ? (String.valueOf(filter.get("schedule"))) : null;

		}

		List<CustomerOrderReplica> CustomerOrderReplica = customerOrderReplicaDoa
				.getAllcustomerOrderReplica(searchQuery, statusType, schedule);

		ObjectMapper objectMapper = new ObjectMapper();
		CustomerOrderReplica.forEach(customerOrderReplica -> {
			try {

				// convert JSON string to Map
				Map<String, Object> customerOrderReplicaMap = objectMapper
						.readValue(customerOrderReplica.getCustomerOrderDetails(), Map.class);

				Object customerOrder = customerOrderReplicaMap.get("customerOrder");
				Map<String, Object> items = (Map<String, Object>) customerOrderReplicaMap.get("items");

				Object quanityList = items.get("quantity");

				Map customers = customerDetailsDao.getByContactNumberAndApartment(
						customerOrderReplica.getContactNumber(), customerOrderReplica.getApartmentId());

				// Apartments apartments =
				// apartmentDao.getApartmentById(customerOrderReplica.getApartmentId());
				customerOrderReplica.setApartmentName(
						customers.get("apartmentName") != null ? (String) customers.get("apartmentName") : null);

				customerOrderReplica.setStreetName(
						customers.get("streetName") != null ? (String) customers.get("streetName") : null);

				customerOrderReplica.setCustomerDetails(customers);

				customerOrderReplica.setCustomerOrder(customerOrder);
				customerOrderReplica.setQuatityList(quanityList);

			} catch (Exception e) {
				e.printStackTrace();
			}

		});

		return CustomerOrderReplica;

	}

	@Override
	public List<CustomerOrderReplica> getAllCustomerOrderReplicasBySchedule(Map<String, Object> request) {

		String statusType = null;
		String searchQuery = null;

		String scheduleId = null;

		Schedule schedule = scheduleDao.getlatestScheduleCustomers();

		if (schedule != null) {

			try {
				scheduleId = schedule.getsId() != null ? schedule.getsId().toString() : null;
			} catch (Exception e) {
				e.printStackTrace();
			}
		}

		statusType = request.containsKey("statusType") ? ((String) request.get("statusType")).toLowerCase() : "Success";

		List<CustomerOrderReplica> CustomerOrderReplica = customerOrderReplicaDoa
				.getAllcustomerOrderReplicaBySchdeule(statusType, scheduleId);

		ObjectMapper objectMapper = new ObjectMapper();
		CustomerOrderReplica.forEach(customerOrderReplica -> {
			try {

				// convert JSON string to Map
				Map<String, Object> customerOrderReplicaMap = objectMapper
						.readValue(customerOrderReplica.getCustomerOrderDetails(), Map.class);

				Object customerOrder = customerOrderReplicaMap.get("customerOrder");
				Map<String, Object> items = (Map<String, Object>) customerOrderReplicaMap.get("items");

				Object quanityList = items.get("quantity");
				Map customers = customerDetailsDao.getByContactNumberAndApartment(
						customerOrderReplica.getContactNumber(), customerOrderReplica.getApartmentId());

				System.out.println("customers" + customers.get("customerName"));

				// Apartments apartments =
				// apartmentDao.getApartmentById(customerOrderReplica.getApartmentId());
				customerOrderReplica.setApartmentName(
						customers.get("apartmentName") != null ? (String) customers.get("apartmentName") : null);

				customerOrderReplica.setCustomerDetails(customers);

				customerOrderReplica.setCustomerOrder(customerOrder);
				customerOrderReplica.setQuatityList(quanityList);

			} catch (Exception e) {
				e.printStackTrace();
			}

		});

		return CustomerOrderReplica;

	}

	@Override
	public CustomerOrderReplica getCustomerOrderReplicaByCartId(String cartId) {

		CustomerOrderReplica CustomerOrderReplica = customerOrderReplicaDoa.getCustomerOrderByCartId(cartId,
				currentUser.getContactNumber());

		ObjectMapper objectMapper = new ObjectMapper();
		try {

			// convert JSON string to Map
			Map<String, Object> customerOrderReplicaMap = objectMapper
					.readValue(CustomerOrderReplica.getCustomerOrderDetails(), Map.class);

			Object customerOrder = customerOrderReplicaMap.get("customerOrder");
			Map<String, Object> items = (Map<String, Object>) customerOrderReplicaMap.get("items");

			Object quanityList = items.get("quantity");
			Map customers = customerDetailsDao.getByContactNumberAndApartment(CustomerOrderReplica.getContactNumber(),
					CustomerOrderReplica.getApartmentId());

			System.out.println("customers" + customers.get("customerName"));

			// Apartments apartments =
			// apartmentDao.getApartmentById(customerOrderReplica.getApartmentId());
			CustomerOrderReplica.setApartmentName(
					customers.get("apartmentName") != null ? (String) customers.get("apartmentName") : null);

			CustomerOrderReplica.setCustomerDetails(customers);

			CustomerOrderReplica.setCustomerOrder(customerOrder);
			CustomerOrderReplica.setQuatityList(quanityList);

		} catch (Exception e) {
			e.printStackTrace();
		}

		return CustomerOrderReplica;

	}

	@Override
	public Map createCustomerOrderReplica(CustomerOrderReplicaRequest customerOrderReplicaRequest, String contactNumber,
			Integer aparmentId) {

		if (customerOrderReplicaRequest.getRazorPayRequest() != null) {

//			Map razorPay = consumerService.createRazorPayOrder(customerOrderReplicaRequest.getRazorPayRequest());
//			customerOrderReplicaRequest.setOrderId(razorPay.get("order") != null ? (String)((RazorPay) razorPay.get("order")).getId() : null);	
//	
//			createCustomerOrderReplicaService(customerOrderReplicaRequest, contactNumber, aparmentId);
//
//			razorPay.put("cartId", customerOrderReplicaRequest.getCartId());

			Map customerOrderReplicaMap = new HashMap<>();

			Map orderId = new HashMap<>();
			String transactionId = getMerchantTransactionId();
			orderId.put("id", transactionId);

			customerOrderReplicaMap.put("order", orderId);

			customerOrderReplicaRequest.setOrderId(transactionId);
			createCustomerOrderReplicaService(customerOrderReplicaRequest, contactNumber, aparmentId);

			customerOrderReplicaMap.put("cartId", customerOrderReplicaRequest.getCartId());

			try {
				customerOrderReplicaMap.put("phonePeResponse",
						phonepeServiceImpl.initiatePhonepePayment(transactionId,
								Integer.valueOf(customerOrderReplicaRequest.getRazorPayRequest().getAmount()),
								contactNumber, customerOrderReplicaRequest.getRedirectUrl(), customerOrderReplicaRequest.getCallBackUrl()));

			} catch (Exception e) {
				e.printStackTrace();
				customerOrderReplicaMap.put("phonePeResponse", new HashedMap<>());
			}

			return customerOrderReplicaMap;

		} else {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST,
					"paymentDetails transcation Details are mandatory");
		}

	}

	private static String getMerchantTransactionId() {

		return "OD_" + MerchantTransactionIdGenerator.getRandomString();
	}


	@Override
	public List<CustomerOrderReplica> getCustomerOrderByMoblieNo(String contactNumber,Integer aid) {
		
		Schedule latestschedule = customerOrderReplicaDoa.getlatestschedule();
		
		if (latestschedule != null && latestschedule.getCreationTimestamp()!=null) {
			
	        if (latestschedule.getStatus().equals(UserStatus.ACTIVE)) {
	        	
	        	Customers customer = customerDetailsDao.getByContactNoAndApartment(contactNumber, aid);
	        	if (customer != null) { // Ensure the customer exists
	        		List<CustomerOrder> customerOrderList = customerOrderReplicaDoa.getListCustomerOrderByCustomerId(customer.getCtid());
	        		
	                double totalOrderAmount = 0.0;
	       
                if (customerOrderList != null && !customerOrderList.isEmpty() && customerOrderList.add(customerOrder). {
                    for (CustomerOrder customerOrder : customerOrderList) {
                        Double orderAmount = customerOrder.getAmount();
                        
                        if(orderAmount>200) {
                        	
                        }
                        if (orderAmount != null) {
                            totalOrderAmount += orderAmount;
                            if(totalOrderAmount>200) {
                            	totalOrderAmount+customerOrder
                            }
                        }
                    }
                    System.out.println("Total Order Amount: " + totalOrderAmount);
                    List<CustomerOrderReplica> customerOrderReplicas = new ArrayList<>();
                    return customerOrderReplicas;
                } else {
                    return Collections.emptyList(); // or return null or an appropriate value
                }
            } else {
              
                return null; // or an appropriate value
            }
        } else {
            // Handle the case when the latest schedule is not active
            return null; // or an appropriate value
        }
    } else {
        // Handle the case when there is no latest schedule or its creation timestamp is null
        return null; // or an appropriate value
    }
	}
}



----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3003)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1003)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:799)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:743)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.lambda$0(LSJavaHoverProvider.java:68)
	at java.base/java.util.concurrent.CompletableFuture$AsyncRun.run(CompletableFuture.java:1804)
	at java.base/java.util.concurrent.CompletableFuture$AsyncRun.exec(CompletableFuture.java:1796)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:373)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1182)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1655)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1622)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:165)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-09-21 15:04:10.171
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3003)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1003)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:799)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:743)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.lambda$0(LSJavaHoverProvider.java:68)
	at java.base/java.util.concurrent.CompletableFuture$AsyncRun.run(CompletableFuture.java:1804)
	at java.base/java.util.concurrent.CompletableFuture$AsyncRun.exec(CompletableFuture.java:1796)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:373)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1182)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1655)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1622)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:165)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-09-21 15:04:10.173
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3003)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1003)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:799)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:743)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.lambda$0(LSJavaHoverProvider.java:68)
	at java.base/java.util.concurrent.CompletableFuture$AsyncRun.run(CompletableFuture.java:1804)
	at java.base/java.util.concurrent.CompletableFuture$AsyncRun.exec(CompletableFuture.java:1796)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:373)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1182)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1655)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1622)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:165)

!ENTRY org.eclipse.jdt.core 4 4 2023-09-21 15:04:10.237
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.xyram.daydrop.serviceimpl;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.transaction.Transactional;

import org.apache.commons.collections4.map.HashedMap;
import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.server.ResponseStatusException;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.xyram.daydrop.admin.model.CurrentUser;
import com.xyram.daydrop.basemodel.Base64Wrapper;
import com.xyram.daydrop.basemodel.MerchantTransactionIdGenerator;
import com.xyram.daydrop.basemodel.PhonepeSerializer;
import com.xyram.daydrop.dao.ApartmentDao;
import com.xyram.daydrop.dao.CustomerDetailsDao;
import com.xyram.daydrop.dao.CustomerOrderDao;
import com.xyram.daydrop.dao.CustomerOrderReplicaDoa;
import com.xyram.daydrop.dao.SheduleDao;
import com.xyram.daydrop.enumtypes.UserStatus;
import com.xyram.daydrop.model.Apartments;
import com.xyram.daydrop.model.CustomerOrder;
import com.xyram.daydrop.model.CustomerOrderReplica;
import com.xyram.daydrop.model.Customers;
import com.xyram.daydrop.model.Schedule;
import com.xyram.daydrop.modelMapper.PaymentInstrument;
import com.xyram.daydrop.modelMapper.PhonePePayModel;
import com.xyram.daydrop.request.CustomerOrderReplicaRequest;
import com.xyram.daydrop.response.RazorPayRequest;
import com.xyram.daydrop.service.CustomerOrderPriceService;
import com.xyram.daydrop.service.CustomerOrderReplicaService;
import com.xyram.daydrop.util.HashEncoder;
import com.xyram.daydrop.util.RazorPay;
import com.xyram.daydrop.service.ConsumerService;

@Transactional
@Service
public class CustomerOrderReplicaServiceImpl implements CustomerOrderReplicaService {

	@Autowired
	CustomerOrderReplicaDoa customerOrderReplicaDoa;

	@Autowired
	ApartmentDao apartmentDao;

	@Autowired
	SheduleDao scheduleDao;

	@Autowired
	CustomerDetailsDao customerDetailsDao;

	@Autowired
	ConsumerService consumerService;

	@Autowired
	CurrentUser currentUser;

	@Autowired
	PhonepeServiceImpl phonepeServiceImpl;

	@Value("${merchant_id}")
	private String merchantId;

	@Value("${salt_key}")
	private String saltKey;

	@Value("${salt_index}")
	private String saltIndex;

	@Override
	public Map createCustomerOrderReplicaService(CustomerOrderReplicaRequest customerOrderReplicaRequest,
			String contactNumber, Integer aparmentId)

	{

		Map response = new HashedMap<>();

		response.put("message", "success");
		CustomerOrderReplica customerOrderReplica = null;

		if (customerOrderReplicaRequest.getCartId() == null) {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "cartId is mandatory ");
		}
		long razorPayCount = 0;
		if (customerOrderReplicaRequest.getOrderId() != null) {

			razorPayCount = customerOrderReplicaDoa.getRazorPayExistByCartId(customerOrderReplicaRequest.getOrderId());
		}

		if (customerOrderReplicaRequest.getCustomerDetails() == null) {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Order Details  is mandatory ");
		}

		customerOrderReplica = customerOrderReplicaDoa.getCustomerOrderByCartId(customerOrderReplicaRequest.getCartId(),
				contactNumber);

		if (customerOrderReplica != null) {
			customerOrderReplica.setCartId(customerOrderReplica.getCartId());

			if (customerOrderReplica.isOrdered()) {
				throw new ResponseStatusException(HttpStatus.CONFLICT, "Your Order is Placed With cart Details");
			}

//			if (razorPayCount >= 1 && !(customerOrderReplica.getRazorPayOrderId() != null
//					&& customerOrderReplica.getRazorPayOrderId().equals(customerOrderReplicaRequest.getOrderId()))) {
//				throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Razor Pay Id Are already Exist ");
//			}

			customerOrderReplica.setStatusType(customerOrderReplicaRequest.getStatusType());
			customerOrderReplica.setContactNumber(contactNumber);
			customerOrderReplica.setApartmentId(aparmentId);

			customerOrderReplica.setAttempts(customerOrderReplica.getAttempts() + 1);
			customerOrderReplica.setUpdatedTime(new Date());

			customerOrderReplica.setRazorPayOrderId(customerOrderReplicaRequest.getOrderId());

			try {

				JSONObject obj = new JSONObject(customerOrderReplicaRequest.getCustomerDetails());

				customerOrderReplica.setCustomerOrderDetails(obj != null ? obj.toString() : null);

				customerOrderReplicaDoa.updateCustomer(customerOrderReplica);
				return response;

			} catch (Exception e) {
				customerOrderReplica.setCustomerOrderDetails(customerOrderReplicaRequest.getCustomerDetails() != null
						? customerOrderReplicaRequest.getCustomerDetails().toString()
						: null);
				customerOrderReplicaDoa.updateCustomer(customerOrderReplica);
				return response;
			}

		} else {

			customerOrderReplica = new CustomerOrderReplica();
			customerOrderReplica.setContactNumber(contactNumber);
			customerOrderReplica.setApartmentId(aparmentId);
			customerOrderReplica.setCartId(customerOrderReplicaRequest.getCartId());
			customerOrderReplica.setStatusType(customerOrderReplicaRequest.getStatusType());

			if (razorPayCount > 0) {
				throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Razor Pay Id Are already Exist ");
			}

			customerOrderReplica.setRazorPayOrderId(customerOrderReplicaRequest.getOrderId());

			Schedule schedule = scheduleDao.getlatestScheduleCustomers();

			if (schedule != null) {

				try {
					customerOrderReplica.setSchedule(schedule.getsId() != null ? schedule.getsId().toString() : null);
				} catch (Exception e) {
					e.printStackTrace();
				}
			} else {
				throw new ResponseStatusException(HttpStatus.BAD_REQUEST,
						"Sorry We Are Not Accepting Any Order Right now");

			}

			try {

				JSONObject obj = new JSONObject(customerOrderReplicaRequest.getCustomerDetails());

				customerOrderReplica.setCustomerOrderDetails(obj != null ? obj.toString() : null);

				customerOrderReplicaDoa.updateCustomer(customerOrderReplica);
				return response;

			} catch (Exception e) {
				customerOrderReplica.setCustomerOrderDetails(customerOrderReplicaRequest.getCustomerDetails() != null
						? customerOrderReplicaRequest.getCustomerDetails().toString()
						: null);
				customerOrderReplicaDoa.updateCustomer(customerOrderReplica);
				return response;
			}

		}

	}

	@Override
	public List<CustomerOrderReplica> getAllCustomerOrderReplicas(Map<String, Object> request) {

		String statusType = null;
		String searchQuery = null;

		String schedule = null;

		Map filter = request.containsKey("filters") ? (Map) request.get("filters") : null;
		if (filter != null) {
			statusType = filter.containsKey("statusType") ? ((String) filter.get("statusType")).toLowerCase() : null;
			searchQuery = filter.containsKey("searchQuery") ? ((String) filter.get("searchQuery")).toLowerCase() : null;
			schedule = filter.containsKey("schedule") ? (String.valueOf(filter.get("schedule"))) : null;

		}

		List<CustomerOrderReplica> CustomerOrderReplica = customerOrderReplicaDoa
				.getAllcustomerOrderReplica(searchQuery, statusType, schedule);

		ObjectMapper objectMapper = new ObjectMapper();
		CustomerOrderReplica.forEach(customerOrderReplica -> {
			try {

				// convert JSON string to Map
				Map<String, Object> customerOrderReplicaMap = objectMapper
						.readValue(customerOrderReplica.getCustomerOrderDetails(), Map.class);

				Object customerOrder = customerOrderReplicaMap.get("customerOrder");
				Map<String, Object> items = (Map<String, Object>) customerOrderReplicaMap.get("items");

				Object quanityList = items.get("quantity");

				Map customers = customerDetailsDao.getByContactNumberAndApartment(
						customerOrderReplica.getContactNumber(), customerOrderReplica.getApartmentId());

				// Apartments apartments =
				// apartmentDao.getApartmentById(customerOrderReplica.getApartmentId());
				customerOrderReplica.setApartmentName(
						customers.get("apartmentName") != null ? (String) customers.get("apartmentName") : null);

				customerOrderReplica.setStreetName(
						customers.get("streetName") != null ? (String) customers.get("streetName") : null);

				customerOrderReplica.setCustomerDetails(customers);

				customerOrderReplica.setCustomerOrder(customerOrder);
				customerOrderReplica.setQuatityList(quanityList);

			} catch (Exception e) {
				e.printStackTrace();
			}

		});

		return CustomerOrderReplica;

	}

	@Override
	public List<CustomerOrderReplica> getAllCustomerOrderReplicasBySchedule(Map<String, Object> request) {

		String statusType = null;
		String searchQuery = null;

		String scheduleId = null;

		Schedule schedule = scheduleDao.getlatestScheduleCustomers();

		if (schedule != null) {

			try {
				scheduleId = schedule.getsId() != null ? schedule.getsId().toString() : null;
			} catch (Exception e) {
				e.printStackTrace();
			}
		}

		statusType = request.containsKey("statusType") ? ((String) request.get("statusType")).toLowerCase() : "Success";

		List<CustomerOrderReplica> CustomerOrderReplica = customerOrderReplicaDoa
				.getAllcustomerOrderReplicaBySchdeule(statusType, scheduleId);

		ObjectMapper objectMapper = new ObjectMapper();
		CustomerOrderReplica.forEach(customerOrderReplica -> {
			try {

				// convert JSON string to Map
				Map<String, Object> customerOrderReplicaMap = objectMapper
						.readValue(customerOrderReplica.getCustomerOrderDetails(), Map.class);

				Object customerOrder = customerOrderReplicaMap.get("customerOrder");
				Map<String, Object> items = (Map<String, Object>) customerOrderReplicaMap.get("items");

				Object quanityList = items.get("quantity");
				Map customers = customerDetailsDao.getByContactNumberAndApartment(
						customerOrderReplica.getContactNumber(), customerOrderReplica.getApartmentId());

				System.out.println("customers" + customers.get("customerName"));

				// Apartments apartments =
				// apartmentDao.getApartmentById(customerOrderReplica.getApartmentId());
				customerOrderReplica.setApartmentName(
						customers.get("apartmentName") != null ? (String) customers.get("apartmentName") : null);

				customerOrderReplica.setCustomerDetails(customers);

				customerOrderReplica.setCustomerOrder(customerOrder);
				customerOrderReplica.setQuatityList(quanityList);

			} catch (Exception e) {
				e.printStackTrace();
			}

		});

		return CustomerOrderReplica;

	}

	@Override
	public CustomerOrderReplica getCustomerOrderReplicaByCartId(String cartId) {

		CustomerOrderReplica CustomerOrderReplica = customerOrderReplicaDoa.getCustomerOrderByCartId(cartId,
				currentUser.getContactNumber());

		ObjectMapper objectMapper = new ObjectMapper();
		try {

			// convert JSON string to Map
			Map<String, Object> customerOrderReplicaMap = objectMapper
					.readValue(CustomerOrderReplica.getCustomerOrderDetails(), Map.class);

			Object customerOrder = customerOrderReplicaMap.get("customerOrder");
			Map<String, Object> items = (Map<String, Object>) customerOrderReplicaMap.get("items");

			Object quanityList = items.get("quantity");
			Map customers = customerDetailsDao.getByContactNumberAndApartment(CustomerOrderReplica.getContactNumber(),
					CustomerOrderReplica.getApartmentId());

			System.out.println("customers" + customers.get("customerName"));

			// Apartments apartments =
			// apartmentDao.getApartmentById(customerOrderReplica.getApartmentId());
			CustomerOrderReplica.setApartmentName(
					customers.get("apartmentName") != null ? (String) customers.get("apartmentName") : null);

			CustomerOrderReplica.setCustomerDetails(customers);

			CustomerOrderReplica.setCustomerOrder(customerOrder);
			CustomerOrderReplica.setQuatityList(quanityList);

		} catch (Exception e) {
			e.printStackTrace();
		}

		return CustomerOrderReplica;

	}

	@Override
	public Map createCustomerOrderReplica(CustomerOrderReplicaRequest customerOrderReplicaRequest, String contactNumber,
			Integer aparmentId) {

		if (customerOrderReplicaRequest.getRazorPayRequest() != null) {

//			Map razorPay = consumerService.createRazorPayOrder(customerOrderReplicaRequest.getRazorPayRequest());
//			customerOrderReplicaRequest.setOrderId(razorPay.get("order") != null ? (String)((RazorPay) razorPay.get("order")).getId() : null);	
//	
//			createCustomerOrderReplicaService(customerOrderReplicaRequest, contactNumber, aparmentId);
//
//			razorPay.put("cartId", customerOrderReplicaRequest.getCartId());

			Map customerOrderReplicaMap = new HashMap<>();

			Map orderId = new HashMap<>();
			String transactionId = getMerchantTransactionId();
			orderId.put("id", transactionId);

			customerOrderReplicaMap.put("order", orderId);

			customerOrderReplicaRequest.setOrderId(transactionId);
			createCustomerOrderReplicaService(customerOrderReplicaRequest, contactNumber, aparmentId);

			customerOrderReplicaMap.put("cartId", customerOrderReplicaRequest.getCartId());

			try {
				customerOrderReplicaMap.put("phonePeResponse",
						phonepeServiceImpl.initiatePhonepePayment(transactionId,
								Integer.valueOf(customerOrderReplicaRequest.getRazorPayRequest().getAmount()),
								contactNumber, customerOrderReplicaRequest.getRedirectUrl(), customerOrderReplicaRequest.getCallBackUrl()));

			} catch (Exception e) {
				e.printStackTrace();
				customerOrderReplicaMap.put("phonePeResponse", new HashedMap<>());
			}

			return customerOrderReplicaMap;

		} else {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST,
					"paymentDetails transcation Details are mandatory");
		}

	}

	private static String getMerchantTransactionId() {

		return "OD_" + MerchantTransactionIdGenerator.getRandomString();
	}


	@Override
	public List<CustomerOrderReplica> getCustomerOrderByMoblieNo(String contactNumber,Integer aid) {
		
		Schedule latestschedule = customerOrderReplicaDoa.getlatestschedule();
		
		if (latestschedule != null && latestschedule.getCreationTimestamp()!=null) {
			
	        if (latestschedule.getStatus().equals(UserStatus.ACTIVE)) {
	        	
	        	Customers customer = customerDetailsDao.getByContactNoAndApartment(contactNumber, aid);
	        	if (customer != null) { // Ensure the customer exists
	        		List<CustomerOrder> customerOrderList = customerOrderReplicaDoa.getListCustomerOrderByCustomerId(customer.getCtid());
	        		
	                double totalOrderAmount = 0.0;
	       
                if (customerOrderList != null && !customerOrderList.isEmpty() && customerOrderList.add(customerOrder). {
                    for (CustomerOrder customerOrder : customerOrderList) {
                        Double orderAmount = customerOrder.getAmount();
                        
                        if(orderAmount>200) {
                        	
                        }
                        if (orderAmount != null) {
                            totalOrderAmount += orderAmount;
                            if(totalOrderAmount>200) {
                            	totalOrderAmount+customerOrder
                            }
                        }
                    }
                    System.out.println("Total Order Amount: " + totalOrderAmount);
                    List<CustomerOrderReplica> customerOrderReplicas = new ArrayList<>();
                    return customerOrderReplicas;
                } else {
                    return Collections.emptyList(); // or return null or an appropriate value
                }
            } else {
              
                return null; // or an appropriate value
            }
        } else {
            // Handle the case when the latest schedule is not active
            return null; // or an appropriate value
        }
    } else {
        // Handle the case when there is no latest schedule or its creation timestamp is null
        return null; // or an appropriate value
    }
	}
}



----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3003)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-09-21 15:04:10.239
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3003)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-09-21 15:04:10.240
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3003)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2023-09-21 15:04:10.314
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.xyram.daydrop.serviceimpl;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.transaction.Transactional;

import org.apache.commons.collections4.map.HashedMap;
import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.server.ResponseStatusException;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.xyram.daydrop.admin.model.CurrentUser;
import com.xyram.daydrop.basemodel.Base64Wrapper;
import com.xyram.daydrop.basemodel.MerchantTransactionIdGenerator;
import com.xyram.daydrop.basemodel.PhonepeSerializer;
import com.xyram.daydrop.dao.ApartmentDao;
import com.xyram.daydrop.dao.CustomerDetailsDao;
import com.xyram.daydrop.dao.CustomerOrderDao;
import com.xyram.daydrop.dao.CustomerOrderReplicaDoa;
import com.xyram.daydrop.dao.SheduleDao;
import com.xyram.daydrop.enumtypes.UserStatus;
import com.xyram.daydrop.model.Apartments;
import com.xyram.daydrop.model.CustomerOrder;
import com.xyram.daydrop.model.CustomerOrderReplica;
import com.xyram.daydrop.model.Customers;
import com.xyram.daydrop.model.Schedule;
import com.xyram.daydrop.modelMapper.PaymentInstrument;
import com.xyram.daydrop.modelMapper.PhonePePayModel;
import com.xyram.daydrop.request.CustomerOrderReplicaRequest;
import com.xyram.daydrop.response.RazorPayRequest;
import com.xyram.daydrop.service.CustomerOrderPriceService;
import com.xyram.daydrop.service.CustomerOrderReplicaService;
import com.xyram.daydrop.util.HashEncoder;
import com.xyram.daydrop.util.RazorPay;
import com.xyram.daydrop.service.ConsumerService;

@Transactional
@Service
public class CustomerOrderReplicaServiceImpl implements CustomerOrderReplicaService {

	@Autowired
	CustomerOrderReplicaDoa customerOrderReplicaDoa;

	@Autowired
	ApartmentDao apartmentDao;

	@Autowired
	SheduleDao scheduleDao;

	@Autowired
	CustomerDetailsDao customerDetailsDao;

	@Autowired
	ConsumerService consumerService;

	@Autowired
	CurrentUser currentUser;

	@Autowired
	PhonepeServiceImpl phonepeServiceImpl;

	@Value("${merchant_id}")
	private String merchantId;

	@Value("${salt_key}")
	private String saltKey;

	@Value("${salt_index}")
	private String saltIndex;

	@Override
	public Map createCustomerOrderReplicaService(CustomerOrderReplicaRequest customerOrderReplicaRequest,
			String contactNumber, Integer aparmentId)

	{

		Map response = new HashedMap<>();

		response.put("message", "success");
		CustomerOrderReplica customerOrderReplica = null;

		if (customerOrderReplicaRequest.getCartId() == null) {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "cartId is mandatory ");
		}
		long razorPayCount = 0;
		if (customerOrderReplicaRequest.getOrderId() != null) {

			razorPayCount = customerOrderReplicaDoa.getRazorPayExistByCartId(customerOrderReplicaRequest.getOrderId());
		}

		if (customerOrderReplicaRequest.getCustomerDetails() == null) {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Order Details  is mandatory ");
		}

		customerOrderReplica = customerOrderReplicaDoa.getCustomerOrderByCartId(customerOrderReplicaRequest.getCartId(),
				contactNumber);

		if (customerOrderReplica != null) {
			customerOrderReplica.setCartId(customerOrderReplica.getCartId());

			if (customerOrderReplica.isOrdered()) {
				throw new ResponseStatusException(HttpStatus.CONFLICT, "Your Order is Placed With cart Details");
			}

//			if (razorPayCount >= 1 && !(customerOrderReplica.getRazorPayOrderId() != null
//					&& customerOrderReplica.getRazorPayOrderId().equals(customerOrderReplicaRequest.getOrderId()))) {
//				throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Razor Pay Id Are already Exist ");
//			}

			customerOrderReplica.setStatusType(customerOrderReplicaRequest.getStatusType());
			customerOrderReplica.setContactNumber(contactNumber);
			customerOrderReplica.setApartmentId(aparmentId);

			customerOrderReplica.setAttempts(customerOrderReplica.getAttempts() + 1);
			customerOrderReplica.setUpdatedTime(new Date());

			customerOrderReplica.setRazorPayOrderId(customerOrderReplicaRequest.getOrderId());

			try {

				JSONObject obj = new JSONObject(customerOrderReplicaRequest.getCustomerDetails());

				customerOrderReplica.setCustomerOrderDetails(obj != null ? obj.toString() : null);

				customerOrderReplicaDoa.updateCustomer(customerOrderReplica);
				return response;

			} catch (Exception e) {
				customerOrderReplica.setCustomerOrderDetails(customerOrderReplicaRequest.getCustomerDetails() != null
						? customerOrderReplicaRequest.getCustomerDetails().toString()
						: null);
				customerOrderReplicaDoa.updateCustomer(customerOrderReplica);
				return response;
			}

		} else {

			customerOrderReplica = new CustomerOrderReplica();
			customerOrderReplica.setContactNumber(contactNumber);
			customerOrderReplica.setApartmentId(aparmentId);
			customerOrderReplica.setCartId(customerOrderReplicaRequest.getCartId());
			customerOrderReplica.setStatusType(customerOrderReplicaRequest.getStatusType());

			if (razorPayCount > 0) {
				throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Razor Pay Id Are already Exist ");
			}

			customerOrderReplica.setRazorPayOrderId(customerOrderReplicaRequest.getOrderId());

			Schedule schedule = scheduleDao.getlatestScheduleCustomers();

			if (schedule != null) {

				try {
					customerOrderReplica.setSchedule(schedule.getsId() != null ? schedule.getsId().toString() : null);
				} catch (Exception e) {
					e.printStackTrace();
				}
			} else {
				throw new ResponseStatusException(HttpStatus.BAD_REQUEST,
						"Sorry We Are Not Accepting Any Order Right now");

			}

			try {

				JSONObject obj = new JSONObject(customerOrderReplicaRequest.getCustomerDetails());

				customerOrderReplica.setCustomerOrderDetails(obj != null ? obj.toString() : null);

				customerOrderReplicaDoa.updateCustomer(customerOrderReplica);
				return response;

			} catch (Exception e) {
				customerOrderReplica.setCustomerOrderDetails(customerOrderReplicaRequest.getCustomerDetails() != null
						? customerOrderReplicaRequest.getCustomerDetails().toString()
						: null);
				customerOrderReplicaDoa.updateCustomer(customerOrderReplica);
				return response;
			}

		}

	}

	@Override
	public List<CustomerOrderReplica> getAllCustomerOrderReplicas(Map<String, Object> request) {

		String statusType = null;
		String searchQuery = null;

		String schedule = null;

		Map filter = request.containsKey("filters") ? (Map) request.get("filters") : null;
		if (filter != null) {
			statusType = filter.containsKey("statusType") ? ((String) filter.get("statusType")).toLowerCase() : null;
			searchQuery = filter.containsKey("searchQuery") ? ((String) filter.get("searchQuery")).toLowerCase() : null;
			schedule = filter.containsKey("schedule") ? (String.valueOf(filter.get("schedule"))) : null;

		}

		List<CustomerOrderReplica> CustomerOrderReplica = customerOrderReplicaDoa
				.getAllcustomerOrderReplica(searchQuery, statusType, schedule);

		ObjectMapper objectMapper = new ObjectMapper();
		CustomerOrderReplica.forEach(customerOrderReplica -> {
			try {

				// convert JSON string to Map
				Map<String, Object> customerOrderReplicaMap = objectMapper
						.readValue(customerOrderReplica.getCustomerOrderDetails(), Map.class);

				Object customerOrder = customerOrderReplicaMap.get("customerOrder");
				Map<String, Object> items = (Map<String, Object>) customerOrderReplicaMap.get("items");

				Object quanityList = items.get("quantity");

				Map customers = customerDetailsDao.getByContactNumberAndApartment(
						customerOrderReplica.getContactNumber(), customerOrderReplica.getApartmentId());

				// Apartments apartments =
				// apartmentDao.getApartmentById(customerOrderReplica.getApartmentId());
				customerOrderReplica.setApartmentName(
						customers.get("apartmentName") != null ? (String) customers.get("apartmentName") : null);

				customerOrderReplica.setStreetName(
						customers.get("streetName") != null ? (String) customers.get("streetName") : null);

				customerOrderReplica.setCustomerDetails(customers);

				customerOrderReplica.setCustomerOrder(customerOrder);
				customerOrderReplica.setQuatityList(quanityList);

			} catch (Exception e) {
				e.printStackTrace();
			}

		});

		return CustomerOrderReplica;

	}

	@Override
	public List<CustomerOrderReplica> getAllCustomerOrderReplicasBySchedule(Map<String, Object> request) {

		String statusType = null;
		String searchQuery = null;

		String scheduleId = null;

		Schedule schedule = scheduleDao.getlatestScheduleCustomers();

		if (schedule != null) {

			try {
				scheduleId = schedule.getsId() != null ? schedule.getsId().toString() : null;
			} catch (Exception e) {
				e.printStackTrace();
			}
		}

		statusType = request.containsKey("statusType") ? ((String) request.get("statusType")).toLowerCase() : "Success";

		List<CustomerOrderReplica> CustomerOrderReplica = customerOrderReplicaDoa
				.getAllcustomerOrderReplicaBySchdeule(statusType, scheduleId);

		ObjectMapper objectMapper = new ObjectMapper();
		CustomerOrderReplica.forEach(customerOrderReplica -> {
			try {

				// convert JSON string to Map
				Map<String, Object> customerOrderReplicaMap = objectMapper
						.readValue(customerOrderReplica.getCustomerOrderDetails(), Map.class);

				Object customerOrder = customerOrderReplicaMap.get("customerOrder");
				Map<String, Object> items = (Map<String, Object>) customerOrderReplicaMap.get("items");

				Object quanityList = items.get("quantity");
				Map customers = customerDetailsDao.getByContactNumberAndApartment(
						customerOrderReplica.getContactNumber(), customerOrderReplica.getApartmentId());

				System.out.println("customers" + customers.get("customerName"));

				// Apartments apartments =
				// apartmentDao.getApartmentById(customerOrderReplica.getApartmentId());
				customerOrderReplica.setApartmentName(
						customers.get("apartmentName") != null ? (String) customers.get("apartmentName") : null);

				customerOrderReplica.setCustomerDetails(customers);

				customerOrderReplica.setCustomerOrder(customerOrder);
				customerOrderReplica.setQuatityList(quanityList);

			} catch (Exception e) {
				e.printStackTrace();
			}

		});

		return CustomerOrderReplica;

	}

	@Override
	public CustomerOrderReplica getCustomerOrderReplicaByCartId(String cartId) {

		CustomerOrderReplica CustomerOrderReplica = customerOrderReplicaDoa.getCustomerOrderByCartId(cartId,
				currentUser.getContactNumber());

		ObjectMapper objectMapper = new ObjectMapper();
		try {

			// convert JSON string to Map
			Map<String, Object> customerOrderReplicaMap = objectMapper
					.readValue(CustomerOrderReplica.getCustomerOrderDetails(), Map.class);

			Object customerOrder = customerOrderReplicaMap.get("customerOrder");
			Map<String, Object> items = (Map<String, Object>) customerOrderReplicaMap.get("items");

			Object quanityList = items.get("quantity");
			Map customers = customerDetailsDao.getByContactNumberAndApartment(CustomerOrderReplica.getContactNumber(),
					CustomerOrderReplica.getApartmentId());

			System.out.println("customers" + customers.get("customerName"));

			// Apartments apartments =
			// apartmentDao.getApartmentById(customerOrderReplica.getApartmentId());
			CustomerOrderReplica.setApartmentName(
					customers.get("apartmentName") != null ? (String) customers.get("apartmentName") : null);

			CustomerOrderReplica.setCustomerDetails(customers);

			CustomerOrderReplica.setCustomerOrder(customerOrder);
			CustomerOrderReplica.setQuatityList(quanityList);

		} catch (Exception e) {
			e.printStackTrace();
		}

		return CustomerOrderReplica;

	}

	@Override
	public Map createCustomerOrderReplica(CustomerOrderReplicaRequest customerOrderReplicaRequest, String contactNumber,
			Integer aparmentId) {

		if (customerOrderReplicaRequest.getRazorPayRequest() != null) {

//			Map razorPay = consumerService.createRazorPayOrder(customerOrderReplicaRequest.getRazorPayRequest());
//			customerOrderReplicaRequest.setOrderId(razorPay.get("order") != null ? (String)((RazorPay) razorPay.get("order")).getId() : null);	
//	
//			createCustomerOrderReplicaService(customerOrderReplicaRequest, contactNumber, aparmentId);
//
//			razorPay.put("cartId", customerOrderReplicaRequest.getCartId());

			Map customerOrderReplicaMap = new HashMap<>();

			Map orderId = new HashMap<>();
			String transactionId = getMerchantTransactionId();
			orderId.put("id", transactionId);

			customerOrderReplicaMap.put("order", orderId);

			customerOrderReplicaRequest.setOrderId(transactionId);
			createCustomerOrderReplicaService(customerOrderReplicaRequest, contactNumber, aparmentId);

			customerOrderReplicaMap.put("cartId", customerOrderReplicaRequest.getCartId());

			try {
				customerOrderReplicaMap.put("phonePeResponse",
						phonepeServiceImpl.initiatePhonepePayment(transactionId,
								Integer.valueOf(customerOrderReplicaRequest.getRazorPayRequest().getAmount()),
								contactNumber, customerOrderReplicaRequest.getRedirectUrl(), customerOrderReplicaRequest.getCallBackUrl()));

			} catch (Exception e) {
				e.printStackTrace();
				customerOrderReplicaMap.put("phonePeResponse", new HashedMap<>());
			}

			return customerOrderReplicaMap;

		} else {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST,
					"paymentDetails transcation Details are mandatory");
		}

	}

	private static String getMerchantTransactionId() {

		return "OD_" + MerchantTransactionIdGenerator.getRandomString();
	}


	@Override
	public List<CustomerOrderReplica> getCustomerOrderByMoblieNo(String contactNumber,Integer aid) {
		
		Schedule latestschedule = customerOrderReplicaDoa.getlatestschedule();
		
		if (latestschedule != null && latestschedule.getCreationTimestamp()!=null) {
			
	        if (latestschedule.getStatus().equals(UserStatus.ACTIVE)) {
	        	
	        	Customers customer = customerDetailsDao.getByContactNoAndApartment(contactNumber, aid);
	        	if (customer != null) { // Ensure the customer exists
	        		List<CustomerOrder> customerOrderList = customerOrderReplicaDoa.getListCustomerOrderByCustomerId(customer.getCtid());
	        		
	                double totalOrderAmount = 0.0;
	       
                if (customerOrderList != null && !customerOrderList.isEmpty() && customerOrderList.add(customerOrder). {
                    for (CustomerOrder customerOrder : customerOrderList) {
                        Double orderAmount = customerOrder.getAmount();
                        
                        if(orderAmount>200) {
                        	
                        }
                        if (orderAmount != null) {
                            totalOrderAmount += orderAmount;
                            if(totalOrderAmount>200) {
                            	totalOrderAmount+customerOrder
                            }
                        }
                    }
                    System.out.println("Total Order Amount: " + totalOrderAmount);
                    List<CustomerOrderReplica> customerOrderReplicas = new ArrayList<>();
                    return customerOrderReplicas;
                } else {
                    return Collections.emptyList(); // or return null or an appropriate value
                }
            } else {
              
                return null; // or an appropriate value
            }
        } else {
            // Handle the case when the latest schedule is not active
            return null; // or an appropriate value
        }
    } else {
        // Handle the case when there is no latest schedule or its creation timestamp is null
        return null; // or an appropriate value
    }
	}
}



----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3003)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1003)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:799)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:743)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-09-21 15:04:10.316
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3003)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1003)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:799)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:743)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-09-21 15:04:10.318
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3003)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1003)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:799)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:743)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2023-09-21 15:04:17.848
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.xyram.daydrop.serviceimpl;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.transaction.Transactional;

import org.apache.commons.collections4.map.HashedMap;
import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.server.ResponseStatusException;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.xyram.daydrop.admin.model.CurrentUser;
import com.xyram.daydrop.basemodel.Base64Wrapper;
import com.xyram.daydrop.basemodel.MerchantTransactionIdGenerator;
import com.xyram.daydrop.basemodel.PhonepeSerializer;
import com.xyram.daydrop.dao.ApartmentDao;
import com.xyram.daydrop.dao.CustomerDetailsDao;
import com.xyram.daydrop.dao.CustomerOrderDao;
import com.xyram.daydrop.dao.CustomerOrderReplicaDoa;
import com.xyram.daydrop.dao.SheduleDao;
import com.xyram.daydrop.enumtypes.UserStatus;
import com.xyram.daydrop.model.Apartments;
import com.xyram.daydrop.model.CustomerOrder;
import com.xyram.daydrop.model.CustomerOrderReplica;
import com.xyram.daydrop.model.Customers;
import com.xyram.daydrop.model.Schedule;
import com.xyram.daydrop.modelMapper.PaymentInstrument;
import com.xyram.daydrop.modelMapper.PhonePePayModel;
import com.xyram.daydrop.request.CustomerOrderReplicaRequest;
import com.xyram.daydrop.response.RazorPayRequest;
import com.xyram.daydrop.service.CustomerOrderPriceService;
import com.xyram.daydrop.service.CustomerOrderReplicaService;
import com.xyram.daydrop.util.HashEncoder;
import com.xyram.daydrop.util.RazorPay;
import com.xyram.daydrop.service.ConsumerService;

@Transactional
@Service
public class CustomerOrderReplicaServiceImpl implements CustomerOrderReplicaService {

	@Autowired
	CustomerOrderReplicaDoa customerOrderReplicaDoa;

	@Autowired
	ApartmentDao apartmentDao;

	@Autowired
	SheduleDao scheduleDao;

	@Autowired
	CustomerDetailsDao customerDetailsDao;

	@Autowired
	ConsumerService consumerService;

	@Autowired
	CurrentUser currentUser;

	@Autowired
	PhonepeServiceImpl phonepeServiceImpl;

	@Value("${merchant_id}")
	private String merchantId;

	@Value("${salt_key}")
	private String saltKey;

	@Value("${salt_index}")
	private String saltIndex;

	@Override
	public Map createCustomerOrderReplicaService(CustomerOrderReplicaRequest customerOrderReplicaRequest,
			String contactNumber, Integer aparmentId)

	{

		Map response = new HashedMap<>();

		response.put("message", "success");
		CustomerOrderReplica customerOrderReplica = null;

		if (customerOrderReplicaRequest.getCartId() == null) {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "cartId is mandatory ");
		}
		long razorPayCount = 0;
		if (customerOrderReplicaRequest.getOrderId() != null) {

			razorPayCount = customerOrderReplicaDoa.getRazorPayExistByCartId(customerOrderReplicaRequest.getOrderId());
		}

		if (customerOrderReplicaRequest.getCustomerDetails() == null) {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Order Details  is mandatory ");
		}

		customerOrderReplica = customerOrderReplicaDoa.getCustomerOrderByCartId(customerOrderReplicaRequest.getCartId(),
				contactNumber);

		if (customerOrderReplica != null) {
			customerOrderReplica.setCartId(customerOrderReplica.getCartId());

			if (customerOrderReplica.isOrdered()) {
				throw new ResponseStatusException(HttpStatus.CONFLICT, "Your Order is Placed With cart Details");
			}

//			if (razorPayCount >= 1 && !(customerOrderReplica.getRazorPayOrderId() != null
//					&& customerOrderReplica.getRazorPayOrderId().equals(customerOrderReplicaRequest.getOrderId()))) {
//				throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Razor Pay Id Are already Exist ");
//			}

			customerOrderReplica.setStatusType(customerOrderReplicaRequest.getStatusType());
			customerOrderReplica.setContactNumber(contactNumber);
			customerOrderReplica.setApartmentId(aparmentId);

			customerOrderReplica.setAttempts(customerOrderReplica.getAttempts() + 1);
			customerOrderReplica.setUpdatedTime(new Date());

			customerOrderReplica.setRazorPayOrderId(customerOrderReplicaRequest.getOrderId());

			try {

				JSONObject obj = new JSONObject(customerOrderReplicaRequest.getCustomerDetails());

				customerOrderReplica.setCustomerOrderDetails(obj != null ? obj.toString() : null);

				customerOrderReplicaDoa.updateCustomer(customerOrderReplica);
				return response;

			} catch (Exception e) {
				customerOrderReplica.setCustomerOrderDetails(customerOrderReplicaRequest.getCustomerDetails() != null
						? customerOrderReplicaRequest.getCustomerDetails().toString()
						: null);
				customerOrderReplicaDoa.updateCustomer(customerOrderReplica);
				return response;
			}

		} else {

			customerOrderReplica = new CustomerOrderReplica();
			customerOrderReplica.setContactNumber(contactNumber);
			customerOrderReplica.setApartmentId(aparmentId);
			customerOrderReplica.setCartId(customerOrderReplicaRequest.getCartId());
			customerOrderReplica.setStatusType(customerOrderReplicaRequest.getStatusType());

			if (razorPayCount > 0) {
				throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Razor Pay Id Are already Exist ");
			}

			customerOrderReplica.setRazorPayOrderId(customerOrderReplicaRequest.getOrderId());

			Schedule schedule = scheduleDao.getlatestScheduleCustomers();

			if (schedule != null) {

				try {
					customerOrderReplica.setSchedule(schedule.getsId() != null ? schedule.getsId().toString() : null);
				} catch (Exception e) {
					e.printStackTrace();
				}
			} else {
				throw new ResponseStatusException(HttpStatus.BAD_REQUEST,
						"Sorry We Are Not Accepting Any Order Right now");

			}

			try {

				JSONObject obj = new JSONObject(customerOrderReplicaRequest.getCustomerDetails());

				customerOrderReplica.setCustomerOrderDetails(obj != null ? obj.toString() : null);

				customerOrderReplicaDoa.updateCustomer(customerOrderReplica);
				return response;

			} catch (Exception e) {
				customerOrderReplica.setCustomerOrderDetails(customerOrderReplicaRequest.getCustomerDetails() != null
						? customerOrderReplicaRequest.getCustomerDetails().toString()
						: null);
				customerOrderReplicaDoa.updateCustomer(customerOrderReplica);
				return response;
			}

		}

	}

	@Override
	public List<CustomerOrderReplica> getAllCustomerOrderReplicas(Map<String, Object> request) {

		String statusType = null;
		String searchQuery = null;

		String schedule = null;

		Map filter = request.containsKey("filters") ? (Map) request.get("filters") : null;
		if (filter != null) {
			statusType = filter.containsKey("statusType") ? ((String) filter.get("statusType")).toLowerCase() : null;
			searchQuery = filter.containsKey("searchQuery") ? ((String) filter.get("searchQuery")).toLowerCase() : null;
			schedule = filter.containsKey("schedule") ? (String.valueOf(filter.get("schedule"))) : null;

		}

		List<CustomerOrderReplica> CustomerOrderReplica = customerOrderReplicaDoa
				.getAllcustomerOrderReplica(searchQuery, statusType, schedule);

		ObjectMapper objectMapper = new ObjectMapper();
		CustomerOrderReplica.forEach(customerOrderReplica -> {
			try {

				// convert JSON string to Map
				Map<String, Object> customerOrderReplicaMap = objectMapper
						.readValue(customerOrderReplica.getCustomerOrderDetails(), Map.class);

				Object customerOrder = customerOrderReplicaMap.get("customerOrder");
				Map<String, Object> items = (Map<String, Object>) customerOrderReplicaMap.get("items");

				Object quanityList = items.get("quantity");

				Map customers = customerDetailsDao.getByContactNumberAndApartment(
						customerOrderReplica.getContactNumber(), customerOrderReplica.getApartmentId());

				// Apartments apartments =
				// apartmentDao.getApartmentById(customerOrderReplica.getApartmentId());
				customerOrderReplica.setApartmentName(
						customers.get("apartmentName") != null ? (String) customers.get("apartmentName") : null);

				customerOrderReplica.setStreetName(
						customers.get("streetName") != null ? (String) customers.get("streetName") : null);

				customerOrderReplica.setCustomerDetails(customers);

				customerOrderReplica.setCustomerOrder(customerOrder);
				customerOrderReplica.setQuatityList(quanityList);

			} catch (Exception e) {
				e.printStackTrace();
			}

		});

		return CustomerOrderReplica;

	}

	@Override
	public List<CustomerOrderReplica> getAllCustomerOrderReplicasBySchedule(Map<String, Object> request) {

		String statusType = null;
		String searchQuery = null;

		String scheduleId = null;

		Schedule schedule = scheduleDao.getlatestScheduleCustomers();

		if (schedule != null) {

			try {
				scheduleId = schedule.getsId() != null ? schedule.getsId().toString() : null;
			} catch (Exception e) {
				e.printStackTrace();
			}
		}

		statusType = request.containsKey("statusType") ? ((String) request.get("statusType")).toLowerCase() : "Success";

		List<CustomerOrderReplica> CustomerOrderReplica = customerOrderReplicaDoa
				.getAllcustomerOrderReplicaBySchdeule(statusType, scheduleId);

		ObjectMapper objectMapper = new ObjectMapper();
		CustomerOrderReplica.forEach(customerOrderReplica -> {
			try {

				// convert JSON string to Map
				Map<String, Object> customerOrderReplicaMap = objectMapper
						.readValue(customerOrderReplica.getCustomerOrderDetails(), Map.class);

				Object customerOrder = customerOrderReplicaMap.get("customerOrder");
				Map<String, Object> items = (Map<String, Object>) customerOrderReplicaMap.get("items");

				Object quanityList = items.get("quantity");
				Map customers = customerDetailsDao.getByContactNumberAndApartment(
						customerOrderReplica.getContactNumber(), customerOrderReplica.getApartmentId());

				System.out.println("customers" + customers.get("customerName"));

				// Apartments apartments =
				// apartmentDao.getApartmentById(customerOrderReplica.getApartmentId());
				customerOrderReplica.setApartmentName(
						customers.get("apartmentName") != null ? (String) customers.get("apartmentName") : null);

				customerOrderReplica.setCustomerDetails(customers);

				customerOrderReplica.setCustomerOrder(customerOrder);
				customerOrderReplica.setQuatityList(quanityList);

			} catch (Exception e) {
				e.printStackTrace();
			}

		});

		return CustomerOrderReplica;

	}

	@Override
	public CustomerOrderReplica getCustomerOrderReplicaByCartId(String cartId) {

		CustomerOrderReplica CustomerOrderReplica = customerOrderReplicaDoa.getCustomerOrderByCartId(cartId,
				currentUser.getContactNumber());

		ObjectMapper objectMapper = new ObjectMapper();
		try {

			// convert JSON string to Map
			Map<String, Object> customerOrderReplicaMap = objectMapper
					.readValue(CustomerOrderReplica.getCustomerOrderDetails(), Map.class);

			Object customerOrder = customerOrderReplicaMap.get("customerOrder");
			Map<String, Object> items = (Map<String, Object>) customerOrderReplicaMap.get("items");

			Object quanityList = items.get("quantity");
			Map customers = customerDetailsDao.getByContactNumberAndApartment(CustomerOrderReplica.getContactNumber(),
					CustomerOrderReplica.getApartmentId());

			System.out.println("customers" + customers.get("customerName"));

			// Apartments apartments =
			// apartmentDao.getApartmentById(customerOrderReplica.getApartmentId());
			CustomerOrderReplica.setApartmentName(
					customers.get("apartmentName") != null ? (String) customers.get("apartmentName") : null);

			CustomerOrderReplica.setCustomerDetails(customers);

			CustomerOrderReplica.setCustomerOrder(customerOrder);
			CustomerOrderReplica.setQuatityList(quanityList);

		} catch (Exception e) {
			e.printStackTrace();
		}

		return CustomerOrderReplica;

	}

	@Override
	public Map createCustomerOrderReplica(CustomerOrderReplicaRequest customerOrderReplicaRequest, String contactNumber,
			Integer aparmentId) {

		if (customerOrderReplicaRequest.getRazorPayRequest() != null) {

//			Map razorPay = consumerService.createRazorPayOrder(customerOrderReplicaRequest.getRazorPayRequest());
//			customerOrderReplicaRequest.setOrderId(razorPay.get("order") != null ? (String)((RazorPay) razorPay.get("order")).getId() : null);	
//	
//			createCustomerOrderReplicaService(customerOrderReplicaRequest, contactNumber, aparmentId);
//
//			razorPay.put("cartId", customerOrderReplicaRequest.getCartId());

			Map customerOrderReplicaMap = new HashMap<>();

			Map orderId = new HashMap<>();
			String transactionId = getMerchantTransactionId();
			orderId.put("id", transactionId);

			customerOrderReplicaMap.put("order", orderId);

			customerOrderReplicaRequest.setOrderId(transactionId);
			createCustomerOrderReplicaService(customerOrderReplicaRequest, contactNumber, aparmentId);

			customerOrderReplicaMap.put("cartId", customerOrderReplicaRequest.getCartId());

			try {
				customerOrderReplicaMap.put("phonePeResponse",
						phonepeServiceImpl.initiatePhonepePayment(transactionId,
								Integer.valueOf(customerOrderReplicaRequest.getRazorPayRequest().getAmount()),
								contactNumber, customerOrderReplicaRequest.getRedirectUrl(), customerOrderReplicaRequest.getCallBackUrl()));

			} catch (Exception e) {
				e.printStackTrace();
				customerOrderReplicaMap.put("phonePeResponse", new HashedMap<>());
			}

			return customerOrderReplicaMap;

		} else {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST,
					"paymentDetails transcation Details are mandatory");
		}

	}

	private static String getMerchantTransactionId() {

		return "OD_" + MerchantTransactionIdGenerator.getRandomString();
	}


	@Override
	public List<CustomerOrderReplica> getCustomerOrderByMoblieNo(String contactNumber,Integer aid) {
		
		Schedule latestschedule = customerOrderReplicaDoa.getlatestschedule();
		
		if (latestschedule != null && latestschedule.getCreationTimestamp()!=null) {
			
	        if (latestschedule.getStatus().equals(UserStatus.ACTIVE)) {
	        	
	        	Customers customer = customerDetailsDao.getByContactNoAndApartment(contactNumber, aid);
	        	if (customer != null) { // Ensure the customer exists
	        		List<CustomerOrder> customerOrderList = customerOrderReplicaDoa.getListCustomerOrderByCustomerId(customer.getCtid());
	        		
	                double totalOrderAmount = 0.0;
	       
                if (customerOrderList != null && !customerOrderList.isEmpty() && customerOrderList.add(customerOrder). {
                    for (CustomerOrder customerOrder : customerOrderList) {
                        Double orderAmount = customerOrder.getAmount();
                        
                        if(orderAmount>200) {
                        	
                        }
                        if (orderAmount != null) {
                            totalOrderAmount += orderAmount;
                            if(totalOrderAmount>200) {
                            	totalOrderAmount+customerOrder
                            }
                        }
                    }
                    System.out.println("Total Order Amount: " + totalOrderAmount);
                    List<CustomerOrderReplica> customerOrderReplicas = new ArrayList<>();
                    return customerOrderReplicas;
                } else {
                    return Collections.emptyList(); // or return null or an appropriate value
                }
            } else {
              
                return null; // or an appropriate value
            }
        } else {
            // Handle the case when the latest schedule is not active
            return null; // or an appropriate value
        }
    } else {
        // Handle the case when there is no latest schedule or its creation timestamp is null
        return null; // or an appropriate value
    }
	}
}



----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3003)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-09-21 15:04:17.850
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3003)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-09-21 15:04:17.851
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3003)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2023-09-21 15:04:17.910
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.xyram.daydrop.serviceimpl;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.transaction.Transactional;

import org.apache.commons.collections4.map.HashedMap;
import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.server.ResponseStatusException;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.xyram.daydrop.admin.model.CurrentUser;
import com.xyram.daydrop.basemodel.Base64Wrapper;
import com.xyram.daydrop.basemodel.MerchantTransactionIdGenerator;
import com.xyram.daydrop.basemodel.PhonepeSerializer;
import com.xyram.daydrop.dao.ApartmentDao;
import com.xyram.daydrop.dao.CustomerDetailsDao;
import com.xyram.daydrop.dao.CustomerOrderDao;
import com.xyram.daydrop.dao.CustomerOrderReplicaDoa;
import com.xyram.daydrop.dao.SheduleDao;
import com.xyram.daydrop.enumtypes.UserStatus;
import com.xyram.daydrop.model.Apartments;
import com.xyram.daydrop.model.CustomerOrder;
import com.xyram.daydrop.model.CustomerOrderReplica;
import com.xyram.daydrop.model.Customers;
import com.xyram.daydrop.model.Schedule;
import com.xyram.daydrop.modelMapper.PaymentInstrument;
import com.xyram.daydrop.modelMapper.PhonePePayModel;
import com.xyram.daydrop.request.CustomerOrderReplicaRequest;
import com.xyram.daydrop.response.RazorPayRequest;
import com.xyram.daydrop.service.CustomerOrderPriceService;
import com.xyram.daydrop.service.CustomerOrderReplicaService;
import com.xyram.daydrop.util.HashEncoder;
import com.xyram.daydrop.util.RazorPay;
import com.xyram.daydrop.service.ConsumerService;

@Transactional
@Service
public class CustomerOrderReplicaServiceImpl implements CustomerOrderReplicaService {

	@Autowired
	CustomerOrderReplicaDoa customerOrderReplicaDoa;

	@Autowired
	ApartmentDao apartmentDao;

	@Autowired
	SheduleDao scheduleDao;

	@Autowired
	CustomerDetailsDao customerDetailsDao;

	@Autowired
	ConsumerService consumerService;

	@Autowired
	CurrentUser currentUser;

	@Autowired
	PhonepeServiceImpl phonepeServiceImpl;

	@Value("${merchant_id}")
	private String merchantId;

	@Value("${salt_key}")
	private String saltKey;

	@Value("${salt_index}")
	private String saltIndex;

	@Override
	public Map createCustomerOrderReplicaService(CustomerOrderReplicaRequest customerOrderReplicaRequest,
			String contactNumber, Integer aparmentId)

	{

		Map response = new HashedMap<>();

		response.put("message", "success");
		CustomerOrderReplica customerOrderReplica = null;

		if (customerOrderReplicaRequest.getCartId() == null) {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "cartId is mandatory ");
		}
		long razorPayCount = 0;
		if (customerOrderReplicaRequest.getOrderId() != null) {

			razorPayCount = customerOrderReplicaDoa.getRazorPayExistByCartId(customerOrderReplicaRequest.getOrderId());
		}

		if (customerOrderReplicaRequest.getCustomerDetails() == null) {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Order Details  is mandatory ");
		}

		customerOrderReplica = customerOrderReplicaDoa.getCustomerOrderByCartId(customerOrderReplicaRequest.getCartId(),
				contactNumber);

		if (customerOrderReplica != null) {
			customerOrderReplica.setCartId(customerOrderReplica.getCartId());

			if (customerOrderReplica.isOrdered()) {
				throw new ResponseStatusException(HttpStatus.CONFLICT, "Your Order is Placed With cart Details");
			}

//			if (razorPayCount >= 1 && !(customerOrderReplica.getRazorPayOrderId() != null
//					&& customerOrderReplica.getRazorPayOrderId().equals(customerOrderReplicaRequest.getOrderId()))) {
//				throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Razor Pay Id Are already Exist ");
//			}

			customerOrderReplica.setStatusType(customerOrderReplicaRequest.getStatusType());
			customerOrderReplica.setContactNumber(contactNumber);
			customerOrderReplica.setApartmentId(aparmentId);

			customerOrderReplica.setAttempts(customerOrderReplica.getAttempts() + 1);
			customerOrderReplica.setUpdatedTime(new Date());

			customerOrderReplica.setRazorPayOrderId(customerOrderReplicaRequest.getOrderId());

			try {

				JSONObject obj = new JSONObject(customerOrderReplicaRequest.getCustomerDetails());

				customerOrderReplica.setCustomerOrderDetails(obj != null ? obj.toString() : null);

				customerOrderReplicaDoa.updateCustomer(customerOrderReplica);
				return response;

			} catch (Exception e) {
				customerOrderReplica.setCustomerOrderDetails(customerOrderReplicaRequest.getCustomerDetails() != null
						? customerOrderReplicaRequest.getCustomerDetails().toString()
						: null);
				customerOrderReplicaDoa.updateCustomer(customerOrderReplica);
				return response;
			}

		} else {

			customerOrderReplica = new CustomerOrderReplica();
			customerOrderReplica.setContactNumber(contactNumber);
			customerOrderReplica.setApartmentId(aparmentId);
			customerOrderReplica.setCartId(customerOrderReplicaRequest.getCartId());
			customerOrderReplica.setStatusType(customerOrderReplicaRequest.getStatusType());

			if (razorPayCount > 0) {
				throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Razor Pay Id Are already Exist ");
			}

			customerOrderReplica.setRazorPayOrderId(customerOrderReplicaRequest.getOrderId());

			Schedule schedule = scheduleDao.getlatestScheduleCustomers();

			if (schedule != null) {

				try {
					customerOrderReplica.setSchedule(schedule.getsId() != null ? schedule.getsId().toString() : null);
				} catch (Exception e) {
					e.printStackTrace();
				}
			} else {
				throw new ResponseStatusException(HttpStatus.BAD_REQUEST,
						"Sorry We Are Not Accepting Any Order Right now");

			}

			try {

				JSONObject obj = new JSONObject(customerOrderReplicaRequest.getCustomerDetails());

				customerOrderReplica.setCustomerOrderDetails(obj != null ? obj.toString() : null);

				customerOrderReplicaDoa.updateCustomer(customerOrderReplica);
				return response;

			} catch (Exception e) {
				customerOrderReplica.setCustomerOrderDetails(customerOrderReplicaRequest.getCustomerDetails() != null
						? customerOrderReplicaRequest.getCustomerDetails().toString()
						: null);
				customerOrderReplicaDoa.updateCustomer(customerOrderReplica);
				return response;
			}

		}

	}

	@Override
	public List<CustomerOrderReplica> getAllCustomerOrderReplicas(Map<String, Object> request) {

		String statusType = null;
		String searchQuery = null;

		String schedule = null;

		Map filter = request.containsKey("filters") ? (Map) request.get("filters") : null;
		if (filter != null) {
			statusType = filter.containsKey("statusType") ? ((String) filter.get("statusType")).toLowerCase() : null;
			searchQuery = filter.containsKey("searchQuery") ? ((String) filter.get("searchQuery")).toLowerCase() : null;
			schedule = filter.containsKey("schedule") ? (String.valueOf(filter.get("schedule"))) : null;

		}

		List<CustomerOrderReplica> CustomerOrderReplica = customerOrderReplicaDoa
				.getAllcustomerOrderReplica(searchQuery, statusType, schedule);

		ObjectMapper objectMapper = new ObjectMapper();
		CustomerOrderReplica.forEach(customerOrderReplica -> {
			try {

				// convert JSON string to Map
				Map<String, Object> customerOrderReplicaMap = objectMapper
						.readValue(customerOrderReplica.getCustomerOrderDetails(), Map.class);

				Object customerOrder = customerOrderReplicaMap.get("customerOrder");
				Map<String, Object> items = (Map<String, Object>) customerOrderReplicaMap.get("items");

				Object quanityList = items.get("quantity");

				Map customers = customerDetailsDao.getByContactNumberAndApartment(
						customerOrderReplica.getContactNumber(), customerOrderReplica.getApartmentId());

				// Apartments apartments =
				// apartmentDao.getApartmentById(customerOrderReplica.getApartmentId());
				customerOrderReplica.setApartmentName(
						customers.get("apartmentName") != null ? (String) customers.get("apartmentName") : null);

				customerOrderReplica.setStreetName(
						customers.get("streetName") != null ? (String) customers.get("streetName") : null);

				customerOrderReplica.setCustomerDetails(customers);

				customerOrderReplica.setCustomerOrder(customerOrder);
				customerOrderReplica.setQuatityList(quanityList);

			} catch (Exception e) {
				e.printStackTrace();
			}

		});

		return CustomerOrderReplica;

	}

	@Override
	public List<CustomerOrderReplica> getAllCustomerOrderReplicasBySchedule(Map<String, Object> request) {

		String statusType = null;
		String searchQuery = null;

		String scheduleId = null;

		Schedule schedule = scheduleDao.getlatestScheduleCustomers();

		if (schedule != null) {

			try {
				scheduleId = schedule.getsId() != null ? schedule.getsId().toString() : null;
			} catch (Exception e) {
				e.printStackTrace();
			}
		}

		statusType = request.containsKey("statusType") ? ((String) request.get("statusType")).toLowerCase() : "Success";

		List<CustomerOrderReplica> CustomerOrderReplica = customerOrderReplicaDoa
				.getAllcustomerOrderReplicaBySchdeule(statusType, scheduleId);

		ObjectMapper objectMapper = new ObjectMapper();
		CustomerOrderReplica.forEach(customerOrderReplica -> {
			try {

				// convert JSON string to Map
				Map<String, Object> customerOrderReplicaMap = objectMapper
						.readValue(customerOrderReplica.getCustomerOrderDetails(), Map.class);

				Object customerOrder = customerOrderReplicaMap.get("customerOrder");
				Map<String, Object> items = (Map<String, Object>) customerOrderReplicaMap.get("items");

				Object quanityList = items.get("quantity");
				Map customers = customerDetailsDao.getByContactNumberAndApartment(
						customerOrderReplica.getContactNumber(), customerOrderReplica.getApartmentId());

				System.out.println("customers" + customers.get("customerName"));

				// Apartments apartments =
				// apartmentDao.getApartmentById(customerOrderReplica.getApartmentId());
				customerOrderReplica.setApartmentName(
						customers.get("apartmentName") != null ? (String) customers.get("apartmentName") : null);

				customerOrderReplica.setCustomerDetails(customers);

				customerOrderReplica.setCustomerOrder(customerOrder);
				customerOrderReplica.setQuatityList(quanityList);

			} catch (Exception e) {
				e.printStackTrace();
			}

		});

		return CustomerOrderReplica;

	}

	@Override
	public CustomerOrderReplica getCustomerOrderReplicaByCartId(String cartId) {

		CustomerOrderReplica CustomerOrderReplica = customerOrderReplicaDoa.getCustomerOrderByCartId(cartId,
				currentUser.getContactNumber());

		ObjectMapper objectMapper = new ObjectMapper();
		try {

			// convert JSON string to Map
			Map<String, Object> customerOrderReplicaMap = objectMapper
					.readValue(CustomerOrderReplica.getCustomerOrderDetails(), Map.class);

			Object customerOrder = customerOrderReplicaMap.get("customerOrder");
			Map<String, Object> items = (Map<String, Object>) customerOrderReplicaMap.get("items");

			Object quanityList = items.get("quantity");
			Map customers = customerDetailsDao.getByContactNumberAndApartment(CustomerOrderReplica.getContactNumber(),
					CustomerOrderReplica.getApartmentId());

			System.out.println("customers" + customers.get("customerName"));

			// Apartments apartments =
			// apartmentDao.getApartmentById(customerOrderReplica.getApartmentId());
			CustomerOrderReplica.setApartmentName(
					customers.get("apartmentName") != null ? (String) customers.get("apartmentName") : null);

			CustomerOrderReplica.setCustomerDetails(customers);

			CustomerOrderReplica.setCustomerOrder(customerOrder);
			CustomerOrderReplica.setQuatityList(quanityList);

		} catch (Exception e) {
			e.printStackTrace();
		}

		return CustomerOrderReplica;

	}

	@Override
	public Map createCustomerOrderReplica(CustomerOrderReplicaRequest customerOrderReplicaRequest, String contactNumber,
			Integer aparmentId) {

		if (customerOrderReplicaRequest.getRazorPayRequest() != null) {

//			Map razorPay = consumerService.createRazorPayOrder(customerOrderReplicaRequest.getRazorPayRequest());
//			customerOrderReplicaRequest.setOrderId(razorPay.get("order") != null ? (String)((RazorPay) razorPay.get("order")).getId() : null);	
//	
//			createCustomerOrderReplicaService(customerOrderReplicaRequest, contactNumber, aparmentId);
//
//			razorPay.put("cartId", customerOrderReplicaRequest.getCartId());

			Map customerOrderReplicaMap = new HashMap<>();

			Map orderId = new HashMap<>();
			String transactionId = getMerchantTransactionId();
			orderId.put("id", transactionId);

			customerOrderReplicaMap.put("order", orderId);

			customerOrderReplicaRequest.setOrderId(transactionId);
			createCustomerOrderReplicaService(customerOrderReplicaRequest, contactNumber, aparmentId);

			customerOrderReplicaMap.put("cartId", customerOrderReplicaRequest.getCartId());

			try {
				customerOrderReplicaMap.put("phonePeResponse",
						phonepeServiceImpl.initiatePhonepePayment(transactionId,
								Integer.valueOf(customerOrderReplicaRequest.getRazorPayRequest().getAmount()),
								contactNumber, customerOrderReplicaRequest.getRedirectUrl(), customerOrderReplicaRequest.getCallBackUrl()));

			} catch (Exception e) {
				e.printStackTrace();
				customerOrderReplicaMap.put("phonePeResponse", new HashedMap<>());
			}

			return customerOrderReplicaMap;

		} else {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST,
					"paymentDetails transcation Details are mandatory");
		}

	}

	private static String getMerchantTransactionId() {

		return "OD_" + MerchantTransactionIdGenerator.getRandomString();
	}


	@Override
	public List<CustomerOrderReplica> getCustomerOrderByMoblieNo(String contactNumber,Integer aid) {
		
		Schedule latestschedule = customerOrderReplicaDoa.getlatestschedule();
		
		if (latestschedule != null && latestschedule.getCreationTimestamp()!=null) {
			
	        if (latestschedule.getStatus().equals(UserStatus.ACTIVE)) {
	        	
	        	Customers customer = customerDetailsDao.getByContactNoAndApartment(contactNumber, aid);
	        	if (customer != null) { // Ensure the customer exists
	        		List<CustomerOrder> customerOrderList = customerOrderReplicaDoa.getListCustomerOrderByCustomerId(customer.getCtid());
	        		
	                double totalOrderAmount = 0.0;
	       
                if (customerOrderList != null && !customerOrderList.isEmpty() && customerOrderList.add(customerOrder). {
                    for (CustomerOrder customerOrder : customerOrderList) {
                        Double orderAmount = customerOrder.getAmount();
                        
                        if(orderAmount>200) {
                        	
                        }
                        if (orderAmount != null) {
                            totalOrderAmount += orderAmount;
                            if(totalOrderAmount>200) {
                            	totalOrderAmount+customerOrder
                            }
                        }
                    }
                    System.out.println("Total Order Amount: " + totalOrderAmount);
                    List<CustomerOrderReplica> customerOrderReplicas = new ArrayList<>();
                    return customerOrderReplicas;
                } else {
                    return Collections.emptyList(); // or return null or an appropriate value
                }
            } else {
              
                return null; // or an appropriate value
            }
        } else {
            // Handle the case when the latest schedule is not active
            return null; // or an appropriate value
        }
    } else {
        // Handle the case when there is no latest schedule or its creation timestamp is null
        return null; // or an appropriate value
    }
	}
}



----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3003)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-09-21 15:04:17.911
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3003)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-09-21 15:04:17.913
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3003)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2023-09-21 15:04:24.558
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.xyram.daydrop.serviceimpl;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.transaction.Transactional;

import org.apache.commons.collections4.map.HashedMap;
import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.server.ResponseStatusException;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.xyram.daydrop.admin.model.CurrentUser;
import com.xyram.daydrop.basemodel.Base64Wrapper;
import com.xyram.daydrop.basemodel.MerchantTransactionIdGenerator;
import com.xyram.daydrop.basemodel.PhonepeSerializer;
import com.xyram.daydrop.dao.ApartmentDao;
import com.xyram.daydrop.dao.CustomerDetailsDao;
import com.xyram.daydrop.dao.CustomerOrderDao;
import com.xyram.daydrop.dao.CustomerOrderReplicaDoa;
import com.xyram.daydrop.dao.SheduleDao;
import com.xyram.daydrop.enumtypes.UserStatus;
import com.xyram.daydrop.model.Apartments;
import com.xyram.daydrop.model.CustomerOrder;
import com.xyram.daydrop.model.CustomerOrderReplica;
import com.xyram.daydrop.model.Customers;
import com.xyram.daydrop.model.Schedule;
import com.xyram.daydrop.modelMapper.PaymentInstrument;
import com.xyram.daydrop.modelMapper.PhonePePayModel;
import com.xyram.daydrop.request.CustomerOrderReplicaRequest;
import com.xyram.daydrop.response.RazorPayRequest;
import com.xyram.daydrop.service.CustomerOrderPriceService;
import com.xyram.daydrop.service.CustomerOrderReplicaService;
import com.xyram.daydrop.util.HashEncoder;
import com.xyram.daydrop.util.RazorPay;
import com.xyram.daydrop.service.ConsumerService;

@Transactional
@Service
public class CustomerOrderReplicaServiceImpl implements CustomerOrderReplicaService {

	@Autowired
	CustomerOrderReplicaDoa customerOrderReplicaDoa;

	@Autowired
	ApartmentDao apartmentDao;

	@Autowired
	SheduleDao scheduleDao;

	@Autowired
	CustomerDetailsDao customerDetailsDao;

	@Autowired
	ConsumerService consumerService;

	@Autowired
	CurrentUser currentUser;

	@Autowired
	PhonepeServiceImpl phonepeServiceImpl;

	@Value("${merchant_id}")
	private String merchantId;

	@Value("${salt_key}")
	private String saltKey;

	@Value("${salt_index}")
	private String saltIndex;

	@Override
	public Map createCustomerOrderReplicaService(CustomerOrderReplicaRequest customerOrderReplicaRequest,
			String contactNumber, Integer aparmentId)

	{

		Map response = new HashedMap<>();

		response.put("message", "success");
		CustomerOrderReplica customerOrderReplica = null;

		if (customerOrderReplicaRequest.getCartId() == null) {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "cartId is mandatory ");
		}
		long razorPayCount = 0;
		if (customerOrderReplicaRequest.getOrderId() != null) {

			razorPayCount = customerOrderReplicaDoa.getRazorPayExistByCartId(customerOrderReplicaRequest.getOrderId());
		}

		if (customerOrderReplicaRequest.getCustomerDetails() == null) {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Order Details  is mandatory ");
		}

		customerOrderReplica = customerOrderReplicaDoa.getCustomerOrderByCartId(customerOrderReplicaRequest.getCartId(),
				contactNumber);

		if (customerOrderReplica != null) {
			customerOrderReplica.setCartId(customerOrderReplica.getCartId());

			if (customerOrderReplica.isOrdered()) {
				throw new ResponseStatusException(HttpStatus.CONFLICT, "Your Order is Placed With cart Details");
			}

//			if (razorPayCount >= 1 && !(customerOrderReplica.getRazorPayOrderId() != null
//					&& customerOrderReplica.getRazorPayOrderId().equals(customerOrderReplicaRequest.getOrderId()))) {
//				throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Razor Pay Id Are already Exist ");
//			}

			customerOrderReplica.setStatusType(customerOrderReplicaRequest.getStatusType());
			customerOrderReplica.setContactNumber(contactNumber);
			customerOrderReplica.setApartmentId(aparmentId);

			customerOrderReplica.setAttempts(customerOrderReplica.getAttempts() + 1);
			customerOrderReplica.setUpdatedTime(new Date());

			customerOrderReplica.setRazorPayOrderId(customerOrderReplicaRequest.getOrderId());

			try {

				JSONObject obj = new JSONObject(customerOrderReplicaRequest.getCustomerDetails());

				customerOrderReplica.setCustomerOrderDetails(obj != null ? obj.toString() : null);

				customerOrderReplicaDoa.updateCustomer(customerOrderReplica);
				return response;

			} catch (Exception e) {
				customerOrderReplica.setCustomerOrderDetails(customerOrderReplicaRequest.getCustomerDetails() != null
						? customerOrderReplicaRequest.getCustomerDetails().toString()
						: null);
				customerOrderReplicaDoa.updateCustomer(customerOrderReplica);
				return response;
			}

		} else {

			customerOrderReplica = new CustomerOrderReplica();
			customerOrderReplica.setContactNumber(contactNumber);
			customerOrderReplica.setApartmentId(aparmentId);
			customerOrderReplica.setCartId(customerOrderReplicaRequest.getCartId());
			customerOrderReplica.setStatusType(customerOrderReplicaRequest.getStatusType());

			if (razorPayCount > 0) {
				throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Razor Pay Id Are already Exist ");
			}

			customerOrderReplica.setRazorPayOrderId(customerOrderReplicaRequest.getOrderId());

			Schedule schedule = scheduleDao.getlatestScheduleCustomers();

			if (schedule != null) {

				try {
					customerOrderReplica.setSchedule(schedule.getsId() != null ? schedule.getsId().toString() : null);
				} catch (Exception e) {
					e.printStackTrace();
				}
			} else {
				throw new ResponseStatusException(HttpStatus.BAD_REQUEST,
						"Sorry We Are Not Accepting Any Order Right now");

			}

			try {

				JSONObject obj = new JSONObject(customerOrderReplicaRequest.getCustomerDetails());

				customerOrderReplica.setCustomerOrderDetails(obj != null ? obj.toString() : null);

				customerOrderReplicaDoa.updateCustomer(customerOrderReplica);
				return response;

			} catch (Exception e) {
				customerOrderReplica.setCustomerOrderDetails(customerOrderReplicaRequest.getCustomerDetails() != null
						? customerOrderReplicaRequest.getCustomerDetails().toString()
						: null);
				customerOrderReplicaDoa.updateCustomer(customerOrderReplica);
				return response;
			}

		}

	}

	@Override
	public List<CustomerOrderReplica> getAllCustomerOrderReplicas(Map<String, Object> request) {

		String statusType = null;
		String searchQuery = null;

		String schedule = null;

		Map filter = request.containsKey("filters") ? (Map) request.get("filters") : null;
		if (filter != null) {
			statusType = filter.containsKey("statusType") ? ((String) filter.get("statusType")).toLowerCase() : null;
			searchQuery = filter.containsKey("searchQuery") ? ((String) filter.get("searchQuery")).toLowerCase() : null;
			schedule = filter.containsKey("schedule") ? (String.valueOf(filter.get("schedule"))) : null;

		}

		List<CustomerOrderReplica> CustomerOrderReplica = customerOrderReplicaDoa
				.getAllcustomerOrderReplica(searchQuery, statusType, schedule);

		ObjectMapper objectMapper = new ObjectMapper();
		CustomerOrderReplica.forEach(customerOrderReplica -> {
			try {

				// convert JSON string to Map
				Map<String, Object> customerOrderReplicaMap = objectMapper
						.readValue(customerOrderReplica.getCustomerOrderDetails(), Map.class);

				Object customerOrder = customerOrderReplicaMap.get("customerOrder");
				Map<String, Object> items = (Map<String, Object>) customerOrderReplicaMap.get("items");

				Object quanityList = items.get("quantity");

				Map customers = customerDetailsDao.getByContactNumberAndApartment(
						customerOrderReplica.getContactNumber(), customerOrderReplica.getApartmentId());

				// Apartments apartments =
				// apartmentDao.getApartmentById(customerOrderReplica.getApartmentId());
				customerOrderReplica.setApartmentName(
						customers.get("apartmentName") != null ? (String) customers.get("apartmentName") : null);

				customerOrderReplica.setStreetName(
						customers.get("streetName") != null ? (String) customers.get("streetName") : null);

				customerOrderReplica.setCustomerDetails(customers);

				customerOrderReplica.setCustomerOrder(customerOrder);
				customerOrderReplica.setQuatityList(quanityList);

			} catch (Exception e) {
				e.printStackTrace();
			}

		});

		return CustomerOrderReplica;

	}

	@Override
	public List<CustomerOrderReplica> getAllCustomerOrderReplicasBySchedule(Map<String, Object> request) {

		String statusType = null;
		String searchQuery = null;

		String scheduleId = null;

		Schedule schedule = scheduleDao.getlatestScheduleCustomers();

		if (schedule != null) {

			try {
				scheduleId = schedule.getsId() != null ? schedule.getsId().toString() : null;
			} catch (Exception e) {
				e.printStackTrace();
			}
		}

		statusType = request.containsKey("statusType") ? ((String) request.get("statusType")).toLowerCase() : "Success";

		List<CustomerOrderReplica> CustomerOrderReplica = customerOrderReplicaDoa
				.getAllcustomerOrderReplicaBySchdeule(statusType, scheduleId);

		ObjectMapper objectMapper = new ObjectMapper();
		CustomerOrderReplica.forEach(customerOrderReplica -> {
			try {

				// convert JSON string to Map
				Map<String, Object> customerOrderReplicaMap = objectMapper
						.readValue(customerOrderReplica.getCustomerOrderDetails(), Map.class);

				Object customerOrder = customerOrderReplicaMap.get("customerOrder");
				Map<String, Object> items = (Map<String, Object>) customerOrderReplicaMap.get("items");

				Object quanityList = items.get("quantity");
				Map customers = customerDetailsDao.getByContactNumberAndApartment(
						customerOrderReplica.getContactNumber(), customerOrderReplica.getApartmentId());

				System.out.println("customers" + customers.get("customerName"));

				// Apartments apartments =
				// apartmentDao.getApartmentById(customerOrderReplica.getApartmentId());
				customerOrderReplica.setApartmentName(
						customers.get("apartmentName") != null ? (String) customers.get("apartmentName") : null);

				customerOrderReplica.setCustomerDetails(customers);

				customerOrderReplica.setCustomerOrder(customerOrder);
				customerOrderReplica.setQuatityList(quanityList);

			} catch (Exception e) {
				e.printStackTrace();
			}

		});

		return CustomerOrderReplica;

	}

	@Override
	public CustomerOrderReplica getCustomerOrderReplicaByCartId(String cartId) {

		CustomerOrderReplica CustomerOrderReplica = customerOrderReplicaDoa.getCustomerOrderByCartId(cartId,
				currentUser.getContactNumber());

		ObjectMapper objectMapper = new ObjectMapper();
		try {

			// convert JSON string to Map
			Map<String, Object> customerOrderReplicaMap = objectMapper
					.readValue(CustomerOrderReplica.getCustomerOrderDetails(), Map.class);

			Object customerOrder = customerOrderReplicaMap.get("customerOrder");
			Map<String, Object> items = (Map<String, Object>) customerOrderReplicaMap.get("items");

			Object quanityList = items.get("quantity");
			Map customers = customerDetailsDao.getByContactNumberAndApartment(CustomerOrderReplica.getContactNumber(),
					CustomerOrderReplica.getApartmentId());

			System.out.println("customers" + customers.get("customerName"));

			// Apartments apartments =
			// apartmentDao.getApartmentById(customerOrderReplica.getApartmentId());
			CustomerOrderReplica.setApartmentName(
					customers.get("apartmentName") != null ? (String) customers.get("apartmentName") : null);

			CustomerOrderReplica.setCustomerDetails(customers);

			CustomerOrderReplica.setCustomerOrder(customerOrder);
			CustomerOrderReplica.setQuatityList(quanityList);

		} catch (Exception e) {
			e.printStackTrace();
		}

		return CustomerOrderReplica;

	}

	@Override
	public Map createCustomerOrderReplica(CustomerOrderReplicaRequest customerOrderReplicaRequest, String contactNumber,
			Integer aparmentId) {

		if (customerOrderReplicaRequest.getRazorPayRequest() != null) {

//			Map razorPay = consumerService.createRazorPayOrder(customerOrderReplicaRequest.getRazorPayRequest());
//			customerOrderReplicaRequest.setOrderId(razorPay.get("order") != null ? (String)((RazorPay) razorPay.get("order")).getId() : null);	
//	
//			createCustomerOrderReplicaService(customerOrderReplicaRequest, contactNumber, aparmentId);
//
//			razorPay.put("cartId", customerOrderReplicaRequest.getCartId());

			Map customerOrderReplicaMap = new HashMap<>();

			Map orderId = new HashMap<>();
			String transactionId = getMerchantTransactionId();
			orderId.put("id", transactionId);

			customerOrderReplicaMap.put("order", orderId);

			customerOrderReplicaRequest.setOrderId(transactionId);
			createCustomerOrderReplicaService(customerOrderReplicaRequest, contactNumber, aparmentId);

			customerOrderReplicaMap.put("cartId", customerOrderReplicaRequest.getCartId());

			try {
				customerOrderReplicaMap.put("phonePeResponse",
						phonepeServiceImpl.initiatePhonepePayment(transactionId,
								Integer.valueOf(customerOrderReplicaRequest.getRazorPayRequest().getAmount()),
								contactNumber, customerOrderReplicaRequest.getRedirectUrl(), customerOrderReplicaRequest.getCallBackUrl()));

			} catch (Exception e) {
				e.printStackTrace();
				customerOrderReplicaMap.put("phonePeResponse", new HashedMap<>());
			}

			return customerOrderReplicaMap;

		} else {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST,
					"paymentDetails transcation Details are mandatory");
		}

	}

	private static String getMerchantTransactionId() {

		return "OD_" + MerchantTransactionIdGenerator.getRandomString();
	}


	@Override
	public List<CustomerOrderReplica> getCustomerOrderByMoblieNo(String contactNumber,Integer aid) {
		
		Schedule latestschedule = customerOrderReplicaDoa.getlatestschedule();
		
		if (latestschedule != null && latestschedule.getCreationTimestamp()!=null) {
			
	        if (latestschedule.getStatus().equals(UserStatus.ACTIVE)) {
	        	
	        	Customers customer = customerDetailsDao.getByContactNoAndApartment(contactNumber, aid);
	        	if (customer != null) { // Ensure the customer exists
	        		List<CustomerOrder> customerOrderList = customerOrderReplicaDoa.getListCustomerOrderByCustomerId(customer.getCtid());
	        		
	                double totalOrderAmount = 0.0;
	       
                if (customerOrderList != null && !customerOrderList.isEmpty() && customerOrderList.add(customerOrder). {
                    for (CustomerOrder customerOrder : customerOrderList) {
                        Double orderAmount = customerOrder.getAmount();
                        
                        if(orderAmount>200) {
                        	
                        }
                        if (orderAmount != null) {
                            totalOrderAmount += orderAmount;
                            if(totalOrderAmount>200) {
                            	totalOrderAmount+customerOrder
                            }
                        }
                    }
                    System.out.println("Total Order Amount: " + totalOrderAmount);
                    List<CustomerOrderReplica> customerOrderReplicas = new ArrayList<>();
                    return customerOrderReplicas;
                } else {
                    return Collections.emptyList(); // or return null or an appropriate value
                }
            } else {
              
                return null; // or an appropriate value
            }
        } else {
            // Handle the case when the latest schedule is not active
            return null; // or an appropriate value
        }
    } else {
        // Handle the case when there is no latest schedule or its creation timestamp is null
        return null; // or an appropriate value
    }
	}
}



----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3003)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1003)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:799)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:743)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.lambda$0(LSJavaHoverProvider.java:68)
	at java.base/java.util.concurrent.CompletableFuture$AsyncRun.run(CompletableFuture.java:1804)
	at java.base/java.util.concurrent.CompletableFuture$AsyncRun.exec(CompletableFuture.java:1796)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:373)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1182)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1655)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1622)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:165)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-09-21 15:04:24.560
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3003)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1003)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:799)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:743)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.lambda$0(LSJavaHoverProvider.java:68)
	at java.base/java.util.concurrent.CompletableFuture$AsyncRun.run(CompletableFuture.java:1804)
	at java.base/java.util.concurrent.CompletableFuture$AsyncRun.exec(CompletableFuture.java:1796)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:373)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1182)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1655)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1622)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:165)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-09-21 15:04:24.563
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3003)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1003)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:799)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:743)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.lambda$0(LSJavaHoverProvider.java:68)
	at java.base/java.util.concurrent.CompletableFuture$AsyncRun.run(CompletableFuture.java:1804)
	at java.base/java.util.concurrent.CompletableFuture$AsyncRun.exec(CompletableFuture.java:1796)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:373)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1182)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1655)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1622)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:165)

!ENTRY org.eclipse.jdt.core 4 4 2023-09-21 15:04:24.632
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.xyram.daydrop.serviceimpl;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.transaction.Transactional;

import org.apache.commons.collections4.map.HashedMap;
import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.server.ResponseStatusException;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.xyram.daydrop.admin.model.CurrentUser;
import com.xyram.daydrop.basemodel.Base64Wrapper;
import com.xyram.daydrop.basemodel.MerchantTransactionIdGenerator;
import com.xyram.daydrop.basemodel.PhonepeSerializer;
import com.xyram.daydrop.dao.ApartmentDao;
import com.xyram.daydrop.dao.CustomerDetailsDao;
import com.xyram.daydrop.dao.CustomerOrderDao;
import com.xyram.daydrop.dao.CustomerOrderReplicaDoa;
import com.xyram.daydrop.dao.SheduleDao;
import com.xyram.daydrop.enumtypes.UserStatus;
import com.xyram.daydrop.model.Apartments;
import com.xyram.daydrop.model.CustomerOrder;
import com.xyram.daydrop.model.CustomerOrderReplica;
import com.xyram.daydrop.model.Customers;
import com.xyram.daydrop.model.Schedule;
import com.xyram.daydrop.modelMapper.PaymentInstrument;
import com.xyram.daydrop.modelMapper.PhonePePayModel;
import com.xyram.daydrop.request.CustomerOrderReplicaRequest;
import com.xyram.daydrop.response.RazorPayRequest;
import com.xyram.daydrop.service.CustomerOrderPriceService;
import com.xyram.daydrop.service.CustomerOrderReplicaService;
import com.xyram.daydrop.util.HashEncoder;
import com.xyram.daydrop.util.RazorPay;
import com.xyram.daydrop.service.ConsumerService;

@Transactional
@Service
public class CustomerOrderReplicaServiceImpl implements CustomerOrderReplicaService {

	@Autowired
	CustomerOrderReplicaDoa customerOrderReplicaDoa;

	@Autowired
	ApartmentDao apartmentDao;

	@Autowired
	SheduleDao scheduleDao;

	@Autowired
	CustomerDetailsDao customerDetailsDao;

	@Autowired
	ConsumerService consumerService;

	@Autowired
	CurrentUser currentUser;

	@Autowired
	PhonepeServiceImpl phonepeServiceImpl;

	@Value("${merchant_id}")
	private String merchantId;

	@Value("${salt_key}")
	private String saltKey;

	@Value("${salt_index}")
	private String saltIndex;

	@Override
	public Map createCustomerOrderReplicaService(CustomerOrderReplicaRequest customerOrderReplicaRequest,
			String contactNumber, Integer aparmentId)

	{

		Map response = new HashedMap<>();

		response.put("message", "success");
		CustomerOrderReplica customerOrderReplica = null;

		if (customerOrderReplicaRequest.getCartId() == null) {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "cartId is mandatory ");
		}
		long razorPayCount = 0;
		if (customerOrderReplicaRequest.getOrderId() != null) {

			razorPayCount = customerOrderReplicaDoa.getRazorPayExistByCartId(customerOrderReplicaRequest.getOrderId());
		}

		if (customerOrderReplicaRequest.getCustomerDetails() == null) {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Order Details  is mandatory ");
		}

		customerOrderReplica = customerOrderReplicaDoa.getCustomerOrderByCartId(customerOrderReplicaRequest.getCartId(),
				contactNumber);

		if (customerOrderReplica != null) {
			customerOrderReplica.setCartId(customerOrderReplica.getCartId());

			if (customerOrderReplica.isOrdered()) {
				throw new ResponseStatusException(HttpStatus.CONFLICT, "Your Order is Placed With cart Details");
			}

//			if (razorPayCount >= 1 && !(customerOrderReplica.getRazorPayOrderId() != null
//					&& customerOrderReplica.getRazorPayOrderId().equals(customerOrderReplicaRequest.getOrderId()))) {
//				throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Razor Pay Id Are already Exist ");
//			}

			customerOrderReplica.setStatusType(customerOrderReplicaRequest.getStatusType());
			customerOrderReplica.setContactNumber(contactNumber);
			customerOrderReplica.setApartmentId(aparmentId);

			customerOrderReplica.setAttempts(customerOrderReplica.getAttempts() + 1);
			customerOrderReplica.setUpdatedTime(new Date());

			customerOrderReplica.setRazorPayOrderId(customerOrderReplicaRequest.getOrderId());

			try {

				JSONObject obj = new JSONObject(customerOrderReplicaRequest.getCustomerDetails());

				customerOrderReplica.setCustomerOrderDetails(obj != null ? obj.toString() : null);

				customerOrderReplicaDoa.updateCustomer(customerOrderReplica);
				return response;

			} catch (Exception e) {
				customerOrderReplica.setCustomerOrderDetails(customerOrderReplicaRequest.getCustomerDetails() != null
						? customerOrderReplicaRequest.getCustomerDetails().toString()
						: null);
				customerOrderReplicaDoa.updateCustomer(customerOrderReplica);
				return response;
			}

		} else {

			customerOrderReplica = new CustomerOrderReplica();
			customerOrderReplica.setContactNumber(contactNumber);
			customerOrderReplica.setApartmentId(aparmentId);
			customerOrderReplica.setCartId(customerOrderReplicaRequest.getCartId());
			customerOrderReplica.setStatusType(customerOrderReplicaRequest.getStatusType());

			if (razorPayCount > 0) {
				throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Razor Pay Id Are already Exist ");
			}

			customerOrderReplica.setRazorPayOrderId(customerOrderReplicaRequest.getOrderId());

			Schedule schedule = scheduleDao.getlatestScheduleCustomers();

			if (schedule != null) {

				try {
					customerOrderReplica.setSchedule(schedule.getsId() != null ? schedule.getsId().toString() : null);
				} catch (Exception e) {
					e.printStackTrace();
				}
			} else {
				throw new ResponseStatusException(HttpStatus.BAD_REQUEST,
						"Sorry We Are Not Accepting Any Order Right now");

			}

			try {

				JSONObject obj = new JSONObject(customerOrderReplicaRequest.getCustomerDetails());

				customerOrderReplica.setCustomerOrderDetails(obj != null ? obj.toString() : null);

				customerOrderReplicaDoa.updateCustomer(customerOrderReplica);
				return response;

			} catch (Exception e) {
				customerOrderReplica.setCustomerOrderDetails(customerOrderReplicaRequest.getCustomerDetails() != null
						? customerOrderReplicaRequest.getCustomerDetails().toString()
						: null);
				customerOrderReplicaDoa.updateCustomer(customerOrderReplica);
				return response;
			}

		}

	}

	@Override
	public List<CustomerOrderReplica> getAllCustomerOrderReplicas(Map<String, Object> request) {

		String statusType = null;
		String searchQuery = null;

		String schedule = null;

		Map filter = request.containsKey("filters") ? (Map) request.get("filters") : null;
		if (filter != null) {
			statusType = filter.containsKey("statusType") ? ((String) filter.get("statusType")).toLowerCase() : null;
			searchQuery = filter.containsKey("searchQuery") ? ((String) filter.get("searchQuery")).toLowerCase() : null;
			schedule = filter.containsKey("schedule") ? (String.valueOf(filter.get("schedule"))) : null;

		}

		List<CustomerOrderReplica> CustomerOrderReplica = customerOrderReplicaDoa
				.getAllcustomerOrderReplica(searchQuery, statusType, schedule);

		ObjectMapper objectMapper = new ObjectMapper();
		CustomerOrderReplica.forEach(customerOrderReplica -> {
			try {

				// convert JSON string to Map
				Map<String, Object> customerOrderReplicaMap = objectMapper
						.readValue(customerOrderReplica.getCustomerOrderDetails(), Map.class);

				Object customerOrder = customerOrderReplicaMap.get("customerOrder");
				Map<String, Object> items = (Map<String, Object>) customerOrderReplicaMap.get("items");

				Object quanityList = items.get("quantity");

				Map customers = customerDetailsDao.getByContactNumberAndApartment(
						customerOrderReplica.getContactNumber(), customerOrderReplica.getApartmentId());

				// Apartments apartments =
				// apartmentDao.getApartmentById(customerOrderReplica.getApartmentId());
				customerOrderReplica.setApartmentName(
						customers.get("apartmentName") != null ? (String) customers.get("apartmentName") : null);

				customerOrderReplica.setStreetName(
						customers.get("streetName") != null ? (String) customers.get("streetName") : null);

				customerOrderReplica.setCustomerDetails(customers);

				customerOrderReplica.setCustomerOrder(customerOrder);
				customerOrderReplica.setQuatityList(quanityList);

			} catch (Exception e) {
				e.printStackTrace();
			}

		});

		return CustomerOrderReplica;

	}

	@Override
	public List<CustomerOrderReplica> getAllCustomerOrderReplicasBySchedule(Map<String, Object> request) {

		String statusType = null;
		String searchQuery = null;

		String scheduleId = null;

		Schedule schedule = scheduleDao.getlatestScheduleCustomers();

		if (schedule != null) {

			try {
				scheduleId = schedule.getsId() != null ? schedule.getsId().toString() : null;
			} catch (Exception e) {
				e.printStackTrace();
			}
		}

		statusType = request.containsKey("statusType") ? ((String) request.get("statusType")).toLowerCase() : "Success";

		List<CustomerOrderReplica> CustomerOrderReplica = customerOrderReplicaDoa
				.getAllcustomerOrderReplicaBySchdeule(statusType, scheduleId);

		ObjectMapper objectMapper = new ObjectMapper();
		CustomerOrderReplica.forEach(customerOrderReplica -> {
			try {

				// convert JSON string to Map
				Map<String, Object> customerOrderReplicaMap = objectMapper
						.readValue(customerOrderReplica.getCustomerOrderDetails(), Map.class);

				Object customerOrder = customerOrderReplicaMap.get("customerOrder");
				Map<String, Object> items = (Map<String, Object>) customerOrderReplicaMap.get("items");

				Object quanityList = items.get("quantity");
				Map customers = customerDetailsDao.getByContactNumberAndApartment(
						customerOrderReplica.getContactNumber(), customerOrderReplica.getApartmentId());

				System.out.println("customers" + customers.get("customerName"));

				// Apartments apartments =
				// apartmentDao.getApartmentById(customerOrderReplica.getApartmentId());
				customerOrderReplica.setApartmentName(
						customers.get("apartmentName") != null ? (String) customers.get("apartmentName") : null);

				customerOrderReplica.setCustomerDetails(customers);

				customerOrderReplica.setCustomerOrder(customerOrder);
				customerOrderReplica.setQuatityList(quanityList);

			} catch (Exception e) {
				e.printStackTrace();
			}

		});

		return CustomerOrderReplica;

	}

	@Override
	public CustomerOrderReplica getCustomerOrderReplicaByCartId(String cartId) {

		CustomerOrderReplica CustomerOrderReplica = customerOrderReplicaDoa.getCustomerOrderByCartId(cartId,
				currentUser.getContactNumber());

		ObjectMapper objectMapper = new ObjectMapper();
		try {

			// convert JSON string to Map
			Map<String, Object> customerOrderReplicaMap = objectMapper
					.readValue(CustomerOrderReplica.getCustomerOrderDetails(), Map.class);

			Object customerOrder = customerOrderReplicaMap.get("customerOrder");
			Map<String, Object> items = (Map<String, Object>) customerOrderReplicaMap.get("items");

			Object quanityList = items.get("quantity");
			Map customers = customerDetailsDao.getByContactNumberAndApartment(CustomerOrderReplica.getContactNumber(),
					CustomerOrderReplica.getApartmentId());

			System.out.println("customers" + customers.get("customerName"));

			// Apartments apartments =
			// apartmentDao.getApartmentById(customerOrderReplica.getApartmentId());
			CustomerOrderReplica.setApartmentName(
					customers.get("apartmentName") != null ? (String) customers.get("apartmentName") : null);

			CustomerOrderReplica.setCustomerDetails(customers);

			CustomerOrderReplica.setCustomerOrder(customerOrder);
			CustomerOrderReplica.setQuatityList(quanityList);

		} catch (Exception e) {
			e.printStackTrace();
		}

		return CustomerOrderReplica;

	}

	@Override
	public Map createCustomerOrderReplica(CustomerOrderReplicaRequest customerOrderReplicaRequest, String contactNumber,
			Integer aparmentId) {

		if (customerOrderReplicaRequest.getRazorPayRequest() != null) {

//			Map razorPay = consumerService.createRazorPayOrder(customerOrderReplicaRequest.getRazorPayRequest());
//			customerOrderReplicaRequest.setOrderId(razorPay.get("order") != null ? (String)((RazorPay) razorPay.get("order")).getId() : null);	
//	
//			createCustomerOrderReplicaService(customerOrderReplicaRequest, contactNumber, aparmentId);
//
//			razorPay.put("cartId", customerOrderReplicaRequest.getCartId());

			Map customerOrderReplicaMap = new HashMap<>();

			Map orderId = new HashMap<>();
			String transactionId = getMerchantTransactionId();
			orderId.put("id", transactionId);

			customerOrderReplicaMap.put("order", orderId);

			customerOrderReplicaRequest.setOrderId(transactionId);
			createCustomerOrderReplicaService(customerOrderReplicaRequest, contactNumber, aparmentId);

			customerOrderReplicaMap.put("cartId", customerOrderReplicaRequest.getCartId());

			try {
				customerOrderReplicaMap.put("phonePeResponse",
						phonepeServiceImpl.initiatePhonepePayment(transactionId,
								Integer.valueOf(customerOrderReplicaRequest.getRazorPayRequest().getAmount()),
								contactNumber, customerOrderReplicaRequest.getRedirectUrl(), customerOrderReplicaRequest.getCallBackUrl()));

			} catch (Exception e) {
				e.printStackTrace();
				customerOrderReplicaMap.put("phonePeResponse", new HashedMap<>());
			}

			return customerOrderReplicaMap;

		} else {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST,
					"paymentDetails transcation Details are mandatory");
		}

	}

	private static String getMerchantTransactionId() {

		return "OD_" + MerchantTransactionIdGenerator.getRandomString();
	}


	@Override
	public List<CustomerOrderReplica> getCustomerOrderByMoblieNo(String contactNumber,Integer aid) {
		
		Schedule latestschedule = customerOrderReplicaDoa.getlatestschedule();
		
		if (latestschedule != null && latestschedule.getCreationTimestamp()!=null) {
			
	        if (latestschedule.getStatus().equals(UserStatus.ACTIVE)) {
	        	
	        	Customers customer = customerDetailsDao.getByContactNoAndApartment(contactNumber, aid);
	        	if (customer != null) { // Ensure the customer exists
	        		List<CustomerOrder> customerOrderList = customerOrderReplicaDoa.getListCustomerOrderByCustomerId(customer.getCtid());
	        		
	                double totalOrderAmount = 0.0;
	       
                if (customerOrderList != null && !customerOrderList.isEmpty() && customerOrderList.add(customerOrder). {
                    for (CustomerOrder customerOrder : customerOrderList) {
                        Double orderAmount = customerOrder.getAmount();
                        
                        if(orderAmount>200) {
                        	
                        }
                        if (orderAmount != null) {
                            totalOrderAmount += orderAmount;
                            if(totalOrderAmount>200) {
                            	totalOrderAmount+customerOrder
                            }
                        }
                    }
                    System.out.println("Total Order Amount: " + totalOrderAmount);
                    List<CustomerOrderReplica> customerOrderReplicas = new ArrayList<>();
                    return customerOrderReplicas;
                } else {
                    return Collections.emptyList(); // or return null or an appropriate value
                }
            } else {
              
                return null; // or an appropriate value
            }
        } else {
            // Handle the case when the latest schedule is not active
            return null; // or an appropriate value
        }
    } else {
        // Handle the case when there is no latest schedule or its creation timestamp is null
        return null; // or an appropriate value
    }
	}
}



----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3003)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-09-21 15:04:24.633
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3003)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-09-21 15:04:24.635
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3003)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2023-09-21 15:04:24.720
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.xyram.daydrop.serviceimpl;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.transaction.Transactional;

import org.apache.commons.collections4.map.HashedMap;
import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.server.ResponseStatusException;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.xyram.daydrop.admin.model.CurrentUser;
import com.xyram.daydrop.basemodel.Base64Wrapper;
import com.xyram.daydrop.basemodel.MerchantTransactionIdGenerator;
import com.xyram.daydrop.basemodel.PhonepeSerializer;
import com.xyram.daydrop.dao.ApartmentDao;
import com.xyram.daydrop.dao.CustomerDetailsDao;
import com.xyram.daydrop.dao.CustomerOrderDao;
import com.xyram.daydrop.dao.CustomerOrderReplicaDoa;
import com.xyram.daydrop.dao.SheduleDao;
import com.xyram.daydrop.enumtypes.UserStatus;
import com.xyram.daydrop.model.Apartments;
import com.xyram.daydrop.model.CustomerOrder;
import com.xyram.daydrop.model.CustomerOrderReplica;
import com.xyram.daydrop.model.Customers;
import com.xyram.daydrop.model.Schedule;
import com.xyram.daydrop.modelMapper.PaymentInstrument;
import com.xyram.daydrop.modelMapper.PhonePePayModel;
import com.xyram.daydrop.request.CustomerOrderReplicaRequest;
import com.xyram.daydrop.response.RazorPayRequest;
import com.xyram.daydrop.service.CustomerOrderPriceService;
import com.xyram.daydrop.service.CustomerOrderReplicaService;
import com.xyram.daydrop.util.HashEncoder;
import com.xyram.daydrop.util.RazorPay;
import com.xyram.daydrop.service.ConsumerService;

@Transactional
@Service
public class CustomerOrderReplicaServiceImpl implements CustomerOrderReplicaService {

	@Autowired
	CustomerOrderReplicaDoa customerOrderReplicaDoa;

	@Autowired
	ApartmentDao apartmentDao;

	@Autowired
	SheduleDao scheduleDao;

	@Autowired
	CustomerDetailsDao customerDetailsDao;

	@Autowired
	ConsumerService consumerService;

	@Autowired
	CurrentUser currentUser;

	@Autowired
	PhonepeServiceImpl phonepeServiceImpl;

	@Value("${merchant_id}")
	private String merchantId;

	@Value("${salt_key}")
	private String saltKey;

	@Value("${salt_index}")
	private String saltIndex;

	@Override
	public Map createCustomerOrderReplicaService(CustomerOrderReplicaRequest customerOrderReplicaRequest,
			String contactNumber, Integer aparmentId)

	{

		Map response = new HashedMap<>();

		response.put("message", "success");
		CustomerOrderReplica customerOrderReplica = null;

		if (customerOrderReplicaRequest.getCartId() == null) {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "cartId is mandatory ");
		}
		long razorPayCount = 0;
		if (customerOrderReplicaRequest.getOrderId() != null) {

			razorPayCount = customerOrderReplicaDoa.getRazorPayExistByCartId(customerOrderReplicaRequest.getOrderId());
		}

		if (customerOrderReplicaRequest.getCustomerDetails() == null) {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Order Details  is mandatory ");
		}

		customerOrderReplica = customerOrderReplicaDoa.getCustomerOrderByCartId(customerOrderReplicaRequest.getCartId(),
				contactNumber);

		if (customerOrderReplica != null) {
			customerOrderReplica.setCartId(customerOrderReplica.getCartId());

			if (customerOrderReplica.isOrdered()) {
				throw new ResponseStatusException(HttpStatus.CONFLICT, "Your Order is Placed With cart Details");
			}

//			if (razorPayCount >= 1 && !(customerOrderReplica.getRazorPayOrderId() != null
//					&& customerOrderReplica.getRazorPayOrderId().equals(customerOrderReplicaRequest.getOrderId()))) {
//				throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Razor Pay Id Are already Exist ");
//			}

			customerOrderReplica.setStatusType(customerOrderReplicaRequest.getStatusType());
			customerOrderReplica.setContactNumber(contactNumber);
			customerOrderReplica.setApartmentId(aparmentId);

			customerOrderReplica.setAttempts(customerOrderReplica.getAttempts() + 1);
			customerOrderReplica.setUpdatedTime(new Date());

			customerOrderReplica.setRazorPayOrderId(customerOrderReplicaRequest.getOrderId());

			try {

				JSONObject obj = new JSONObject(customerOrderReplicaRequest.getCustomerDetails());

				customerOrderReplica.setCustomerOrderDetails(obj != null ? obj.toString() : null);

				customerOrderReplicaDoa.updateCustomer(customerOrderReplica);
				return response;

			} catch (Exception e) {
				customerOrderReplica.setCustomerOrderDetails(customerOrderReplicaRequest.getCustomerDetails() != null
						? customerOrderReplicaRequest.getCustomerDetails().toString()
						: null);
				customerOrderReplicaDoa.updateCustomer(customerOrderReplica);
				return response;
			}

		} else {

			customerOrderReplica = new CustomerOrderReplica();
			customerOrderReplica.setContactNumber(contactNumber);
			customerOrderReplica.setApartmentId(aparmentId);
			customerOrderReplica.setCartId(customerOrderReplicaRequest.getCartId());
			customerOrderReplica.setStatusType(customerOrderReplicaRequest.getStatusType());

			if (razorPayCount > 0) {
				throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Razor Pay Id Are already Exist ");
			}

			customerOrderReplica.setRazorPayOrderId(customerOrderReplicaRequest.getOrderId());

			Schedule schedule = scheduleDao.getlatestScheduleCustomers();

			if (schedule != null) {

				try {
					customerOrderReplica.setSchedule(schedule.getsId() != null ? schedule.getsId().toString() : null);
				} catch (Exception e) {
					e.printStackTrace();
				}
			} else {
				throw new ResponseStatusException(HttpStatus.BAD_REQUEST,
						"Sorry We Are Not Accepting Any Order Right now");

			}

			try {

				JSONObject obj = new JSONObject(customerOrderReplicaRequest.getCustomerDetails());

				customerOrderReplica.setCustomerOrderDetails(obj != null ? obj.toString() : null);

				customerOrderReplicaDoa.updateCustomer(customerOrderReplica);
				return response;

			} catch (Exception e) {
				customerOrderReplica.setCustomerOrderDetails(customerOrderReplicaRequest.getCustomerDetails() != null
						? customerOrderReplicaRequest.getCustomerDetails().toString()
						: null);
				customerOrderReplicaDoa.updateCustomer(customerOrderReplica);
				return response;
			}

		}

	}

	@Override
	public List<CustomerOrderReplica> getAllCustomerOrderReplicas(Map<String, Object> request) {

		String statusType = null;
		String searchQuery = null;

		String schedule = null;

		Map filter = request.containsKey("filters") ? (Map) request.get("filters") : null;
		if (filter != null) {
			statusType = filter.containsKey("statusType") ? ((String) filter.get("statusType")).toLowerCase() : null;
			searchQuery = filter.containsKey("searchQuery") ? ((String) filter.get("searchQuery")).toLowerCase() : null;
			schedule = filter.containsKey("schedule") ? (String.valueOf(filter.get("schedule"))) : null;

		}

		List<CustomerOrderReplica> CustomerOrderReplica = customerOrderReplicaDoa
				.getAllcustomerOrderReplica(searchQuery, statusType, schedule);

		ObjectMapper objectMapper = new ObjectMapper();
		CustomerOrderReplica.forEach(customerOrderReplica -> {
			try {

				// convert JSON string to Map
				Map<String, Object> customerOrderReplicaMap = objectMapper
						.readValue(customerOrderReplica.getCustomerOrderDetails(), Map.class);

				Object customerOrder = customerOrderReplicaMap.get("customerOrder");
				Map<String, Object> items = (Map<String, Object>) customerOrderReplicaMap.get("items");

				Object quanityList = items.get("quantity");

				Map customers = customerDetailsDao.getByContactNumberAndApartment(
						customerOrderReplica.getContactNumber(), customerOrderReplica.getApartmentId());

				// Apartments apartments =
				// apartmentDao.getApartmentById(customerOrderReplica.getApartmentId());
				customerOrderReplica.setApartmentName(
						customers.get("apartmentName") != null ? (String) customers.get("apartmentName") : null);

				customerOrderReplica.setStreetName(
						customers.get("streetName") != null ? (String) customers.get("streetName") : null);

				customerOrderReplica.setCustomerDetails(customers);

				customerOrderReplica.setCustomerOrder(customerOrder);
				customerOrderReplica.setQuatityList(quanityList);

			} catch (Exception e) {
				e.printStackTrace();
			}

		});

		return CustomerOrderReplica;

	}

	@Override
	public List<CustomerOrderReplica> getAllCustomerOrderReplicasBySchedule(Map<String, Object> request) {

		String statusType = null;
		String searchQuery = null;

		String scheduleId = null;

		Schedule schedule = scheduleDao.getlatestScheduleCustomers();

		if (schedule != null) {

			try {
				scheduleId = schedule.getsId() != null ? schedule.getsId().toString() : null;
			} catch (Exception e) {
				e.printStackTrace();
			}
		}

		statusType = request.containsKey("statusType") ? ((String) request.get("statusType")).toLowerCase() : "Success";

		List<CustomerOrderReplica> CustomerOrderReplica = customerOrderReplicaDoa
				.getAllcustomerOrderReplicaBySchdeule(statusType, scheduleId);

		ObjectMapper objectMapper = new ObjectMapper();
		CustomerOrderReplica.forEach(customerOrderReplica -> {
			try {

				// convert JSON string to Map
				Map<String, Object> customerOrderReplicaMap = objectMapper
						.readValue(customerOrderReplica.getCustomerOrderDetails(), Map.class);

				Object customerOrder = customerOrderReplicaMap.get("customerOrder");
				Map<String, Object> items = (Map<String, Object>) customerOrderReplicaMap.get("items");

				Object quanityList = items.get("quantity");
				Map customers = customerDetailsDao.getByContactNumberAndApartment(
						customerOrderReplica.getContactNumber(), customerOrderReplica.getApartmentId());

				System.out.println("customers" + customers.get("customerName"));

				// Apartments apartments =
				// apartmentDao.getApartmentById(customerOrderReplica.getApartmentId());
				customerOrderReplica.setApartmentName(
						customers.get("apartmentName") != null ? (String) customers.get("apartmentName") : null);

				customerOrderReplica.setCustomerDetails(customers);

				customerOrderReplica.setCustomerOrder(customerOrder);
				customerOrderReplica.setQuatityList(quanityList);

			} catch (Exception e) {
				e.printStackTrace();
			}

		});

		return CustomerOrderReplica;

	}

	@Override
	public CustomerOrderReplica getCustomerOrderReplicaByCartId(String cartId) {

		CustomerOrderReplica CustomerOrderReplica = customerOrderReplicaDoa.getCustomerOrderByCartId(cartId,
				currentUser.getContactNumber());

		ObjectMapper objectMapper = new ObjectMapper();
		try {

			// convert JSON string to Map
			Map<String, Object> customerOrderReplicaMap = objectMapper
					.readValue(CustomerOrderReplica.getCustomerOrderDetails(), Map.class);

			Object customerOrder = customerOrderReplicaMap.get("customerOrder");
			Map<String, Object> items = (Map<String, Object>) customerOrderReplicaMap.get("items");

			Object quanityList = items.get("quantity");
			Map customers = customerDetailsDao.getByContactNumberAndApartment(CustomerOrderReplica.getContactNumber(),
					CustomerOrderReplica.getApartmentId());

			System.out.println("customers" + customers.get("customerName"));

			// Apartments apartments =
			// apartmentDao.getApartmentById(customerOrderReplica.getApartmentId());
			CustomerOrderReplica.setApartmentName(
					customers.get("apartmentName") != null ? (String) customers.get("apartmentName") : null);

			CustomerOrderReplica.setCustomerDetails(customers);

			CustomerOrderReplica.setCustomerOrder(customerOrder);
			CustomerOrderReplica.setQuatityList(quanityList);

		} catch (Exception e) {
			e.printStackTrace();
		}

		return CustomerOrderReplica;

	}

	@Override
	public Map createCustomerOrderReplica(CustomerOrderReplicaRequest customerOrderReplicaRequest, String contactNumber,
			Integer aparmentId) {

		if (customerOrderReplicaRequest.getRazorPayRequest() != null) {

//			Map razorPay = consumerService.createRazorPayOrder(customerOrderReplicaRequest.getRazorPayRequest());
//			customerOrderReplicaRequest.setOrderId(razorPay.get("order") != null ? (String)((RazorPay) razorPay.get("order")).getId() : null);	
//	
//			createCustomerOrderReplicaService(customerOrderReplicaRequest, contactNumber, aparmentId);
//
//			razorPay.put("cartId", customerOrderReplicaRequest.getCartId());

			Map customerOrderReplicaMap = new HashMap<>();

			Map orderId = new HashMap<>();
			String transactionId = getMerchantTransactionId();
			orderId.put("id", transactionId);

			customerOrderReplicaMap.put("order", orderId);

			customerOrderReplicaRequest.setOrderId(transactionId);
			createCustomerOrderReplicaService(customerOrderReplicaRequest, contactNumber, aparmentId);

			customerOrderReplicaMap.put("cartId", customerOrderReplicaRequest.getCartId());

			try {
				customerOrderReplicaMap.put("phonePeResponse",
						phonepeServiceImpl.initiatePhonepePayment(transactionId,
								Integer.valueOf(customerOrderReplicaRequest.getRazorPayRequest().getAmount()),
								contactNumber, customerOrderReplicaRequest.getRedirectUrl(), customerOrderReplicaRequest.getCallBackUrl()));

			} catch (Exception e) {
				e.printStackTrace();
				customerOrderReplicaMap.put("phonePeResponse", new HashedMap<>());
			}

			return customerOrderReplicaMap;

		} else {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST,
					"paymentDetails transcation Details are mandatory");
		}

	}

	private static String getMerchantTransactionId() {

		return "OD_" + MerchantTransactionIdGenerator.getRandomString();
	}


	@Override
	public List<CustomerOrderReplica> getCustomerOrderByMoblieNo(String contactNumber,Integer aid) {
		
		Schedule latestschedule = customerOrderReplicaDoa.getlatestschedule();
		
		if (latestschedule != null && latestschedule.getCreationTimestamp()!=null) {
			
	        if (latestschedule.getStatus().equals(UserStatus.ACTIVE)) {
	        	
	        	Customers customer = customerDetailsDao.getByContactNoAndApartment(contactNumber, aid);
	        	if (customer != null) { // Ensure the customer exists
	        		List<CustomerOrder> customerOrderList = customerOrderReplicaDoa.getListCustomerOrderByCustomerId(customer.getCtid());
	        		
	                double totalOrderAmount = 0.0;
	       
                if (customerOrderList != null && !customerOrderList.isEmpty() && customerOrderList.add(customerOrder). {
                    for (CustomerOrder customerOrder : customerOrderList) {
                        Double orderAmount = customerOrder.getAmount();
                        
                        if(orderAmount>200) {
                        	
                        }
                        if (orderAmount != null) {
                            totalOrderAmount += orderAmount;
                            if(totalOrderAmount>200) {
                            	totalOrderAmount+customerOrder
                            }
                        }
                    }
                    System.out.println("Total Order Amount: " + totalOrderAmount);
                    List<CustomerOrderReplica> customerOrderReplicas = new ArrayList<>();
                    return customerOrderReplicas;
                } else {
                    return Collections.emptyList(); // or return null or an appropriate value
                }
            } else {
              
                return null; // or an appropriate value
            }
        } else {
            // Handle the case when the latest schedule is not active
            return null; // or an appropriate value
        }
    } else {
        // Handle the case when there is no latest schedule or its creation timestamp is null
        return null; // or an appropriate value
    }
	}
}



----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3003)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1003)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:799)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:743)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-09-21 15:04:24.721
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3003)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1003)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:799)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:743)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-09-21 15:04:24.723
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3003)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1003)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:799)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:743)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2023-09-21 15:04:29.976
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.xyram.daydrop.serviceimpl;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.transaction.Transactional;

import org.apache.commons.collections4.map.HashedMap;
import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.server.ResponseStatusException;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.xyram.daydrop.admin.model.CurrentUser;
import com.xyram.daydrop.basemodel.Base64Wrapper;
import com.xyram.daydrop.basemodel.MerchantTransactionIdGenerator;
import com.xyram.daydrop.basemodel.PhonepeSerializer;
import com.xyram.daydrop.dao.ApartmentDao;
import com.xyram.daydrop.dao.CustomerDetailsDao;
import com.xyram.daydrop.dao.CustomerOrderDao;
import com.xyram.daydrop.dao.CustomerOrderReplicaDoa;
import com.xyram.daydrop.dao.SheduleDao;
import com.xyram.daydrop.enumtypes.UserStatus;
import com.xyram.daydrop.model.Apartments;
import com.xyram.daydrop.model.CustomerOrder;
import com.xyram.daydrop.model.CustomerOrderReplica;
import com.xyram.daydrop.model.Customers;
import com.xyram.daydrop.model.Schedule;
import com.xyram.daydrop.modelMapper.PaymentInstrument;
import com.xyram.daydrop.modelMapper.PhonePePayModel;
import com.xyram.daydrop.request.CustomerOrderReplicaRequest;
import com.xyram.daydrop.response.RazorPayRequest;
import com.xyram.daydrop.service.CustomerOrderPriceService;
import com.xyram.daydrop.service.CustomerOrderReplicaService;
import com.xyram.daydrop.util.HashEncoder;
import com.xyram.daydrop.util.RazorPay;
import com.xyram.daydrop.service.ConsumerService;

@Transactional
@Service
public class CustomerOrderReplicaServiceImpl implements CustomerOrderReplicaService {

	@Autowired
	CustomerOrderReplicaDoa customerOrderReplicaDoa;

	@Autowired
	ApartmentDao apartmentDao;

	@Autowired
	SheduleDao scheduleDao;

	@Autowired
	CustomerDetailsDao customerDetailsDao;

	@Autowired
	ConsumerService consumerService;

	@Autowired
	CurrentUser currentUser;

	@Autowired
	PhonepeServiceImpl phonepeServiceImpl;

	@Value("${merchant_id}")
	private String merchantId;

	@Value("${salt_key}")
	private String saltKey;

	@Value("${salt_index}")
	private String saltIndex;

	@Override
	public Map createCustomerOrderReplicaService(CustomerOrderReplicaRequest customerOrderReplicaRequest,
			String contactNumber, Integer aparmentId)

	{

		Map response = new HashedMap<>();

		response.put("message", "success");
		CustomerOrderReplica customerOrderReplica = null;

		if (customerOrderReplicaRequest.getCartId() == null) {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "cartId is mandatory ");
		}
		long razorPayCount = 0;
		if (customerOrderReplicaRequest.getOrderId() != null) {

			razorPayCount = customerOrderReplicaDoa.getRazorPayExistByCartId(customerOrderReplicaRequest.getOrderId());
		}

		if (customerOrderReplicaRequest.getCustomerDetails() == null) {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Order Details  is mandatory ");
		}

		customerOrderReplica = customerOrderReplicaDoa.getCustomerOrderByCartId(customerOrderReplicaRequest.getCartId(),
				contactNumber);

		if (customerOrderReplica != null) {
			customerOrderReplica.setCartId(customerOrderReplica.getCartId());

			if (customerOrderReplica.isOrdered()) {
				throw new ResponseStatusException(HttpStatus.CONFLICT, "Your Order is Placed With cart Details");
			}

//			if (razorPayCount >= 1 && !(customerOrderReplica.getRazorPayOrderId() != null
//					&& customerOrderReplica.getRazorPayOrderId().equals(customerOrderReplicaRequest.getOrderId()))) {
//				throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Razor Pay Id Are already Exist ");
//			}

			customerOrderReplica.setStatusType(customerOrderReplicaRequest.getStatusType());
			customerOrderReplica.setContactNumber(contactNumber);
			customerOrderReplica.setApartmentId(aparmentId);

			customerOrderReplica.setAttempts(customerOrderReplica.getAttempts() + 1);
			customerOrderReplica.setUpdatedTime(new Date());

			customerOrderReplica.setRazorPayOrderId(customerOrderReplicaRequest.getOrderId());

			try {

				JSONObject obj = new JSONObject(customerOrderReplicaRequest.getCustomerDetails());

				customerOrderReplica.setCustomerOrderDetails(obj != null ? obj.toString() : null);

				customerOrderReplicaDoa.updateCustomer(customerOrderReplica);
				return response;

			} catch (Exception e) {
				customerOrderReplica.setCustomerOrderDetails(customerOrderReplicaRequest.getCustomerDetails() != null
						? customerOrderReplicaRequest.getCustomerDetails().toString()
						: null);
				customerOrderReplicaDoa.updateCustomer(customerOrderReplica);
				return response;
			}

		} else {

			customerOrderReplica = new CustomerOrderReplica();
			customerOrderReplica.setContactNumber(contactNumber);
			customerOrderReplica.setApartmentId(aparmentId);
			customerOrderReplica.setCartId(customerOrderReplicaRequest.getCartId());
			customerOrderReplica.setStatusType(customerOrderReplicaRequest.getStatusType());

			if (razorPayCount > 0) {
				throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Razor Pay Id Are already Exist ");
			}

			customerOrderReplica.setRazorPayOrderId(customerOrderReplicaRequest.getOrderId());

			Schedule schedule = scheduleDao.getlatestScheduleCustomers();

			if (schedule != null) {

				try {
					customerOrderReplica.setSchedule(schedule.getsId() != null ? schedule.getsId().toString() : null);
				} catch (Exception e) {
					e.printStackTrace();
				}
			} else {
				throw new ResponseStatusException(HttpStatus.BAD_REQUEST,
						"Sorry We Are Not Accepting Any Order Right now");

			}

			try {

				JSONObject obj = new JSONObject(customerOrderReplicaRequest.getCustomerDetails());

				customerOrderReplica.setCustomerOrderDetails(obj != null ? obj.toString() : null);

				customerOrderReplicaDoa.updateCustomer(customerOrderReplica);
				return response;

			} catch (Exception e) {
				customerOrderReplica.setCustomerOrderDetails(customerOrderReplicaRequest.getCustomerDetails() != null
						? customerOrderReplicaRequest.getCustomerDetails().toString()
						: null);
				customerOrderReplicaDoa.updateCustomer(customerOrderReplica);
				return response;
			}

		}

	}

	@Override
	public List<CustomerOrderReplica> getAllCustomerOrderReplicas(Map<String, Object> request) {

		String statusType = null;
		String searchQuery = null;

		String schedule = null;

		Map filter = request.containsKey("filters") ? (Map) request.get("filters") : null;
		if (filter != null) {
			statusType = filter.containsKey("statusType") ? ((String) filter.get("statusType")).toLowerCase() : null;
			searchQuery = filter.containsKey("searchQuery") ? ((String) filter.get("searchQuery")).toLowerCase() : null;
			schedule = filter.containsKey("schedule") ? (String.valueOf(filter.get("schedule"))) : null;

		}

		List<CustomerOrderReplica> CustomerOrderReplica = customerOrderReplicaDoa
				.getAllcustomerOrderReplica(searchQuery, statusType, schedule);

		ObjectMapper objectMapper = new ObjectMapper();
		CustomerOrderReplica.forEach(customerOrderReplica -> {
			try {

				// convert JSON string to Map
				Map<String, Object> customerOrderReplicaMap = objectMapper
						.readValue(customerOrderReplica.getCustomerOrderDetails(), Map.class);

				Object customerOrder = customerOrderReplicaMap.get("customerOrder");
				Map<String, Object> items = (Map<String, Object>) customerOrderReplicaMap.get("items");

				Object quanityList = items.get("quantity");

				Map customers = customerDetailsDao.getByContactNumberAndApartment(
						customerOrderReplica.getContactNumber(), customerOrderReplica.getApartmentId());

				// Apartments apartments =
				// apartmentDao.getApartmentById(customerOrderReplica.getApartmentId());
				customerOrderReplica.setApartmentName(
						customers.get("apartmentName") != null ? (String) customers.get("apartmentName") : null);

				customerOrderReplica.setStreetName(
						customers.get("streetName") != null ? (String) customers.get("streetName") : null);

				customerOrderReplica.setCustomerDetails(customers);

				customerOrderReplica.setCustomerOrder(customerOrder);
				customerOrderReplica.setQuatityList(quanityList);

			} catch (Exception e) {
				e.printStackTrace();
			}

		});

		return CustomerOrderReplica;

	}

	@Override
	public List<CustomerOrderReplica> getAllCustomerOrderReplicasBySchedule(Map<String, Object> request) {

		String statusType = null;
		String searchQuery = null;

		String scheduleId = null;

		Schedule schedule = scheduleDao.getlatestScheduleCustomers();

		if (schedule != null) {

			try {
				scheduleId = schedule.getsId() != null ? schedule.getsId().toString() : null;
			} catch (Exception e) {
				e.printStackTrace();
			}
		}

		statusType = request.containsKey("statusType") ? ((String) request.get("statusType")).toLowerCase() : "Success";

		List<CustomerOrderReplica> CustomerOrderReplica = customerOrderReplicaDoa
				.getAllcustomerOrderReplicaBySchdeule(statusType, scheduleId);

		ObjectMapper objectMapper = new ObjectMapper();
		CustomerOrderReplica.forEach(customerOrderReplica -> {
			try {

				// convert JSON string to Map
				Map<String, Object> customerOrderReplicaMap = objectMapper
						.readValue(customerOrderReplica.getCustomerOrderDetails(), Map.class);

				Object customerOrder = customerOrderReplicaMap.get("customerOrder");
				Map<String, Object> items = (Map<String, Object>) customerOrderReplicaMap.get("items");

				Object quanityList = items.get("quantity");
				Map customers = customerDetailsDao.getByContactNumberAndApartment(
						customerOrderReplica.getContactNumber(), customerOrderReplica.getApartmentId());

				System.out.println("customers" + customers.get("customerName"));

				// Apartments apartments =
				// apartmentDao.getApartmentById(customerOrderReplica.getApartmentId());
				customerOrderReplica.setApartmentName(
						customers.get("apartmentName") != null ? (String) customers.get("apartmentName") : null);

				customerOrderReplica.setCustomerDetails(customers);

				customerOrderReplica.setCustomerOrder(customerOrder);
				customerOrderReplica.setQuatityList(quanityList);

			} catch (Exception e) {
				e.printStackTrace();
			}

		});

		return CustomerOrderReplica;

	}

	@Override
	public CustomerOrderReplica getCustomerOrderReplicaByCartId(String cartId) {

		CustomerOrderReplica CustomerOrderReplica = customerOrderReplicaDoa.getCustomerOrderByCartId(cartId,
				currentUser.getContactNumber());

		ObjectMapper objectMapper = new ObjectMapper();
		try {

			// convert JSON string to Map
			Map<String, Object> customerOrderReplicaMap = objectMapper
					.readValue(CustomerOrderReplica.getCustomerOrderDetails(), Map.class);

			Object customerOrder = customerOrderReplicaMap.get("customerOrder");
			Map<String, Object> items = (Map<String, Object>) customerOrderReplicaMap.get("items");

			Object quanityList = items.get("quantity");
			Map customers = customerDetailsDao.getByContactNumberAndApartment(CustomerOrderReplica.getContactNumber(),
					CustomerOrderReplica.getApartmentId());

			System.out.println("customers" + customers.get("customerName"));

			// Apartments apartments =
			// apartmentDao.getApartmentById(customerOrderReplica.getApartmentId());
			CustomerOrderReplica.setApartmentName(
					customers.get("apartmentName") != null ? (String) customers.get("apartmentName") : null);

			CustomerOrderReplica.setCustomerDetails(customers);

			CustomerOrderReplica.setCustomerOrder(customerOrder);
			CustomerOrderReplica.setQuatityList(quanityList);

		} catch (Exception e) {
			e.printStackTrace();
		}

		return CustomerOrderReplica;

	}

	@Override
	public Map createCustomerOrderReplica(CustomerOrderReplicaRequest customerOrderReplicaRequest, String contactNumber,
			Integer aparmentId) {

		if (customerOrderReplicaRequest.getRazorPayRequest() != null) {

//			Map razorPay = consumerService.createRazorPayOrder(customerOrderReplicaRequest.getRazorPayRequest());
//			customerOrderReplicaRequest.setOrderId(razorPay.get("order") != null ? (String)((RazorPay) razorPay.get("order")).getId() : null);	
//	
//			createCustomerOrderReplicaService(customerOrderReplicaRequest, contactNumber, aparmentId);
//
//			razorPay.put("cartId", customerOrderReplicaRequest.getCartId());

			Map customerOrderReplicaMap = new HashMap<>();

			Map orderId = new HashMap<>();
			String transactionId = getMerchantTransactionId();
			orderId.put("id", transactionId);

			customerOrderReplicaMap.put("order", orderId);

			customerOrderReplicaRequest.setOrderId(transactionId);
			createCustomerOrderReplicaService(customerOrderReplicaRequest, contactNumber, aparmentId);

			customerOrderReplicaMap.put("cartId", customerOrderReplicaRequest.getCartId());

			try {
				customerOrderReplicaMap.put("phonePeResponse",
						phonepeServiceImpl.initiatePhonepePayment(transactionId,
								Integer.valueOf(customerOrderReplicaRequest.getRazorPayRequest().getAmount()),
								contactNumber, customerOrderReplicaRequest.getRedirectUrl(), customerOrderReplicaRequest.getCallBackUrl()));

			} catch (Exception e) {
				e.printStackTrace();
				customerOrderReplicaMap.put("phonePeResponse", new HashedMap<>());
			}

			return customerOrderReplicaMap;

		} else {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST,
					"paymentDetails transcation Details are mandatory");
		}

	}

	private static String getMerchantTransactionId() {

		return "OD_" + MerchantTransactionIdGenerator.getRandomString();
	}


	@Override
	public List<CustomerOrderReplica> getCustomerOrderByMoblieNo(String contactNumber,Integer aid) {
		
		Schedule latestschedule = customerOrderReplicaDoa.getlatestschedule();
		
		if (latestschedule != null && latestschedule.getCreationTimestamp()!=null) {
			
	        if (latestschedule.getStatus().equals(UserStatus.ACTIVE)) {
	        	
	        	Customers customer = customerDetailsDao.getByContactNoAndApartment(contactNumber, aid);
	        	if (customer != null) { // Ensure the customer exists
	        		List<CustomerOrder> customerOrderList = customerOrderReplicaDoa.getListCustomerOrderByCustomerId(customer.getCtid());
	        		
	                double totalOrderAmount = 0.0;
	       
                if (customerOrderList != null && !customerOrderList.isEmpty() && customerOrderList.add(customerOrder). {
                    for (CustomerOrder customerOrder : customerOrderList) {
                        Double orderAmount = customerOrder.getAmount();
                        
                        if(orderAmount>200) {
                        	
                        }
                        if (orderAmount != null) {
                            totalOrderAmount += orderAmount;
                            if(totalOrderAmount>200) {
                            	totalOrderAmount+customerOrder
                            }
                        }
                    }
                    System.out.println("Total Order Amount: " + totalOrderAmount);
                    List<CustomerOrderReplica> customerOrderReplicas = new ArrayList<>();
                    return customerOrderReplicas;
                } else {
                    return Collections.emptyList(); // or return null or an appropriate value
                }
            } else {
              
                return null; // or an appropriate value
            }
        } else {
            // Handle the case when the latest schedule is not active
            return null; // or an appropriate value
        }
    } else {
        // Handle the case when there is no latest schedule or its creation timestamp is null
        return null; // or an appropriate value
    }
	}
}



----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3003)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-09-21 15:04:29.978
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3003)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-09-21 15:04:29.979
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3003)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2023-09-21 15:04:37.841
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.xyram.daydrop.serviceimpl;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.transaction.Transactional;

import org.apache.commons.collections4.map.HashedMap;
import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.server.ResponseStatusException;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.xyram.daydrop.admin.model.CurrentUser;
import com.xyram.daydrop.basemodel.Base64Wrapper;
import com.xyram.daydrop.basemodel.MerchantTransactionIdGenerator;
import com.xyram.daydrop.basemodel.PhonepeSerializer;
import com.xyram.daydrop.dao.ApartmentDao;
import com.xyram.daydrop.dao.CustomerDetailsDao;
import com.xyram.daydrop.dao.CustomerOrderDao;
import com.xyram.daydrop.dao.CustomerOrderReplicaDoa;
import com.xyram.daydrop.dao.SheduleDao;
import com.xyram.daydrop.enumtypes.UserStatus;
import com.xyram.daydrop.model.Apartments;
import com.xyram.daydrop.model.CustomerOrder;
import com.xyram.daydrop.model.CustomerOrderReplica;
import com.xyram.daydrop.model.Customers;
import com.xyram.daydrop.model.Schedule;
import com.xyram.daydrop.modelMapper.PaymentInstrument;
import com.xyram.daydrop.modelMapper.PhonePePayModel;
import com.xyram.daydrop.request.CustomerOrderReplicaRequest;
import com.xyram.daydrop.response.RazorPayRequest;
import com.xyram.daydrop.service.CustomerOrderPriceService;
import com.xyram.daydrop.service.CustomerOrderReplicaService;
import com.xyram.daydrop.util.HashEncoder;
import com.xyram.daydrop.util.RazorPay;
import com.xyram.daydrop.service.ConsumerService;

@Transactional
@Service
public class CustomerOrderReplicaServiceImpl implements CustomerOrderReplicaService {

	@Autowired
	CustomerOrderReplicaDoa customerOrderReplicaDoa;

	@Autowired
	ApartmentDao apartmentDao;

	@Autowired
	SheduleDao scheduleDao;

	@Autowired
	CustomerDetailsDao customerDetailsDao;

	@Autowired
	ConsumerService consumerService;

	@Autowired
	CurrentUser currentUser;

	@Autowired
	PhonepeServiceImpl phonepeServiceImpl;

	@Value("${merchant_id}")
	private String merchantId;

	@Value("${salt_key}")
	private String saltKey;

	@Value("${salt_index}")
	private String saltIndex;

	@Override
	public Map createCustomerOrderReplicaService(CustomerOrderReplicaRequest customerOrderReplicaRequest,
			String contactNumber, Integer aparmentId)

	{

		Map response = new HashedMap<>();

		response.put("message", "success");
		CustomerOrderReplica customerOrderReplica = null;

		if (customerOrderReplicaRequest.getCartId() == null) {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "cartId is mandatory ");
		}
		long razorPayCount = 0;
		if (customerOrderReplicaRequest.getOrderId() != null) {

			razorPayCount = customerOrderReplicaDoa.getRazorPayExistByCartId(customerOrderReplicaRequest.getOrderId());
		}

		if (customerOrderReplicaRequest.getCustomerDetails() == null) {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Order Details  is mandatory ");
		}

		customerOrderReplica = customerOrderReplicaDoa.getCustomerOrderByCartId(customerOrderReplicaRequest.getCartId(),
				contactNumber);

		if (customerOrderReplica != null) {
			customerOrderReplica.setCartId(customerOrderReplica.getCartId());

			if (customerOrderReplica.isOrdered()) {
				throw new ResponseStatusException(HttpStatus.CONFLICT, "Your Order is Placed With cart Details");
			}

//			if (razorPayCount >= 1 && !(customerOrderReplica.getRazorPayOrderId() != null
//					&& customerOrderReplica.getRazorPayOrderId().equals(customerOrderReplicaRequest.getOrderId()))) {
//				throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Razor Pay Id Are already Exist ");
//			}

			customerOrderReplica.setStatusType(customerOrderReplicaRequest.getStatusType());
			customerOrderReplica.setContactNumber(contactNumber);
			customerOrderReplica.setApartmentId(aparmentId);

			customerOrderReplica.setAttempts(customerOrderReplica.getAttempts() + 1);
			customerOrderReplica.setUpdatedTime(new Date());

			customerOrderReplica.setRazorPayOrderId(customerOrderReplicaRequest.getOrderId());

			try {

				JSONObject obj = new JSONObject(customerOrderReplicaRequest.getCustomerDetails());

				customerOrderReplica.setCustomerOrderDetails(obj != null ? obj.toString() : null);

				customerOrderReplicaDoa.updateCustomer(customerOrderReplica);
				return response;

			} catch (Exception e) {
				customerOrderReplica.setCustomerOrderDetails(customerOrderReplicaRequest.getCustomerDetails() != null
						? customerOrderReplicaRequest.getCustomerDetails().toString()
						: null);
				customerOrderReplicaDoa.updateCustomer(customerOrderReplica);
				return response;
			}

		} else {

			customerOrderReplica = new CustomerOrderReplica();
			customerOrderReplica.setContactNumber(contactNumber);
			customerOrderReplica.setApartmentId(aparmentId);
			customerOrderReplica.setCartId(customerOrderReplicaRequest.getCartId());
			customerOrderReplica.setStatusType(customerOrderReplicaRequest.getStatusType());

			if (razorPayCount > 0) {
				throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Razor Pay Id Are already Exist ");
			}

			customerOrderReplica.setRazorPayOrderId(customerOrderReplicaRequest.getOrderId());

			Schedule schedule = scheduleDao.getlatestScheduleCustomers();

			if (schedule != null) {

				try {
					customerOrderReplica.setSchedule(schedule.getsId() != null ? schedule.getsId().toString() : null);
				} catch (Exception e) {
					e.printStackTrace();
				}
			} else {
				throw new ResponseStatusException(HttpStatus.BAD_REQUEST,
						"Sorry We Are Not Accepting Any Order Right now");

			}

			try {

				JSONObject obj = new JSONObject(customerOrderReplicaRequest.getCustomerDetails());

				customerOrderReplica.setCustomerOrderDetails(obj != null ? obj.toString() : null);

				customerOrderReplicaDoa.updateCustomer(customerOrderReplica);
				return response;

			} catch (Exception e) {
				customerOrderReplica.setCustomerOrderDetails(customerOrderReplicaRequest.getCustomerDetails() != null
						? customerOrderReplicaRequest.getCustomerDetails().toString()
						: null);
				customerOrderReplicaDoa.updateCustomer(customerOrderReplica);
				return response;
			}

		}

	}

	@Override
	public List<CustomerOrderReplica> getAllCustomerOrderReplicas(Map<String, Object> request) {

		String statusType = null;
		String searchQuery = null;

		String schedule = null;

		Map filter = request.containsKey("filters") ? (Map) request.get("filters") : null;
		if (filter != null) {
			statusType = filter.containsKey("statusType") ? ((String) filter.get("statusType")).toLowerCase() : null;
			searchQuery = filter.containsKey("searchQuery") ? ((String) filter.get("searchQuery")).toLowerCase() : null;
			schedule = filter.containsKey("schedule") ? (String.valueOf(filter.get("schedule"))) : null;

		}

		List<CustomerOrderReplica> CustomerOrderReplica = customerOrderReplicaDoa
				.getAllcustomerOrderReplica(searchQuery, statusType, schedule);

		ObjectMapper objectMapper = new ObjectMapper();
		CustomerOrderReplica.forEach(customerOrderReplica -> {
			try {

				// convert JSON string to Map
				Map<String, Object> customerOrderReplicaMap = objectMapper
						.readValue(customerOrderReplica.getCustomerOrderDetails(), Map.class);

				Object customerOrder = customerOrderReplicaMap.get("customerOrder");
				Map<String, Object> items = (Map<String, Object>) customerOrderReplicaMap.get("items");

				Object quanityList = items.get("quantity");

				Map customers = customerDetailsDao.getByContactNumberAndApartment(
						customerOrderReplica.getContactNumber(), customerOrderReplica.getApartmentId());

				// Apartments apartments =
				// apartmentDao.getApartmentById(customerOrderReplica.getApartmentId());
				customerOrderReplica.setApartmentName(
						customers.get("apartmentName") != null ? (String) customers.get("apartmentName") : null);

				customerOrderReplica.setStreetName(
						customers.get("streetName") != null ? (String) customers.get("streetName") : null);

				customerOrderReplica.setCustomerDetails(customers);

				customerOrderReplica.setCustomerOrder(customerOrder);
				customerOrderReplica.setQuatityList(quanityList);

			} catch (Exception e) {
				e.printStackTrace();
			}

		});

		return CustomerOrderReplica;

	}

	@Override
	public List<CustomerOrderReplica> getAllCustomerOrderReplicasBySchedule(Map<String, Object> request) {

		String statusType = null;
		String searchQuery = null;

		String scheduleId = null;

		Schedule schedule = scheduleDao.getlatestScheduleCustomers();

		if (schedule != null) {

			try {
				scheduleId = schedule.getsId() != null ? schedule.getsId().toString() : null;
			} catch (Exception e) {
				e.printStackTrace();
			}
		}

		statusType = request.containsKey("statusType") ? ((String) request.get("statusType")).toLowerCase() : "Success";

		List<CustomerOrderReplica> CustomerOrderReplica = customerOrderReplicaDoa
				.getAllcustomerOrderReplicaBySchdeule(statusType, scheduleId);

		ObjectMapper objectMapper = new ObjectMapper();
		CustomerOrderReplica.forEach(customerOrderReplica -> {
			try {

				// convert JSON string to Map
				Map<String, Object> customerOrderReplicaMap = objectMapper
						.readValue(customerOrderReplica.getCustomerOrderDetails(), Map.class);

				Object customerOrder = customerOrderReplicaMap.get("customerOrder");
				Map<String, Object> items = (Map<String, Object>) customerOrderReplicaMap.get("items");

				Object quanityList = items.get("quantity");
				Map customers = customerDetailsDao.getByContactNumberAndApartment(
						customerOrderReplica.getContactNumber(), customerOrderReplica.getApartmentId());

				System.out.println("customers" + customers.get("customerName"));

				// Apartments apartments =
				// apartmentDao.getApartmentById(customerOrderReplica.getApartmentId());
				customerOrderReplica.setApartmentName(
						customers.get("apartmentName") != null ? (String) customers.get("apartmentName") : null);

				customerOrderReplica.setCustomerDetails(customers);

				customerOrderReplica.setCustomerOrder(customerOrder);
				customerOrderReplica.setQuatityList(quanityList);

			} catch (Exception e) {
				e.printStackTrace();
			}

		});

		return CustomerOrderReplica;

	}

	@Override
	public CustomerOrderReplica getCustomerOrderReplicaByCartId(String cartId) {

		CustomerOrderReplica CustomerOrderReplica = customerOrderReplicaDoa.getCustomerOrderByCartId(cartId,
				currentUser.getContactNumber());

		ObjectMapper objectMapper = new ObjectMapper();
		try {

			// convert JSON string to Map
			Map<String, Object> customerOrderReplicaMap = objectMapper
					.readValue(CustomerOrderReplica.getCustomerOrderDetails(), Map.class);

			Object customerOrder = customerOrderReplicaMap.get("customerOrder");
			Map<String, Object> items = (Map<String, Object>) customerOrderReplicaMap.get("items");

			Object quanityList = items.get("quantity");
			Map customers = customerDetailsDao.getByContactNumberAndApartment(CustomerOrderReplica.getContactNumber(),
					CustomerOrderReplica.getApartmentId());

			System.out.println("customers" + customers.get("customerName"));

			// Apartments apartments =
			// apartmentDao.getApartmentById(customerOrderReplica.getApartmentId());
			CustomerOrderReplica.setApartmentName(
					customers.get("apartmentName") != null ? (String) customers.get("apartmentName") : null);

			CustomerOrderReplica.setCustomerDetails(customers);

			CustomerOrderReplica.setCustomerOrder(customerOrder);
			CustomerOrderReplica.setQuatityList(quanityList);

		} catch (Exception e) {
			e.printStackTrace();
		}

		return CustomerOrderReplica;

	}

	@Override
	public Map createCustomerOrderReplica(CustomerOrderReplicaRequest customerOrderReplicaRequest, String contactNumber,
			Integer aparmentId) {

		if (customerOrderReplicaRequest.getRazorPayRequest() != null) {

//			Map razorPay = consumerService.createRazorPayOrder(customerOrderReplicaRequest.getRazorPayRequest());
//			customerOrderReplicaRequest.setOrderId(razorPay.get("order") != null ? (String)((RazorPay) razorPay.get("order")).getId() : null);	
//	
//			createCustomerOrderReplicaService(customerOrderReplicaRequest, contactNumber, aparmentId);
//
//			razorPay.put("cartId", customerOrderReplicaRequest.getCartId());

			Map customerOrderReplicaMap = new HashMap<>();

			Map orderId = new HashMap<>();
			String transactionId = getMerchantTransactionId();
			orderId.put("id", transactionId);

			customerOrderReplicaMap.put("order", orderId);

			customerOrderReplicaRequest.setOrderId(transactionId);
			createCustomerOrderReplicaService(customerOrderReplicaRequest, contactNumber, aparmentId);

			customerOrderReplicaMap.put("cartId", customerOrderReplicaRequest.getCartId());

			try {
				customerOrderReplicaMap.put("phonePeResponse",
						phonepeServiceImpl.initiatePhonepePayment(transactionId,
								Integer.valueOf(customerOrderReplicaRequest.getRazorPayRequest().getAmount()),
								contactNumber, customerOrderReplicaRequest.getRedirectUrl(), customerOrderReplicaRequest.getCallBackUrl()));

			} catch (Exception e) {
				e.printStackTrace();
				customerOrderReplicaMap.put("phonePeResponse", new HashedMap<>());
			}

			return customerOrderReplicaMap;

		} else {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST,
					"paymentDetails transcation Details are mandatory");
		}

	}

	private static String getMerchantTransactionId() {

		return "OD_" + MerchantTransactionIdGenerator.getRandomString();
	}


	@Override
	public List<CustomerOrderReplica> getCustomerOrderByMoblieNo(String contactNumber,Integer aid) {
		
		Schedule latestschedule = customerOrderReplicaDoa.getlatestschedule();
		
		if (latestschedule != null && latestschedule.getCreationTimestamp()!=null) {
			
	        if (latestschedule.getStatus().equals(UserStatus.ACTIVE)) {
	        	
	        	Customers customer = customerDetailsDao.getByContactNoAndApartment(contactNumber, aid);
	        	if (customer != null) { // Ensure the customer exists
	        		List<CustomerOrder> customerOrderList = customerOrderReplicaDoa.getListCustomerOrderByCustomerId(customer.getCtid());
	        		
	                double totalOrderAmount = 0.0;
	       
                if (customerOrderList != null && !customerOrderList.isEmpty() && customerOrderList.add(customerOrder). {
                    for (CustomerOrder customerOrder : customerOrderList) {
                        Double orderAmount = customerOrder.getAmount();
                        
                        if(orderAmount>200) {
                        	
                        }
                        if (orderAmount != null) {
                            totalOrderAmount += orderAmount;
                            if(totalOrderAmount>200) {
                            	totalOrderAmount+customerOrder
                            }
                        }
                    }
                    System.out.println("Total Order Amount: " + totalOrderAmount);
                    List<CustomerOrderReplica> customerOrderReplicas = new ArrayList<>();
                    return customerOrderReplicas;
                } else {
                    return Collections.emptyList(); // or return null or an appropriate value
                }
            } else {
              
                return null; // or an appropriate value
            }
        } else {
            // Handle the case when the latest schedule is not active
            return null; // or an appropriate value
        }
    } else {
        // Handle the case when there is no latest schedule or its creation timestamp is null
        return null; // or an appropriate value
    }
	}
}



----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3003)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)
